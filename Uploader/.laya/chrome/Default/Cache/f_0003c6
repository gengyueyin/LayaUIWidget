var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var wesai;
(function (wesai) {
    var HoldemPoker;
    (function (HoldemPoker) {
        var MTTRoomControl = /** @class */ (function (_super) {
            __extends(MTTRoomControl, _super);
            function MTTRoomControl() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                //重新买入筹码
                _this.reEntryBankroll = 0;
                _this.rebuyType = -1;
                return _this;
            }
            MTTRoomControl.prototype.registerNotify = function () {
                _super.prototype.registerNotify.call(this);
                this.net.registerNotifyMsg("JoinMTTRoomResponse", this, this.onJoinMTTRoomResponse);
                this.net.registerNotifyMsg("MTTGameUpdate", this, this.onGameUpdate);
                this.net.registerNotifyMsg("MTTReEntryNotify", this, this.onMTTReEntryNotify);
                this.net.registerNotifyMsg("MTTPurchaseResponse", this, this.onMTTReEntryResponse);
                this.net.registerNotifyMsg("MTTPlayerOverRankNotify", this, this.onMTTPlayerOverRankNotify);
                this.net.registerNotifyMsg("OutSngRoomResponse", this, this.onOutSngRoomResponse);
                this.net.registerNotifyMsg("MTTOverNotify", this, this.onMTTOverNotify);
                this.net.registerNotifyMsg("NotifyUpBlindResponse", this, this.onNotifyUpBlindResponse);
                this.net.registerNotifyMsg("NotifySngStartBegin", this, this.onNotifySngStartBegin);
                this.net.registerNotifyMsg("MTTMyRankResponse", this, this.onMTTMyRankResponse);
            };
            MTTRoomControl.prototype.unRegisterNotify = function () {
                _super.prototype.unRegisterNotify.call(this);
                this.net.off(HoldemPoker.GEvent.MTT_REENTRY_OK, this, this.onMTTReEntry);
                this.net.off(HoldemPoker.GEvent.MTT_REENTRY_CANEL, this, this.onMTTReEntry);
                this.net.unRegisterNotifyMsg("JoinMTTRoomResponse");
                this.net.unRegisterNotifyMsg("MTTGameUpdate");
                this.net.unRegisterNotifyMsg("MTTOverNotify");
                this.net.unRegisterNotifyMsg("MTTReEntryNotify");
                this.net.unRegisterNotifyMsg("MTTPurchaseResponse");
                this.net.unRegisterNotifyMsg("MTTPlayerOverRankNotify");
                this.net.unRegisterNotifyMsg("OutSngRoomResponse");
                this.net.unRegisterNotifyMsg("NotifyUpBlindResponse");
                this.net.unRegisterNotifyMsg("MTTMyRankResponse");
            };
            MTTRoomControl.prototype.registerUIEvent = function () {
                this.gameUI.on(HoldemPoker.GEvent.MTT_REENTRY_OK, this, this.onMTTReEntry, [HoldemPoker.GEvent.MTT_REENTRY_OK]);
                this.gameUI.on(HoldemPoker.GEvent.MTT_REENTRY_CANEL, this, this.onMTTReEntry, [HoldemPoker.GEvent.MTT_REENTRY_CANEL]);
                this.gameUI.on(HoldemPoker.GEvent.MTT_REBUY_OK, this, this.onMTTReEntry, [HoldemPoker.GEvent.MTT_REBUY_OK]);
                this.gameUI.on(HoldemPoker.GEvent.MTT_ADDCHIPS_OK, this, this.onMTTReEntry, [HoldemPoker.GEvent.MTT_ADDCHIPS_OK]);
                this.gameUI.menuView.on(HoldemPoker.GEvent.MTT_REBUY, this, this.onClickRebuy);
                this.gameUI.menuView.on(HoldemPoker.GEvent.INGAME_QUIT, this, this.quitRoomRequest);
            };
            MTTRoomControl.prototype.quitRoomRequest = function () {
                this.net.requestNotify("MTTOutRoomRequest", {
                    roomId: this.roomData.id,
                    gameId: this.roomData.gameId
                });
            };
            MTTRoomControl.prototype.onOutSngRoomResponse = function (data) {
                console.debug("[GameMgr]receive OutSngRoomResponse data = " + JSON.stringify(data));
                //自己进入主界面
                if (data.sitId === -1 || data.sitId === this.roomData.selfSitId) {
                    this.go(HoldemPoker.PlayState.LeaveState);
                    return;
                }
                //设置托管标志
                var seatData = this.roomData.getSeatBySitId(data.sitId);
                if (seatData) {
                    seatData.managed = true;
                    var panel = this.gameUI.getSeatByServerPos(data.sitId);
                    if (panel) {
                        panel.updateManaged(seatData);
                    }
                }
            };
            MTTRoomControl.prototype.requestJoinRoom = function () {
                var joinRoomData = {
                    gameId: this.roomData.gameId,
                    roomId: this.roomData.id,
                    invitationCode: this.roomData.invitationCode === undefined ? "" : this.roomData.invitationCode,
                    // playerId: Sys.players.self.id
                    sessionKey: HoldemPoker.Sys.players.account.sessionKey,
                };
                this.net.requestNotify("JoinMTTRoomRequest", joinRoomData);
            };
            MTTRoomControl.prototype.requestLookOnRoom = function () {
                var gameId = 0;
                if (this.roomData.gameId) {
                    gameId = this.roomData.gameId;
                }
                var data = {
                    roomId: this.roomData.id,
                    gameId: gameId,
                    watchPlayerId: this.roomData.watchPlayerId,
                    // playerId: Sys.players.self.id
                    sessionKey: HoldemPoker.Sys.players.account.sessionKey,
                };
                this.net.requestNotify("MTTWatchRequest", data);
            };
            MTTRoomControl.prototype.currentRankRequest = function () {
            };
            MTTRoomControl.prototype.onJoinMTTRoomResponse = function (data) {
                HoldemPoker.Sys.players.self.currentRoomId = data.roomId;
                HoldemPoker.Sys.players.self.currentGameId = data.gameId;
                //如果不是自己的id说明是后加进来的人，只添加用户
                if (HoldemPoker.Sys.players.self.id === data.joinPlayerId) {
                    var roomData = HoldemPoker.RoomDataProvider.getRoomDataByJoinMTTRoomResponse(data);
                    roomData.signUpCost = data.rebuyCost;
                    roomData.rebuySurchargePercent = data.rebuySurchargePercent;
                    roomData.signUpType = data.signUpType;
                    // roomData.signUpFee = data.rebuySurcharge;
                    roomData.baseBankroll = data.baseBankroll;
                    roomData.reBuyRestNum = data.reBuyRestNum;
                    roomData.addRestNum = data.addRestNum;
                    roomData.rEndBlind = data.rEndBlind;
                    roomData.addonChips = data.addonChips;
                    HoldemPoker.Sys.players.self.currentSitId = roomData.selfSitId;
                    this.JoinRoom(roomData);
                    if (roomData.selfSitId >= 0) {
                        this.getMyRank();
                    }
                    //加入房间 接受服务器数据
                    HoldemPoker.Sys.ui.stopLoading();
                }
                else {
                    // this.setData(roomData);
                    // this.gameUI.gameUIByRoomType();
                    // this.gameUI.updateAll();
                    for (var _i = 0, _a = data.sitInfo; _i < _a.length; _i++) {
                        var seat = _a[_i];
                        if (seat.playerId === data.joinPlayerId) {
                            var delayJoinCmd = HoldemPoker.DelayJoinCommand.cmdWithDelayJoinMessage(seat, data.roomId, data.gameId);
                            this.cmdMgr.push(delayJoinCmd);
                            break;
                        }
                    }
                    // let joinSeatId = this.roomData.getSitIdByPlayerId(data.joinPlayerId);
                    // // this.startGameCountDown();
                    // let panel = this.gameUI.getSeatByServerPos(joinSeatId);
                    // if (panel) {
                    //     let seat = this.roomData.getSeatByPlayerId(data.joinPlayerId);
                    //     if (seat) {
                    //         panel.updateByNewRound(seat);
                    //     }
                    // }
                }
            };
            MTTRoomControl.prototype.onNotifyUpBlindResponse = function (data) {
                this.roomData.gameData.blind = data.bb;
                this.roomData.gameData.sb = data.sb;
                this.roomData.gameData.blindLevel = data.blindRank; //当前级别
                this.gameUI.raiseBlindNotify(data.bb);
                if (this.roomData.rEndBlind + 1 === this.roomData.gameData.blindLevel && this.roomData.addRestNum > 0) {
                    this.gameUI.menuView.setReBuyBtn(true, HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.addBuyText));
                    return;
                }
                // if (this.roomData.rEndBlind + 1 < this.roomData.gameData.blindLevel || this.roomData.addRestNum === 0) {
                //     this.gameUI.menuView.setReBuyBtn(false, "");
                // }
            };
            MTTRoomControl.prototype.onGameUpdate = function (data) {
                //自己不走，只更新座位信息
                var command = HoldemPoker.MttChangeTableCommand.cmdWithMTTUpdatedMessage(data, this.roomData.gameId);
                this.cmdMgr.push(command);
            };
            MTTRoomControl.prototype.onMTTReEntryNotify = function (data) {
                if (HoldemPoker.Sys.players.self.isSelf(data.playerId)) {
                    this.roomData.getSelfSeat().holeCards = null;
                }
                this.reEntryBankroll = this.roomData.baseBankroll;
                var command = HoldemPoker.MttReEntryCommand.cmdWithReEntryMessage(data);
                this.cmdMgr.push(command);
                // this.gameUI.showReEntry(data.countDown, data.signUpCost + "+" + data.signUpFee, data.baseBankroll);
            };
            MTTRoomControl.prototype.onClickRebuy = function () {
                var _this = this;
                this.gameUI.menuView.visible = false;
                var _a = this.roomData, signUpCost = _a.signUpCost, signUpType = _a.signUpType, rebuySurchargePercent = _a.rebuySurchargePercent;
                var applyValidError = HoldemPoker.Sys.itemMgr.itemRepository.validateEntryFee(signUpCost, signUpType, rebuySurchargePercent);
                var entryFeeDisplayStr = HoldemPoker.Sys.itemMgr.itemRepository.entryFeeResolveDisplayStr(signUpCost, signUpType, rebuySurchargePercent);
                console.log("rEndBlind:" + this.roomData.rEndBlind + "---blindLevel:" + this.roomData.gameData.blindLevel
                    + "---reBuyRestNum:" + this.roomData.reBuyRestNum + "---addRestNum:" + this.roomData.addRestNum
                    + "---this.roomData.baseBankroll:" + this.roomData.baseBankroll);
                //增购
                if (this.roomData.rEndBlind + 1 === this.roomData.gameData.blindLevel && this.roomData.addRestNum > 0) {
                    if (applyValidError.flag === false) {
                        var errorTemplate = applyValidError.errorTemplate;
                        var tipText = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.cannotAddBuy);
                        if (errorTemplate) {
                            if (errorTemplate.itemTempId === HoldemPoker.VirtualCurrencyType.WesaiCurrency || errorTemplate.itemTempId === HoldemPoker.VirtualCurrencyType.DiamondCurrency) {
                                //处理快捷支付
                                HoldemPoker.Sys.itemMgr.itemRepository.resolveQuickPay(applyValidError, function () {
                                });
                                return;
                            }
                            else {
                                //其它不足直接提示
                                tipText = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.notEnoughTip, errorTemplate.name, tipText);
                            }
                        }
                        HoldemPoker.MessageDialog.showWithText(tipText);
                        return;
                    }
                    this.gameUI.showReEntry(-1, entryFeeDisplayStr, this.roomData.addonChips);
                    return;
                }
                if (this.roomData.rEndBlind > this.roomData.gameData.blindLevel && this.roomData.reBuyRestNum <= 0) {
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.cannotRebuyTip));
                    return;
                }
                if (this.roomData.rEndBlind + 1 < this.roomData.gameData.blindLevel) {
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.cannotRebugOrAddBuyTip));
                    return;
                }
                var seat = this.roomData.getSelfSeat();
                if (!seat) {
                    return;
                }
                if (this.roomData.rebutCount > 0) {
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.rebuiedTip));
                    return;
                }
                if (this.roomData.baseBankroll <= seat.bankroll) {
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.chipsTooEnoughToRebuy));
                    return;
                }
                //替换buy guo
                if (applyValidError.flag === false) {
                    var errorTemplate = applyValidError.errorTemplate;
                    if (errorTemplate) {
                        // 微赛币不足
                        if (errorTemplate.itemTempId === HoldemPoker.VirtualCurrencyType.WesaiCurrency) {
                            if (HoldemPoker.QuickPayment.isGoldFullaya(errorTemplate.costAmount, false)) {
                            }
                            else {
                                HoldemPoker.QuickPayment.setCallBack(function (type) {
                                    console.log("callback:" + type);
                                    switch (type) {
                                        case 1:
                                            _this.gameUI.event(HoldemPoker.GEvent.MTT_REBUY_OK);
                                            break;
                                        case 0:
                                            // rc.gameUI.event(GEvent.MTT_REENTRY_CANEL);
                                            break;
                                    }
                                });
                            }
                        }
                        else {
                            //其它不足直接提示
                            HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.notEnoughToRebuyOrAddBuy, errorTemplate.name));
                        }
                        //只处理微赛币和钻石的情况
                        // if (errorTemplate && (errorTemplate.itemTempId === VirtualCurrencyType.WesaiCurrency || errorTemplate.itemTempId === VirtualCurrencyType.DiamondCurrency)) {
                        //     //处理快捷支付
                        //     Sys.itemMgr.itemRepository.resolveQuickPay(applyValidError, (quickPayResult: QuickPayResult) => {
                        //         //微赛币不足去买钻石的情况
                        //         // if (quickPayResult.payType === QuickPayType.GoldToDiamond) {
                        //         //     rc.gameUI.event(GEvent.MTT_REENTRY_CANEL);
                        //         // } else {
                        //         //     rc.gameUI.event(GEvent.MTT_REENTRY_OK);
                        //         // }
                        //         this.gameUI.event(GEvent.MTT_REBUY_OK);
                        //     }, () => {
                        //         // rc.gameUI.event(GEvent.MTT_REENTRY_CANEL);
                        //     }, 1000 * 15);
                        // } else {
                        //     //其它不足直接提示
                        //     MessageDialog.showWithText(Sys.localization.getFormated(stringtable.notEnoughToRebuyOrAddBuy, errorTemplate.name));
                        // }
                    }
                    else {
                        HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.accounCannotReBuyOrAddBuy));
                    }
                }
                else {
                    this.gameUI.showReEntry(0, entryFeeDisplayStr, this.roomData.baseBankroll);
                }
            };
            MTTRoomControl.prototype.onMTTReEntry = function (str) {
                var postIds = HoldemPoker.Sys.itemMgr.itemRepository.resolveEntryFeePostStr(this.roomData.signUpCost, this.roomData.signUpType, this.roomData.rebuySurchargePercent);
                if (str === HoldemPoker.GEvent.MTT_REENTRY_OK) {
                    this.go(HoldemPoker.PlayState.WaitingState);
                    this.rebuyType = HoldemPoker.msg.MTTPurchaseType.ReEntry;
                    this.net.requestNotify("MTTPurchaseRequest", {
                        type: HoldemPoker.msg.MTTPurchaseType.ReEntry,
                        roomId: this.roomData.id,
                        rebuyItemUniqueId: postIds
                    });
                }
                else if (str === HoldemPoker.GEvent.MTT_REBUY_OK) {
                    this.rebuyType = HoldemPoker.msg.MTTPurchaseType.ReBuy;
                    this.net.requestNotify("MTTPurchaseRequest", {
                        type: HoldemPoker.msg.MTTPurchaseType.ReBuy,
                        roomId: this.roomData.id,
                        rebuyItemUniqueId: postIds
                    });
                }
                else if (str === HoldemPoker.GEvent.MTT_ADDCHIPS_OK) {
                    this.rebuyType = HoldemPoker.msg.MTTPurchaseType.Addon;
                    this.net.requestNotify("MTTPurchaseRequest", {
                        type: HoldemPoker.msg.MTTPurchaseType.Addon,
                        roomId: this.roomData.id,
                        rebuyItemUniqueId: postIds
                    });
                }
                else {
                    this.go(HoldemPoker.PlayState.WaitingState);
                    this.net.requestNotify("MTTUnReEntryRequest", { roomId: this.roomData.id });
                }
            };
            // MTT重入成功响应
            MTTRoomControl.prototype.onMTTReEntryResponse = function (data) {
                if (data.type === HoldemPoker.msg.MTTPurchaseType.ReEntry) {
                    if (HoldemPoker.Sys.players.self.isSelf(data.playerId)) {
                        this.roomData.rebutCount++;
                        HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.reEntrySuccess));
                        this.roomData.reBuyRestNum = data.reBuyRestNum;
                        // this.go(PlayState.WaitingState);
                    }
                    // this.gameUI.gameWaitingg.visible = true;
                    var seatData = this.roomData.getSeatByPlayerId(data.playerId);
                    if (seatData) {
                        var panel = this.gameUI.getSeatByPlayerId(data.playerId);
                        if (panel) {
                            seatData.state = HoldemPoker.msg.EPlayerState.sitdown;
                            panel.updateByNewRound(seatData);
                        }
                    }
                }
                else if (data.type === HoldemPoker.msg.MTTPurchaseType.ReBuy) {
                    this.roomData.rebutCount++;
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.rebuySuccessTip));
                    this.roomData.reBuyRestNum = data.reBuyRestNum;
                }
                else if (data.type === HoldemPoker.msg.MTTPurchaseType.Addon) {
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.addBuySuccessTip));
                    this.roomData.addRestNum = data.addRestNum;
                }
                // if (data.reBuyRestNum !== null) {
                //     MessageDialog.showWithText("重购成功！");
                //     if (this.roomData.getSelfSeat().state === msg.EPlayerState.rebuy) {
                //         this.gameUI.gameWaitingg.visible = true;
                //     }
                //     this.roomData.reBuyRestNum = data.reBuyRestNum;
                // }
                // if (data.addRestNum !== null) {
                //     MessageDialog.showWithText("增购成功！");
                //     this.roomData.addRestNum = data.addRestNum;
                // }
            };
            MTTRoomControl.prototype.onMTTPlayerOverRankNotify = function (data) {
                // if (this.roomData && this.roomData.getSelfSeat() && this.roomData.getSelfSeat().sitId === data.sitId) {
                //     if (this.managerUI && this.roomData.getSelfSeat().managed) {
                //         Sys.ui.remove(this.managerUI);
                //     }
                // }
                if (data.rank === 1) {
                    this.roomData.gameData.isMttOver = true;
                }
                var command = HoldemPoker.GameOverCommand.cmdWithMttGameOver(data);
                this.cmdMgr.push(command);
            };
            // mtt结束,战绩发给还在房间所有人(结算页)
            MTTRoomControl.prototype.onMTTOverNotify = function (data) {
                var command = HoldemPoker.GameOverCommand.cmdWithMTTRewardMessage(data);
                this.cmdMgr.push(command);
            };
            MTTRoomControl.prototype.checkSignUpGold = function (restFee) {
                var _this = this;
                var content = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.enrollNotEnough, Math.abs(restFee));
                var gold = Math.abs(restFee);
                HoldemPoker.AlertDialog.showWithText(content, HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.recharge), Laya.Handler.create(this, function () {
                    var data = { type: HoldemPoker.msg.PayType.Fast, paymentId: 0, amount: 1, gold: gold };
                    HoldemPoker.Sys.games.mainUIMgr.createOrder(data, _this, function (data) {
                        if (data.order.wechatOrder) {
                            var wechatOrder = data.order.wechatOrder;
                            var json = {
                                partnerid: wechatOrder.partnerId,
                                prepayid: wechatOrder.prePayId,
                                package: wechatOrder.package,
                                noncestr: wechatOrder.nonceStr,
                                timestamp: wechatOrder.timeStamp,
                                sign: wechatOrder.sign
                            };
                            HoldemPoker.NativeModule.payWithWeixin(JSON.stringify(json));
                        }
                    });
                }));
            };
            MTTRoomControl.prototype.onNotifySngStartBegin = function (data) {
                var cmd = HoldemPoker.CountdownCommand.create(data);
                this.cmdMgr.push(cmd);
            };
            MTTRoomControl.prototype.getMyRank = function () {
                this.net.requestNotify("MTTMyRankRequest", { roomId: this.roomData.id });
            };
            MTTRoomControl.prototype.onMTTMyRankResponse = function (data) {
                if (data.rank) {
                    switch (data.rank) {
                        case 1:
                            if (HoldemPoker.Sys.isSimple) {
                                this.gameUI.myRankImg.skin = "1334/ingame/simple/my_rank1.png";
                            }
                            else {
                                this.gameUI.myRankImg.skin = "1334/ingame/my_rank1.png";
                            }
                            break;
                        case 2:
                            if (HoldemPoker.Sys.isSimple) {
                                this.gameUI.myRankImg.skin = "1334/ingame/simple/my_rank2.png";
                            }
                            else {
                                this.gameUI.myRankImg.skin = "1334/ingame/my_rank2.png";
                            }
                            break;
                        case 3:
                            if (HoldemPoker.Sys.isSimple) {
                                this.gameUI.myRankImg.skin = "1334/ingame/simple/my_rank3.png";
                            }
                            else {
                                this.gameUI.myRankImg.skin = "1334/ingame/my_rank3.png";
                            }
                            break;
                        default:
                            if (HoldemPoker.Sys.isSimple) {
                                this.gameUI.myRankImg.skin = "1334/ingame/simple/my_rank4.png";
                            }
                            else {
                                this.gameUI.myRankImg.skin = "1334/ingame/my_rank4.png";
                            }
                    }
                    this.gameUI.myRankImg.visible = true;
                    this.gameUI.myRankText.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.rankLevel, data.rank);
                }
            };
            return MTTRoomControl;
        }(HoldemPoker.RoomControl));
        HoldemPoker.MTTRoomControl = MTTRoomControl;
    })(HoldemPoker = wesai.HoldemPoker || (wesai.HoldemPoker = {}));
})(wesai || (wesai = {}));
//# sourceMappingURL=MTTRoomControl.js.map