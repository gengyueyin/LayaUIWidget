var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * @Author: wesai.谢久伟
 * @Date: 2017-07-06 00:15:32
 * @Last Modified by: wesai.谢久伟
 * @Last Modified time: 2017-09-04 11:46:10
 */
var wesai;
(function (wesai) {
    var HoldemPoker;
    (function (HoldemPoker) {
        var Event = laya.events.Event;
        var Point = laya.maths.Point;
        var Ease = laya.utils.Ease;
        var Handler = laya.utils.Handler;
        var Tween = laya.utils.Tween;
        var Button = laya.ui.Button;
        var Slider = laya.ui.Slider;
        /**
         * <code>ScrollBar</code> 组件是一个滚动条组件。
         * <p>当数据太多以至于显示区域无法容纳时，最终用户可以使用 <code>ScrollBar</code> 组件控制所显示的数据部分。</p>
         * <p> 滚动条由四部分组成：两个箭头按钮、一个轨道和一个滑块。 </p>	 *
         *
         * @see laya.ui.VScrollBar
         * @see laya.ui.HScrollBar
         */
        var WScrollBar = /** @class */ (function (_super) {
            __extends(WScrollBar, _super);
            function WScrollBar() {
                var _this = _super.call(this) || this;
                /**滚动衰减系数*/
                _this.rollRatio = 0.95;
                /**是否缩放滑动条，默认值为true。 */
                _this.scaleBar = true;
                /**一个布尔值，指定是否自动隐藏滚动条(无需滚动时)，默认值为false。*/
                _this.autoHide = false;
                /**橡皮筋效果极限距离，0为没有橡皮筋效果。*/
                _this.elasticDistance = 0;
                /**橡皮筋回弹时间，单位为毫秒。*/
                _this.elasticBackTime = 500;
                /**@private */
                _this._showButtons = UIConfig.showButtons;
                /**@private */
                _this._scrollSize = 1;
                /**@private */
                _this._thumbPercent = 1;
                /**@private */
                _this._lastOffset = 0;
                /**@private */
                _this._checkElastic = false;
                /**@private */
                _this._isElastic = false;
                /**@private */
                _this._hide = false;
                /**@private */
                _this._clickOnly = true;
                /**@private */
                _this._touchScrollEnable = UIConfig.touchScrollEnable;
                /**@private */
                _this._mouseWheelEnable = UIConfig.mouseWheelEnable;
                _this.onPullListener = null;
                _this.isLoading = false;
                _this.superDataSource = _this.dataSource;
                return _this;
            }
            /**
             * 创建一个新的 <code>ScrollBar</code> 实例。
             * @param skin 皮肤资源地址。
             */
            WScrollBar.prototype.ScrollBar = function (skin) {
                if (skin === void 0) { skin = null; }
                this.skin = skin;
                this.max = 1;
            };
            /**@inheritDoc */
            WScrollBar.prototype.destroy = function (destroyChild) {
                if (destroyChild === void 0) { destroyChild = true; }
                _super.prototype.destroy.call(this, destroyChild);
                if (this.upButton) {
                    this.upButton.destroy(destroyChild);
                }
                if (this.downButton) {
                    this.downButton.destroy(destroyChild);
                }
                if (this.slider) {
                    this.slider.destroy(destroyChild);
                }
                this.upButton = this.downButton = null;
                this.slider = null;
                this.changeHandler = null;
                this._offsets = null;
            };
            /**@inheritDoc */
            WScrollBar.prototype.createChildren = function () {
                this.addChild(this.slider = new Slider());
                //TODO:
                this.addChild(this.upButton = new Button());
                this.addChild(this.downButton = new Button());
            };
            /**@inheritDoc */
            WScrollBar.prototype.initialize = function () {
                this.slider.showLabel = false;
                this.slider.on(Event.CHANGE, this, this.onSliderChange);
                this.slider.setSlider(0, 0, 0);
                this.upButton.on(Event.MOUSE_DOWN, this, this.onButtonMouseDown);
                this.downButton.on(Event.MOUSE_DOWN, this, this.onButtonMouseDown);
            };
            /**
             * @private
             * 滑块位置发生改变的处理函数。
             */
            WScrollBar.prototype.onSliderChange = function () {
                this.value = this.slider.value;
            };
            /**
             * @private
             * 向上和向下按钮的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
             */
            WScrollBar.prototype.onButtonMouseDown = function (e) {
                var isUp = e.currentTarget === this.upButton;
                this.slide(isUp);
                Laya.timer.once(Laya.Styles.scrollBarDelayTime, this, this.startLoop, [isUp]);
                Laya.stage.once(Event.MOUSE_UP, this, this.onStageMouseUp);
            };
            /**@private */
            WScrollBar.prototype.startLoop = function (isUp) {
                Laya.timer.frameLoop(1, this, this.slide, [isUp]);
            };
            /**@private */
            WScrollBar.prototype.slide = function (isUp) {
                if (isUp) {
                    this.value -= this._scrollSize;
                }
                else {
                    this.value += this._scrollSize;
                }
            };
            /**
             * @private
             * 舞台的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
             */
            WScrollBar.prototype.onStageMouseUp = function (e) {
                Laya.timer.clear(this, this.startLoop);
                Laya.timer.clear(this, this.slide);
            };
            Object.defineProperty(WScrollBar.prototype, "skin", {
                /**
                 * @copy laya.ui.Image#skin
                 */
                get: function () {
                    return this._skin;
                },
                set: function (value) {
                    if (this._skin !== value) {
                        this._skin = value;
                        this.slider.skin = this._skin;
                        this.callLater(this.changeScrollBar);
                    }
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @private
             * 更改对象的皮肤及位置。
             */
            WScrollBar.prototype.changeScrollBar = function () {
                this.upButton.visible = this._showButtons;
                this.downButton.visible = this._showButtons;
                if (this._showButtons) {
                    this.upButton.skin = this._skin.replace(".png", "$up.png");
                    this.downButton.skin = this._skin.replace(".png", "$down.png");
                }
                if (this.slider.isVertical) {
                    this.slider.y = this._showButtons ? this.upButton.height : 0;
                }
                else {
                    this.slider.x = this._showButtons ? this.upButton.width : 0;
                }
                this.resetPositions();
            };
            /**@inheritDoc */
            WScrollBar.prototype.changeSize = function () {
                _super.prototype.changeSize.call(this);
                this.resetPositions();
                this.event(Event.CHANGE);
                if (this.changeHandler) {
                    this.changeHandler.runWith(this.value);
                }
            };
            /**@private */
            WScrollBar.prototype.resetPositions = function () {
                if (this.slider.isVertical) {
                    this.slider.height = this.height - (this._showButtons ? (this.upButton.height + this.downButton.height) : 0);
                }
                else {
                    this.slider.width = this.width - (this._showButtons ? (this.upButton.width + this.downButton.width) : 0);
                }
                this.resetButtonPosition();
            };
            /**@private */
            WScrollBar.prototype.resetButtonPosition = function () {
                if (this.slider.isVertical) {
                    this.downButton.y = this.slider.y + this.slider.height;
                }
                else {
                    this.downButton.x = this.slider.x + this.slider.width;
                }
            };
            Object.defineProperty(WScrollBar.prototype, "measureWidth", {
                /**@inheritDoc */
                get: function () {
                    if (this.slider.isVertical) {
                        return this.slider.width;
                    }
                    return 100;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WScrollBar.prototype, "measureHeight", {
                /**@inheritDoc */
                get: function () {
                    if (this.slider.isVertical) {
                        return 100;
                    }
                    return this.slider.height;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * 设置滚动条信息。
             * @param min 滚动条最小位置值。
             * @param max 滚动条最大位置值。
             * @param value 滚动条当前位置值。
             */
            WScrollBar.prototype.setScroll = function (min, max, value) {
                this.runCallLater(this.changeSize);
                this.slider.setSlider(min, max, value);
                //_upButton.disabled = max <= 0;
                //_downButton.disabled = max <= 0;
                this.slider.bar.visible = max > 0;
                if (!this._hide && this.autoHide) {
                    this.visible = false;
                }
            };
            Object.defineProperty(WScrollBar.prototype, "max", {
                /**
                 * 获取或设置表示最高滚动位置的数字。
                 */
                get: function () {
                    return this.slider.max;
                },
                set: function (value) {
                    this.slider.max = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WScrollBar.prototype, "min", {
                /**
                 * 获取或设置表示最低滚动位置的数字。
                 */
                get: function () {
                    return this.slider.min;
                },
                set: function (value) {
                    this.slider.min = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WScrollBar.prototype, "value", {
                /**
                 * 获取或设置表示当前滚动位置的数字。
                 */
                get: function () {
                    return this._value;
                },
                set: function (v) {
                    if (v !== this._value) {
                        if (this._isElastic) {
                            this._value = v;
                        }
                        else {
                            this.slider.value = v;
                            this._value = this.slider.value;
                        }
                        this.event(Event.CHANGE);
                        if (this.changeHandler) {
                            this.changeHandler.runWith(this.value);
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WScrollBar.prototype, "isVertical", {
                /**
                 * 一个布尔值，指示滚动条是否为垂直滚动。如果值为true，则为垂直滚动，否则为水平滚动。
                 * <p>默认值为：true。</p>
                 */
                get: function () {
                    return this.slider.isVertical;
                },
                set: function (value) {
                    this.slider.isVertical = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WScrollBar.prototype, "sizeGrid", {
                /**
                 * <p>当前实例的 <code>Slider</code> 实例的有效缩放网格数据。</p>
                 * <p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
                 * <ul><li>例如："4,4,4,4,1"</li></ul></p>
                 * @see laya.ui.AutoBitmap.sizeGrid
                 */
                get: function () {
                    return this.slider.sizeGrid;
                },
                set: function (value) {
                    this.slider.sizeGrid = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WScrollBar.prototype, "scrollSize", {
                /**获取或设置一个值，该值表示按下滚动条轨道时页面滚动的增量。 */
                get: function () {
                    return this._scrollSize;
                },
                set: function (value) {
                    this._scrollSize = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WScrollBar.prototype, "dataSource", {
                /**@inheritDoc */
                set: function (value) {
                    this._dataSource = value;
                    if (typeof value === "number") {
                        this.value = Math.floor(value);
                    }
                    else if (typeof value === "string") {
                        this.value = parseInt(value);
                    }
                    else {
                        this.superDataSource = value;
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WScrollBar.prototype, "thumbPercent", {
                /**获取或设置一个值，该值表示滑条长度比例，值为：（0-1）。 */
                get: function () {
                    return this._thumbPercent;
                },
                set: function (value) {
                    this.runCallLater(this.changeScrollBar);
                    this.runCallLater(this.changeSize);
                    value = value >= 1 ? 0.99 : value;
                    this._thumbPercent = value;
                    if (this.scaleBar) {
                        if (this.slider.isVertical) {
                            this.slider.bar.height = Math.max(this.slider.height * value, Laya.Styles.scrollBarMinNum);
                        }
                        else {
                            this.slider.bar.width = Math.max(this.slider.width * value, Laya.Styles.scrollBarMinNum);
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WScrollBar.prototype, "target", {
                /**
                 * 设置滚动对象。
                 * @see laya.ui.TouchScroll#target
                 */
                get: function () {
                    return this._target;
                },
                set: function (value) {
                    if (this._target) {
                        this._target.off(Event.MOUSE_WHEEL, this, this.onTargetMouseWheel);
                        this._target.off(Event.MOUSE_DOWN, this, this.onTargetMouseDown);
                    }
                    this._target = value;
                    if (value) {
                        if (this._mouseWheelEnable) {
                            this._target.on(Event.MOUSE_WHEEL, this, this.onTargetMouseWheel);
                        }
                        if (this._touchScrollEnable) {
                            this._target.on(Event.MOUSE_DOWN, this, this.onTargetMouseDown);
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WScrollBar.prototype, "hide", {
                /**是否隐藏滚动条，不显示滚动条，但是可以正常滚动，默认为false。*/
                get: function () {
                    return this._hide;
                },
                set: function (value) {
                    this._hide = value;
                    this.visible = !value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WScrollBar.prototype, "showButtons", {
                /**一个布尔值，指定是否显示向上、向下按钮，默认值为true。*/
                get: function () {
                    return this._showButtons;
                },
                set: function (value) {
                    this._showButtons = value;
                    this.callLater(this.changeScrollBar);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WScrollBar.prototype, "touchScrollEnable", {
                /**一个布尔值，指定是否开启触摸，默认值为true。*/
                get: function () {
                    return this._touchScrollEnable;
                },
                set: function (value) {
                    this._touchScrollEnable = value;
                    this.target = this._target;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WScrollBar.prototype, "mouseWheelEnable", {
                /** 一个布尔值，指定是否滑轮滚动，默认值为true。*/
                get: function () {
                    return this._mouseWheelEnable;
                },
                set: function (value) {
                    this._mouseWheelEnable = value;
                },
                enumerable: true,
                configurable: true
            });
            /**@private */
            WScrollBar.prototype.onTargetMouseWheel = function (e) {
                this.value -= e.delta * this._scrollSize;
                this.target = this._target;
            };
            /**@private */
            WScrollBar.prototype.onTargetMouseDown = function (e) {
                this._clickOnly = true;
                this._lastOffset = 0;
                this._checkElastic = false;
                if (!this._lastPoint) {
                    this._lastPoint = new Point();
                }
                this._lastPoint.setTo(Laya.stage.mouseX, Laya.stage.mouseY);
                Laya.timer.clear(this, this.tweenMove);
                Tween.clearTween(this);
                Laya.stage.once(Event.MOUSE_UP, this, this.onStageMouseUp2);
                Laya.stage.once(Event.MOUSE_OUT, this, this.onStageMouseUp2);
                Laya.timer.frameLoop(1, this, this.loop);
            };
            /**@private */
            WScrollBar.prototype.loop = function () {
                var mouseY = Laya.stage.mouseY;
                var mouseX = Laya.stage.mouseX;
                this._lastOffset = this.isVertical ? (mouseY - this._lastPoint.y) : (mouseX - this._lastPoint.x);
                if (this._clickOnly) {
                    if (Math.abs(this._lastOffset * (this.isVertical ? Laya.stage._canvasTransform.getScaleY() : Laya.stage._canvasTransform.getScaleX())) > 1) {
                        this._clickOnly = false;
                        if (!this._offsets) {
                            this._offsets = [];
                        }
                        this._offsets.length = 0;
                        this._target.mouseEnabled = false;
                        if (!this.hide && this.autoHide) {
                            this.alpha = 1;
                            this.visible = true;
                        }
                        this.event(Event.START);
                    }
                    else {
                        return;
                    }
                }
                this._offsets.push(this._lastOffset);
                this._lastPoint.x = mouseX;
                this._lastPoint.y = mouseY;
                if (this._lastOffset === 0) {
                    return;
                }
                if (!this._checkElastic) {
                    if (this.elasticDistance > 0) {
                        if (!this._checkElastic && this._lastOffset !== 0) {
                            this._checkElastic = true;
                            if ((this._lastOffset > 0 && this._value <= this.min) || (this._lastOffset < 0 && this._value >= this.max)) {
                                this._isElastic = true;
                            }
                            else {
                                this._isElastic = false;
                            }
                        }
                    }
                    else {
                        this._checkElastic = true;
                    }
                }
                if (this._checkElastic) {
                    if (this._isElastic) {
                        if (this._value <= this.min) {
                            this.value -= this._lastOffset * Math.max(0, (1 - ((this.min - this._value) / this.elasticDistance)));
                        }
                        else if (this._value >= this.max) {
                            this.value -= this._lastOffset * Math.max(0, (1 - ((this._value - this.max) / this.elasticDistance)));
                        }
                    }
                    else {
                        this.value -= this._lastOffset;
                    }
                }
            };
            /**@private */
            WScrollBar.prototype.onStageMouseUp2 = function (e) {
                Laya.stage.off(Event.MOUSE_UP, this, this.onStageMouseUp2);
                Laya.stage.off(Event.MOUSE_OUT, this, this.onStageMouseUp2);
                Laya.timer.clear(this, this.loop);
                if (this._clickOnly) {
                    return;
                }
                this._target.mouseEnabled = true;
                if (this._isElastic) {
                    if (this._value < this.min) {
                        Tween.to(this, { value: this.min }, this.elasticBackTime, Ease.sineOut, Handler.create(this, this.elasticOver));
                        if (Math.abs(this.min - this._value) >= this.elasticDistance * 9 / 10) {
                            this.onPullToRefresh();
                            this.isLoading = true;
                        }
                    }
                    else if (this._value > this.max) {
                        Tween.to(this, { value: this.max }, this.elasticBackTime, Ease.sineOut, Handler.create(this, this.elasticOver));
                        if (Math.abs(this._value - this.max) >= this.elasticDistance * 4 / 5) {
                            this.onPullUpToLoadMore();
                            this.isLoading = true;
                        }
                    }
                }
                else {
                    //计算平均值
                    if (this._offsets.length < 1) {
                        this._offsets[0] = this.isVertical ? Laya.stage.mouseY - this._lastPoint.y : Laya.stage.mouseX - this._lastPoint.x;
                    }
                    var offset = 0;
                    var n = Math.min(this._offsets.length, 3);
                    for (var i = 0; i < n; i++) {
                        offset += this._offsets[this._offsets.length - 1 - i];
                    }
                    this._lastOffset = offset / n;
                    offset = Math.abs(this._lastOffset);
                    if (offset < 2) {
                        this.event(Event.END);
                        return;
                    }
                    if (offset > 60) {
                        this._lastOffset = this._lastOffset > 0 ? 60 : -60;
                    }
                    Laya.timer.frameLoop(1, this, this.tweenMove);
                }
            };
            /**@private */
            WScrollBar.prototype.elasticOver = function () {
                this._isElastic = false;
                this.isLoading = false;
                if (!this.hide && this.autoHide) {
                    Tween.to(this, { alpha: 0 }, 500);
                }
                this.event(Event.END);
            };
            /**@private */
            WScrollBar.prototype.tweenMove = function () {
                this._lastOffset *= this.rollRatio;
                this.value -= this._lastOffset;
                if (Math.abs(this._lastOffset) < 1 || this.value === this.max || this.value === this.min) {
                    Laya.timer.clear(this, this.tweenMove);
                    this.event(Event.END);
                    if (!this.hide && this.autoHide) {
                        Tween.to(this, { alpha: 0 }, 500);
                    }
                }
            };
            /**
             * 停止滑动。
             */
            WScrollBar.prototype.stopScroll = function () {
                this.onStageMouseUp2(null);
                Laya.timer.clear(this, this.tweenMove);
                Tween.clearTween(this);
            };
            WScrollBar.prototype.setOnPullListener = function (onPullListener) {
                this.onPullListener = onPullListener;
            };
            WScrollBar.prototype.onPullToRefresh = function () {
                if (this.isLoading) {
                    return;
                }
                if (this.onPullListener) {
                    this.onPullListener.onPullToRefresh();
                }
            };
            WScrollBar.prototype.onPullUpToLoadMore = function () {
                if (this.isLoading) {
                    return;
                }
                if (this.onPullListener) {
                    this.onPullListener.onPullUpToLoadMore();
                }
            };
            return WScrollBar;
        }(Laya.Component));
        HoldemPoker.WScrollBar = WScrollBar;
    })(HoldemPoker = wesai.HoldemPoker || (wesai.HoldemPoker = {}));
})(wesai || (wesai = {}));
//# sourceMappingURL=WScrollBar.js.map