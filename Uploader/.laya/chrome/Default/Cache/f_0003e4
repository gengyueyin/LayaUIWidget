/*
 * @Author: aileLiu
 * @Date: 2017-03-27 19:34:23
 * @Last Modified by: aileLiu
 * @Last Modified time: 2017-11-17 17:17:50
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var wesai;
(function (wesai) {
    var HoldemPoker;
    (function (HoldemPoker) {
        /**
         * 倒计时类型
         */
        var countDownHandlerType;
        (function (countDownHandlerType) {
            countDownHandlerType[countDownHandlerType["startRace"] = 1] = "startRace";
            countDownHandlerType[countDownHandlerType["upBlinds"] = 2] = "upBlinds";
        })(countDownHandlerType = HoldemPoker.countDownHandlerType || (HoldemPoker.countDownHandlerType = {}));
        /**
         * 检查报名费用跳转类型
         * { 1正常报名, 2复活报名 }
         */
        var applyCheckType;
        (function (applyCheckType) {
            applyCheckType[applyCheckType["apply"] = 1] = "apply";
            applyCheckType[applyCheckType["agianMatch"] = 2] = "agianMatch";
        })(applyCheckType = HoldemPoker.applyCheckType || (HoldemPoker.applyCheckType = {}));
        /**
         * 报名按钮状态
         * { 1报名, 2取消报名, 3进入赛场, 4延时报名, 5围观, 6复活参赛, 7已申请, 8报名人数已满, 9比赛中 }
         */
        var signUpBtnStatusType;
        (function (signUpBtnStatusType) {
            signUpBtnStatusType[signUpBtnStatusType["signUp"] = 1] = "signUp";
            signUpBtnStatusType[signUpBtnStatusType["cancelSignUp"] = 2] = "cancelSignUp";
            signUpBtnStatusType[signUpBtnStatusType["intoMatch"] = 3] = "intoMatch";
            signUpBtnStatusType[signUpBtnStatusType["delayedSignUp"] = 4] = "delayedSignUp";
            signUpBtnStatusType[signUpBtnStatusType["watchMatch"] = 5] = "watchMatch";
            signUpBtnStatusType[signUpBtnStatusType["againMatch"] = 6] = "againMatch";
            signUpBtnStatusType[signUpBtnStatusType["applying"] = 7] = "applying";
            signUpBtnStatusType[signUpBtnStatusType["applyEnd"] = 8] = "applyEnd";
            signUpBtnStatusType[signUpBtnStatusType["macthing"] = 9] = "macthing";
        })(signUpBtnStatusType = HoldemPoker.signUpBtnStatusType || (HoldemPoker.signUpBtnStatusType = {}));
        /**
         * 盲注表展示类型
         */
        var blindsTableViewType;
        (function (blindsTableViewType) {
            blindsTableViewType[blindsTableViewType["open"] = 1] = "open";
            blindsTableViewType[blindsTableViewType["close"] = 2] = "close";
        })(blindsTableViewType = HoldemPoker.blindsTableViewType || (HoldemPoker.blindsTableViewType = {}));
        /**
         * 渲染界面展示类型
         */
        var renderViewType;
        (function (renderViewType) {
            renderViewType[renderViewType["init"] = 1] = "init";
            renderViewType[renderViewType["update"] = 2] = "update";
        })(renderViewType = HoldemPoker.renderViewType || (HoldemPoker.renderViewType = {}));
        /**
         * 渲染界面展示类型
         */
        var tabViewType;
        (function (tabViewType) {
            tabViewType[tabViewType["status"] = 0] = "status";
            tabViewType[tabViewType["award"] = 1] = "award";
            tabViewType[tabViewType["players"] = 2] = "players";
            tabViewType[tabViewType["tablePoker"] = 3] = "tablePoker";
        })(tabViewType = HoldemPoker.tabViewType || (HoldemPoker.tabViewType = {}));
        var DetailsUI = /** @class */ (function (_super) {
            __extends(DetailsUI, _super);
            function DetailsUI() {
                var _this = _super.call(this) || this;
                /**
                 * 计时数量
                 * { N1: 开赛倒计时, N2: 升盲倒计时, N3: 开赛计时 }
                 */
                _this.TimerNum = {
                    "N1": 0,
                    "N2": 0,
                    "N3": 0
                };
                _this.onLanguageChanged();
                _this.Initalize();
                return _this;
            }
            DetailsUI.prototype.Initalize = function () {
                this.visible = false;
                this.viewPosX = this.x;
                this.OpenView();
                //门票
                if (!this.entryFeeUI) {
                    this.entryFeeUI = new HoldemPoker.EntryFeeUI(true, {
                        color: '#eeeeee',
                        fontSize: 26,
                        iconSize: [34, 34],
                        lineHeight: 30,
                        align: 'center'
                    });
                    this.topBox.addChild(this.entryFeeUI);
                }
                this.renderMainView(renderViewType.init);
                this.setSngOrMtt();
                this.RegisterUIEvent();
                this.applyFeeNum = 0; // 设置报名费默认值0
                // Tab
                var navIndex = 0;
                this.nav.selectedIndex = navIndex;
                this.navView.selectedIndex = navIndex;
                this.viewIndex = navIndex;
                // this.nav.labels = Sys.localization.get(stringtable.detailsTabText);
                this.nav.selectHandler = new Laya.Handler(this, this.onTabSelect);
                // 定时刷新数据
                this.timerTimes = 30; // 单位：秒（定时更新详情数据, 默认数值）
                Laya.timer.loop(this.timerTimes * 1000, this, this.updateMainInfo);
            };
            DetailsUI.prototype.setSngOrMtt = function () {
                if (HoldemPoker.MatchListMgr.detailsData.raceType === HoldemPoker.RoomType.GameSng) {
                    this.tabItem3.visible = false;
                    this.nav.space = 90;
                    this.startRaceTime.text = "";
                    this.startRaceTimeText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.applyCost);
                    this.countTime.text = "坐满即开";
                    this.applyPeopleNum.text = "";
                    this.endSignUpBlind.text = "" + HoldemPoker.MatchListMgr.detailsData.maxTableCount;
                    this.endSignUpBlindText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.peopleNumLimit);
                    this.applyPeopleNumText.text = "";
                    this.applyFeeText.text = "";
                    this.raceTableNum.text = "1";
                    this.box010.visible = false;
                    this.box011.visible = false;
                    this.box012.visible = false;
                    if (HoldemPoker.MatchListMgr.roomData && !HoldemPoker.MatchListMgr.roomData.isStarted) {
                        this.countTimeText.visible = false;
                    }
                    this.tableNPlayerTitle.visible = false;
                    var baseH = this.box02.y + this.box02.height;
                    this.blindsTableBtn.y = baseH + 100;
                    this.box04.y = baseH + 100;
                    this.box06.y = baseH + 100;
                    baseH = this.box06.y + this.box06.height;
                    this.box07.y = baseH + 100;
                    this.box08.y = baseH + 100;
                    this.box09.y = baseH + 100;
                }
            };
            // 渲染主界面
            DetailsUI.prototype.renderMainView = function (type) {
                if (type === renderViewType.init) {
                    // 更新按钮状态
                    this.updateBtnStatus(HoldemPoker.MatchListMgr.roomData.signUpStatus, HoldemPoker.MatchListMgr.roomData.isStarted);
                    // 渲染page（文字）
                    this.HeaderText.text = HoldemPoker.Utility.abbrString(HoldemPoker.MatchListMgr.detailsData.raceName, 20);
                    this.applyFeeText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.applyCost);
                    if (HoldemPoker.Utility.isShare()) {
                        this.shareNumText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.clickShare);
                    }
                    else {
                        this.shareNumText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.shareNum);
                    }
                    this.applyPeopleNumText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.peopleNumLimit); //Sys.localization.get(stringtable.applyPeopleNum);
                    this.endSignUpBlindText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.endSignUpLevel);
                    this.startRaceTimeText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.startRaceTime);
                    this.startStackText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.startStack);
                    //门票
                    this.entryFeeUI.renderData(HoldemPoker.MatchListMgr.detailsData.signUpCost, HoldemPoker.MatchListMgr.detailsData.signUpType, HoldemPoker.MatchListMgr.detailsData.signUpFeePercent);
                    if (HoldemPoker.MatchListMgr.detailsData.raceType === HoldemPoker.RoomType.GameSng) {
                        this.entryFeeUI.x = (HoldemPoker.Sys.width - this.entryFeeUI.width) / 2;
                        var costArr = HoldemPoker.MatchListMgr.detailsData.signUpCost.split(',');
                        if (costArr.length > 1) {
                            this.entryFeeUI.y = 370;
                        }
                        else {
                            this.entryFeeUI.y = 410;
                        }
                    }
                    else {
                        this.entryFeeUI.x = (280 - this.entryFeeUI.width) / 2;
                        var costArr = HoldemPoker.MatchListMgr.detailsData.signUpCost.split(',');
                        if (costArr.length > 1) {
                            this.entryFeeUI.y = 202;
                        }
                        else {
                            this.entryFeeUI.y = 235;
                        }
                    }
                    this.shareNum.text = String(HoldemPoker.MatchListMgr.detailsData.incode);
                    this.applyPeopleNum.text = HoldemPoker.MatchListMgr.detailsData.minRaceCount + '-' + HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.detailsData.maxRaceCount); // 参赛人数改为：报名人数限制（策划确认 170515）
                    this.endSignUpBlind.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.Th) + HoldemPoker.MatchListMgr.detailsData.endSignupBlind + HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.blindsLevel);
                    var wDate = new HoldemPoker.WeDate(String(HoldemPoker.MatchListMgr.detailsData.startTime));
                    this.startRaceTime.text = wDate.format('m-d H:i');
                    this.startStack.text = String(HoldemPoker.MatchListMgr.detailsData.startStack);
                    if (HoldemPoker.MatchListMgr.detailsData.rebuyNum === 0) {
                        this.reNum.text = (HoldemPoker.MatchListMgr.detailsData.reentryNum).toString();
                        this.reNumText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.reEntryCount);
                    }
                    if (HoldemPoker.MatchListMgr.detailsData.reentryNum === 0) {
                        this.reNum.text = (HoldemPoker.MatchListMgr.detailsData.rebuyNum).toString();
                        this.reNumText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.rebuyCount);
                    }
                    this.rEndBlind.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.Th) + HoldemPoker.MatchListMgr.detailsData.rEndBlind + HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.blindsLevel);
                    this.addonNum.text = (HoldemPoker.MatchListMgr.detailsData.addonNum).toString();
                    this.averageStackText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.averageStack);
                    this.maxStackText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.maxStack);
                    this.minStackText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.minStack);
                    this.raceTableNumText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.raceTableNum);
                    this.rEndBlindText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.rebuyOrReEntryOverLevel);
                    this.addonNumText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.rebuyCount);
                    // 开赛前后差异显示
                    if (HoldemPoker.MatchListMgr.roomData && !HoldemPoker.MatchListMgr.roomData.isStarted) {
                        this.countTimeText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.raceCountTimeD);
                        this.changeTimeBoxText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.upBlindsTime);
                        this.changeTimeBox.text = HoldemPoker.Utility.toStandardTimePattern(HoldemPoker.MatchListMgr.detailsData.upBlind);
                        this.canSignupNumText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.applyPeopleCount);
                        this.mainLevel.text = HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel - 1].smallBlind) + '/' + HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel - 1].bigBlind) + '[' + HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel - 1].anteNum) + ']';
                        this.nextLevel.text = HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel].smallBlind) + '/' + HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel].bigBlind) + '[' + HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel].anteNum) + ']';
                        this.mainLevelText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.mainLevel) + (HoldemPoker.MatchListMgr.detailsData.curBlindLevel);
                        this.nextLevelText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.nextBlindsLevel) + (HoldemPoker.MatchListMgr.detailsData.curBlindLevel + 1);
                        this.TimerNum.N1 = HoldemPoker.MatchListMgr.detailsData.startRestTime;
                        if (this.TimerNum.N1 > 0) {
                            Laya.timer.loop(1000, this, this.countDownHandler, [this.countTime, countDownHandlerType.startRace]);
                        }
                        else {
                            this.countTime.text = '--:--:--';
                        }
                    }
                }
                // 状态
                this.averageStack.text = String(HoldemPoker.MatchListMgr.detailsData.avgChips);
                this.maxStack.text = String(HoldemPoker.MatchListMgr.detailsData.maxChips);
                this.minStack.text = String(HoldemPoker.MatchListMgr.detailsData.minChips);
                // 开赛前后差异显示
                if (HoldemPoker.MatchListMgr.roomData && !HoldemPoker.MatchListMgr.roomData.isStarted) {
                    this.raceTableNum.text = Math.ceil(HoldemPoker.MatchListMgr.detailsData.playersNum / HoldemPoker.MatchListMgr.detailsData.maxTableCount).toString();
                    this.canSignupNum.text = HoldemPoker.MatchListMgr.detailsData.playersNum.toString();
                }
                else {
                    this.TimerNum.N2 = HoldemPoker.MatchListMgr.detailsData.curBlindRestTime;
                    if (this.TimerNum.N2 > 0) {
                        Laya.timer.clear(this, this.countDownHandler);
                        // console.log('1--------------------------------');
                        Laya.timer.loop(1000, this, this.countDownHandler, [this.countTime, countDownHandlerType.upBlinds]);
                    }
                    else {
                        this.countTime.text = '--:--:--';
                    }
                    this.countTimeText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.mainCountTime);
                    this.TimerNum.N3 = HoldemPoker.MatchListMgr.detailsData.processTime;
                    if (this.TimerNum.N3 >= 0) {
                        Laya.timer.clear(this, this.countUpHandler);
                        Laya.timer.loop(1000, this, this.countUpHandler, [this.changeTimeBox]);
                    }
                    else {
                        this.changeTimeBox.text = '--:--:--';
                    }
                    this.changeTimeBoxText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.raceCountTime);
                    this.canSignupNum.text = HoldemPoker.MatchListMgr.detailsData.restPlayerNum.toString(); // 剩余人数改为：比赛实际人数／报名人数（策划确认 170515）MatchListMgr.detailsData.restPlayerNum + '/' + MatchListMgr.detailsData.playersNum;
                    this.canSignupNumText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.RemainPlayCount);
                    this.raceTableNum.text = HoldemPoker.MatchListMgr.detailsData.curTableNum.toString();
                    // 根据拉取的盲注表计算
                    var cbLevel = HoldemPoker.MatchListMgr.detailsData.curBlindLevel;
                    if (cbLevel > 1 && cbLevel <= HoldemPoker.MatchListMgr.blindsData.blinds.length) {
                        // if (MatchListMgr.detailsData.curBlindRestTime !== 0) {
                        this.mainLevel.text = HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel - 1].smallBlind) + '/' + HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel - 1].bigBlind) + '[' + HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel - 1].anteNum) + ']';
                        this.mainLevelText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.mainBlindsLevel) + (HoldemPoker.MatchListMgr.detailsData.curBlindLevel);
                        // } else {
                        //     this.mainLevel.text = '--/--/--';
                        //     this.mainLevelText.text = Sys.localization.get(stringtable.mainBlindsLevel);
                        // }
                        if (cbLevel !== HoldemPoker.MatchListMgr.blindsData.blinds.length) {
                            this.nextLevel.text = HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel].smallBlind) + '/' + HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel].bigBlind) + '[' + HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel].anteNum) + ']';
                            this.nextLevelText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.nextBlindsLevel) + (HoldemPoker.MatchListMgr.detailsData.curBlindLevel + 1);
                        }
                        else {
                            this.nextLevel.text = '--/--/--';
                            this.nextLevelText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.nextBlindsLevel);
                        }
                    }
                    else {
                        this.mainLevel.text = HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel - 1].smallBlind) + '/' + HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel - 1].bigBlind) + '[' + HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel - 1].anteNum) + ']';
                        this.nextLevel.text = HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel].smallBlind) + '/' + HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel].bigBlind) + '[' + HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.blindsData.blinds[HoldemPoker.MatchListMgr.detailsData.curBlindLevel].anteNum) + ']';
                        this.mainLevelText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.mainLevel) + (HoldemPoker.MatchListMgr.detailsData.curBlindLevel);
                        this.nextLevelText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.nextBlindsLevel) + (HoldemPoker.MatchListMgr.detailsData.curBlindLevel + 1);
                    }
                }
            };
            // 渲染 奖励TabView
            DetailsUI.prototype.renderAwardTabView = function (type) {
                if (HoldemPoker.MatchListMgr.tabData.award.bonusInfo && HoldemPoker.MatchListMgr.tabData.award.bonusInfo.length > 0) {
                    if (type === renderViewType.init) {
                        this.awardPlayerNumText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.awardPlayerNum);
                        this.rankTitle.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.rankTitle);
                        this.awardTitle.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.awardTitle);
                        this.renderList(this.awardListView, HoldemPoker.DetailsAwardListItemUI, HoldemPoker.MatchListMgr.tabData.award.bonusInfo);
                    }
                    if (type === renderViewType.update) {
                        this.awardListView.array = HoldemPoker.MatchListMgr.tabData.award.bonusInfo;
                        this.awardListView.refresh();
                    }
                    this.awardPlayerNum.text = HoldemPoker.MatchListMgr.tabData.award.rewardPlayerNum + '人';
                    // 浮动奖励
                    if (HoldemPoker.MatchListMgr.tabData.award.awardType === HoldemPoker.TableAwardType.FloatAward) {
                        var itemTemplate = HoldemPoker.Sys.itemMgr.itemRepository.findItemTemplateById(HoldemPoker.MatchListMgr.tabData.award.floatRewardItemId);
                        this.awardAll.text = (itemTemplate ? itemTemplate.name : '') + HoldemPoker.Utility.toNumberPattern(HoldemPoker.MatchListMgr.tabData.award.totalBonus);
                        this.awardAllText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.awardAll);
                        this.jackpotBox.visible = true;
                        this.awardPercentTitle.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.awardPercentTitle);
                        this.awardPercentTitle.visible = true;
                    }
                    // 固定＋浮动奖励
                    if (HoldemPoker.MatchListMgr.tabData.award.awardType === HoldemPoker.TableAwardType.MixedAward) {
                        this.awardAll.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.guaranteedPrizePool);
                        this.jackpotBox.visible = true;
                        this.awardPercentTitle.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.awardPercentTitle);
                        this.awardPercentTitle.visible = true;
                    }
                }
            };
            // 渲染 玩家TabView
            DetailsUI.prototype.renderPlayersTabView = function (type) {
                var list = HoldemPoker.MatchListMgr.tabData.players.rankPlayer;
                this.playersNum.text = HoldemPoker.MatchListMgr.tabData.players.restPlayerNum + '/' + HoldemPoker.MatchListMgr.tabData.players.playersNum; // 玩家人数为：比赛实际人数／报名人数（策划确认 170515）
                if (type === renderViewType.init) {
                    this.playersNumText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.playersNum);
                    this.playersSearch.prompt = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.nikenameOrId); //Sys.localization.get(stringtable.playersSearch);
                    this.symbolTitle.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.nickName);
                    this.tableNPlayerTitle.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.tableNum);
                    this.stackTitle.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.stack);
                    this.BBsTitle.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.currentRank); // BBs更新为排名
                    this.renderList(this.playersListView, HoldemPoker.DetailsPlayersListItemUI, list);
                }
                if (type === renderViewType.update) {
                    this.playersListView.array = list;
                    this.playersListView.refresh();
                }
            };
            // 渲染 牌桌TabView
            DetailsUI.prototype.renderPokerTableTabView = function (type) {
                var list = HoldemPoker.MatchListMgr.tabData.pokerTable.raceMttTable;
                this.singleTablePlayerNum.text = String(HoldemPoker.MatchListMgr.detailsData.maxTableCount);
                if (type === renderViewType.init) {
                    this.singleTablePlayerNumText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.singleTablePlayerNum);
                    this.tableNTitle.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.tableNum);
                    this.playersTitle.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.peoples);
                    this.tableStackTitle.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.stackMinMax);
                    this.renderList(this.pokerTableListView, HoldemPoker.DetailsAwardListItemUI, list);
                }
                if (type === renderViewType.update) {
                    this.pokerTableListView.array = list;
                    this.pokerTableListView.refresh();
                }
            };
            DetailsUI.prototype.RegisterUIEvent = function () {
                var _this = this;
                this.returnBtn.on(Laya.Event.CLICK, this, function () {
                    _this.onExit();
                });
                // this.managerBtn.on(Laya.Event.CLICK, this, this.onManager);
                this.submitBtn.on(Laya.Event.CLICK, this, this.onSubmitRequest);
                this.blindsTableBtn.on(Laya.Event.CLICK, this, this.onBlindsTableView, [blindsTableViewType.open]);
                this.closeBlindsBoxBtn.on(Laya.Event.CLICK, this, this.onBlindsTableView, [blindsTableViewType.close]);
                // this.playersSearchBtn.on(Laya.Event.CLICK, this, this.onSearch);
                this.playersSearch.on(Laya.Event.INPUT, this, this.onSearch); // 搜索关联input
                HoldemPoker.Sys.event.on(HoldemPoker.GEvent.WX_PAY_SUCCESS, this, this.onWXPaySuccess);
                this.btnShareRoom.on(Laya.Event.CLICK, this, this.doShareRoom);
            };
            DetailsUI.prototype.doShareRoom = function () {
                if (HoldemPoker.Utility.isShare()) {
                    var shareData = new HoldemPoker.ShareData();
                    // "https://asbqvk.mlinks.cc/AcqR?num="
                    var url = void 0; // = "http://172.16.129.76:5000/pokerSkip.html?redirect=1&pokerJumpStr=";
                    if (HoldemPoker.NativeModule.isIos()) {
                        url = "http://poker.an.gamer300.com/pokerSkip/pokerSkip.html?redirect=1&pokerJumpStr=";
                    }
                    else {
                        url = "https://asbqvk.mlinks.cc/AcqR?num=";
                    }
                    shareData.link = url + String(HoldemPoker.MatchListMgr.detailsData.incode);
                    shareData.description = HoldemPoker.Sys.players.self.name + "邀请您加入:" + HoldemPoker.MatchListMgr.roomData.roomName;
                    shareData.title = "微赛德州扑克";
                    shareData.type = "link";
                    var imgShare = new HoldemPoker.ImgShare(shareData);
                    imgShare.setFriendCircleEnable(false);
                    Laya.stage.addChild(imgShare);
                    imgShare.startAni();
                }
            };
            /**
             * 更新倒计时状态
             */
            DetailsUI.prototype.countDownHandler = function (obj, type) {
                var _this = this;
                // console.log('0------------------');
                if (type === countDownHandlerType.startRace) {
                    if (this.TimerNum.N1 <= 0) {
                        obj.text = '--:--:--';
                        Laya.timer.clear(this, this.countDownHandler);
                        Laya.timer.clear(this, this.updateMainInfo);
                        console.log('清除此页面的30s定时器');
                        // Laya.timer.clearAll(this); // 清除此页面的定时器
                        // 倒计时完及时更新按钮状态
                        if (HoldemPoker.MatchListMgr.roomData) {
                            HoldemPoker.MatchListMgr.roomData.isStarted = true;
                            this.updateBtnStatus(HoldemPoker.MatchListMgr.roomData.signUpStatus, HoldemPoker.MatchListMgr.roomData.isStarted);
                        }
                        // 倒计时为0时，延时10秒后拉取更新升盲时间等数据
                        Laya.timer.once(10000, this, function () {
                            console.log('清除此页面的30s定时器------10s');
                            _this.updateMainInfo();
                            // 再次加载定时刷新数据
                            Laya.timer.loop(_this.timerTimes * 1000, _this, _this.updateMainInfo);
                        });
                    }
                    else {
                        this.TimerNum.N1--;
                        obj.text = HoldemPoker.Utility.toStandardTimePattern(this.TimerNum.N1).toString();
                    }
                }
                if (type === countDownHandlerType.upBlinds) {
                    if (this.TimerNum.N2 <= 0) {
                        obj.text = '--:--:--';
                        Laya.timer.clear(this, this.countDownHandler);
                        // 倒计时为0时，更新详情状态
                        this.updateMainInfo();
                    }
                    else {
                        this.TimerNum.N2--;
                        obj.text = String(HoldemPoker.Utility.toStandardTimePattern(this.TimerNum.N2));
                    }
                }
            };
            /**
             * 更新计时状态
             */
            DetailsUI.prototype.countUpHandler = function (obj) {
                if (this.TimerNum.N3 < 0 || this.TimerNum.N3 > 359999) {
                    obj.text = '--:--:--';
                    Laya.timer.clear(this, this.countUpHandler);
                }
                else {
                    this.TimerNum.N3++;
                    obj.text = String(HoldemPoker.Utility.toStandardTimePattern(this.TimerNum.N3));
                }
            };
            /**
             * 退出界面
             */
            DetailsUI.prototype.onExit = function () {
                this.closeView(); // 关闭View
                this.Dispose(); // 销毁View关联事件
                HoldemPoker.Sys.ui.remove(this);
                HoldemPoker.ToolTipUI.closeToolTip(); // 关闭多个奖励提示
            };
            DetailsUI.prototype.OpenView = function () {
                this.visible = true;
                this.x = this.viewPosX;
                HoldemPoker.UIAnimator.Start(HoldemPoker.UIAnimator.asyncFloatRight, this, { duration: 500, ease: Laya.Ease.cubicOut });
            };
            DetailsUI.prototype.closeView = function () {
                var _this = this;
                this.x = 0;
                HoldemPoker.UIAnimator.Start(HoldemPoker.UIAnimator.asyncFloatLeft, this, { duration: 500, ease: null }, Laya.Handler.create(this, function () {
                    _this.visible = false;
                    HoldemPoker.Sys.ui.remove(_this); // 移除Node //Sys.ui.pop();
                    HoldemPoker.Sys.matchList.clearDate();
                }));
            };
            /**
             * 更新比赛详情按钮状态
             */
            DetailsUI.prototype.updateBtnStatus = function (statusType, raceStatus) {
                if (statusType === HoldemPoker.msg.SignUpStatus.CanSignUp) {
                    this.submitBtn.disabled = false;
                    if (raceStatus === false) {
                        // this.submitText.text = Sys.localization.get(stringtable.apply);
                        this.submitBtn.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.apply);
                        this.btnStatus = signUpBtnStatusType.signUp;
                    }
                    else {
                        this.submitBtn.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.detailsApply);
                        this.btnStatus = signUpBtnStatusType.delayedSignUp;
                    }
                }
                if (statusType === HoldemPoker.msg.SignUpStatus.AlreadySignUp) {
                    if (raceStatus === false && HoldemPoker.MatchListMgr.detailsData.raceType === HoldemPoker.RoomType.GameMtt) {
                        this.submitBtn.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.cancelSignUp);
                        this.btnStatus = signUpBtnStatusType.cancelSignUp;
                    }
                    else {
                        this.submitBtn.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.intoMatch);
                        this.btnStatus = signUpBtnStatusType.intoMatch;
                    }
                }
                if (statusType === HoldemPoker.msg.SignUpStatus.NotSignUp) {
                    this.submitBtn.disabled = false;
                    if (HoldemPoker.MatchListMgr.detailsData.raceType === HoldemPoker.RoomType.GameSng) {
                        if (HoldemPoker.MatchListMgr.roomData.playerCount === HoldemPoker.MatchListMgr.roomData.playerCountLimit || raceStatus) {
                            this.submitBtn.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.onlook); //Sys.localization.get(stringtable.watchPlayer);
                            this.btnStatus = signUpBtnStatusType.watchMatch;
                        }
                    }
                    else {
                        if (raceStatus === false) {
                            this.submitBtn.disabled = true;
                            this.submitBtn.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.applyPeopleFull);
                            this.btnStatus = signUpBtnStatusType.applyEnd;
                        }
                        else {
                            this.submitBtn.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.onlook); //Sys.localization.get(stringtable.watchPlayer);
                            this.btnStatus = signUpBtnStatusType.watchMatch;
                        }
                    }
                }
                if (statusType === HoldemPoker.msg.SignUpStatus.AgainMatch) {
                    this.submitBtn.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.entryMatchAgain);
                    this.btnStatus = signUpBtnStatusType.againMatch;
                }
            };
            /**
             *  盲注表展示
             */
            DetailsUI.prototype.onBlindsTableView = function (type) {
                if (type === blindsTableViewType.open) {
                    this.renderList(this.listView, HoldemPoker.CreateMatchBListItemUI, HoldemPoker.MatchListMgr.blindsData.blinds); // 暂时测试aileen 数据源：MatchListMgr.blindsData.blinds
                    this.blindsBox.visible = true;
                }
                if (type === blindsTableViewType.close) {
                    this.blindsBox.visible = false;
                }
            };
            /**
             *  渲染列表
             */
            DetailsUI.prototype.renderList = function (obj, itemUI, data) {
                obj.itemRender = itemUI;
                obj.vScrollBarSkin = "";
                obj.selectEnable = true;
                // obj.page = 1;
                if (obj === this.playersListView) {
                    // obj.mouseHandler = new Laya.Handler(this, this.onMouse);
                    obj.selectHandler = new Laya.Handler(this, this.onSelect);
                }
                if (obj === this.pokerTableListView) {
                    // obj.mouseHandler = new Laya.Handler(this, this.onMouse);
                    obj.selectHandler = new Laya.Handler(this, this.onSelectTable);
                }
                obj.renderHandler = new Laya.Handler(this, this.updateItem);
                obj.array = data;
                obj.refresh();
            };
            DetailsUI.prototype.updateItem = function (cell, index) {
                cell.setupData(cell.dataSource, index);
            };
            /**
             * 玩家列表点击事件
             * @param index
             */
            DetailsUI.prototype.onSelect = function (index) {
                // console.log("当前选择的索引：" + index);
                if (HoldemPoker.MatchListMgr.roomData && HoldemPoker.MatchListMgr.roomData.isStarted && HoldemPoker.MatchListMgr.roomData.roomType != HoldemPoker.RoomType.GameSng) {
                    var playerlist = HoldemPoker.MatchListMgr.tabData.players.rankPlayer;
                    if (playerlist[index].curGameId !== 0) {
                        this.getMTTGameId(playerlist[index].playerId);
                        // RoomControl.lookOn(1, index);
                    }
                    else {
                        HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.playerOutTip));
                    }
                }
            };
            /**
             * 牌桌列表点击事件
             * @param index
             */
            DetailsUI.prototype.onSelectTable = function (index) {
                // console.log("当前选择的索引：" + index);
                var g1 = HoldemPoker.MatchListMgr.tabData.pokerTable;
                if (g1 && HoldemPoker.MatchListMgr.roomData.roomType != HoldemPoker.RoomType.GameSng) {
                    var gamelist = g1.raceMttTable;
                    // RoomControl.lookOn(2, 0, gamelist[index].tableId);
                    HoldemPoker.MatchListMgr.lookOnType = 2;
                    HoldemPoker.MatchListMgr.lookOnGameId = gamelist[index].tableId;
                    HoldemPoker.MatchListMgr.lookOnPlayerId = 0;
                    HoldemPoker.MatchListMgr.isLookOn = true;
                    HoldemPoker.Sys.fsm.Go(HoldemPoker.GameState.InGameState);
                }
            };
            DetailsUI.prototype.getMTTGameId = function (playerId) {
                var roomInfo = HoldemPoker.MatchListMgr.roomData;
                var data = { roomId: roomInfo.id, playerId: playerId };
                HoldemPoker.Sys.net.sendMesage("RaceMTTGameIdRequest", data, Laya.Handler.create(this, function (data) {
                    // RoomControl.lookOn(1, playerId, data.gameId);
                    HoldemPoker.MatchListMgr.lookOnType = 1;
                    HoldemPoker.MatchListMgr.lookOnGameId = data.gameId;
                    HoldemPoker.MatchListMgr.lookOnPlayerId = playerId;
                    HoldemPoker.MatchListMgr.isLookOn = true;
                    HoldemPoker.Sys.fsm.Go(HoldemPoker.GameState.InGameState);
                }), Laya.Handler.create(this, function () {
                }));
            };
            /**
             * 搜索玩家
             */
            DetailsUI.prototype.onSearch = function () {
                var agr = this.playersSearch.text;
                if (agr) {
                    var infoArr = HoldemPoker.Sys.matchList.onSearchPlayer(agr);
                    if (infoArr.length) {
                        this.playersListView.array = infoArr;
                    }
                }
            };
            DetailsUI.prototype.UnregisterUIEvent = function () {
                this.returnBtn.offAll();
                this.managerBtn.off(Laya.Event.CLICK, this, this.onManager);
                this.submitBtn.off(Laya.Event.CLICK, this, this.onSubmitRequest);
                this.blindsTableBtn.off(Laya.Event.CLICK, this, this.onBlindsTableView);
                this.closeBlindsBoxBtn.off(Laya.Event.CLICK, this, this.onBlindsTableView);
                HoldemPoker.Sys.event.off(HoldemPoker.GEvent.WX_PAY_SUCCESS, this, this.onWXPaySuccess);
            };
            DetailsUI.prototype.onWXPaySuccess = function () {
                this.onSubmitRequest();
            };
            DetailsUI.prototype.onSubmitRequest = function () {
                var _this = this;
                // this.submitBtn.mouseEnabled = false;
                this.submitBtn.mouseEnabled = false;
                Laya.timer.once(2000, this, function () {
                    if (_this && _this.submitBtn) {
                        _this.submitBtn.mouseEnabled = true;
                    }
                });
                if (!HoldemPoker.MatchListMgr.roomData) {
                    // MessageDialog.showWithText('房间数据有误');
                    this.onExit();
                    return;
                }
                if (this.btnStatus === signUpBtnStatusType.signUp) {
                    if (this.applyCheck()) {
                        HoldemPoker.Sys.matchList.getRaceApplyRequest(HoldemPoker.MatchListMgr.roomData, this, this.onRaceApplyResponse);
                        // 带小背景的loading
                        HoldemPoker.Sys.ui.startLoading(null, 1);
                    }
                }
                else if (this.btnStatus === signUpBtnStatusType.delayedSignUp) {
                    if (this.applyCheck()) {
                        HoldemPoker.Sys.matchList.getRaceApplyRequest(HoldemPoker.MatchListMgr.roomData, this, this.onRaceApplyResponse);
                        HoldemPoker.Sys.ui.startLoading(null, 1);
                    }
                }
                else if (this.btnStatus === signUpBtnStatusType.cancelSignUp) {
                    var enrollFee = HoldemPoker.MatchListMgr.roomData.roomSng.apply;
                    // this.applyFeeNum = enrollFee + (enrollFee * MatchListMgr.roomData.roomSng.signUpFeePercent) / 100;
                    // Sys.ui.startLoading();
                    HoldemPoker.Sys.matchList.getRaceCancelApplyRequest(HoldemPoker.MatchListMgr.roomData, this, this.onRaceCancelApplyResponse);
                    HoldemPoker.Sys.ui.startLoading(null, 1);
                }
                else if (this.btnStatus === signUpBtnStatusType.intoMatch) {
                    // Sys.ui.startLoading();
                    // if (MatchListMgr.detailsData.raceType === RoomType.GameSng) {
                    //     this.connectSngRoom();
                    // } else {
                    HoldemPoker.Sys.matchList.onEnterRaceRequest();
                    // }
                }
                else if (this.btnStatus === signUpBtnStatusType.watchMatch) {
                    // MessageDialog.showWithText('请到玩家列表或者牌桌列表进行观战');
                    if (HoldemPoker.MatchListMgr.detailsData.raceType === HoldemPoker.RoomType.GameSng) {
                        HoldemPoker.Sys.matchList.onEnterRaceRequest();
                    }
                    else {
                        // 获取最新玩家列表，围观第1名牌桌
                        HoldemPoker.Sys.matchList.onRacePlayersRequest(HoldemPoker.MatchListMgr.roomData.raceId, this, function (data) {
                            if (data && data.rankPlayer && data.rankPlayer.length > 0) {
                                HoldemPoker.MatchListMgr.lookOnType = 2;
                                HoldemPoker.MatchListMgr.lookOnGameId = data.rankPlayer[0].curGameId;
                                HoldemPoker.MatchListMgr.lookOnPlayerId = 0;
                                HoldemPoker.MatchListMgr.isLookOn = true;
                                HoldemPoker.Sys.fsm.Go(HoldemPoker.GameState.InGameState);
                            }
                        });
                    }
                }
                else if (this.btnStatus === signUpBtnStatusType.againMatch) {
                    var againMatch = true;
                    if (this.applyCheck(againMatch)) {
                        if (HoldemPoker.Sys.itemMgr.itemRepository.isFreeWithItemsStr(HoldemPoker.MatchListMgr.detailsData.rebuyCost)) {
                            HoldemPoker.MessagePrompt.openPrompt(HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.freeGetChipsReEntry, HoldemPoker.MatchListMgr.detailsData.startStack), Laya.Handler.create(this, HoldemPoker.Sys.matchList.getMTTRevivalRequest, [HoldemPoker.MatchListMgr.detailsData, this, this.onMTTRevivalResponse]));
                        }
                        else {
                            var entryFeeDisplayStr = HoldemPoker.Sys.itemMgr.itemRepository.entryFeeResolveDisplayStr(HoldemPoker.MatchListMgr.detailsData.rebuyCost, HoldemPoker.MatchListMgr.detailsData.signUpType, HoldemPoker.MatchListMgr.detailsData.rebuyFee);
                            var title = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.buyChipsReEntry, entryFeeDisplayStr, HoldemPoker.MatchListMgr.detailsData.startStack);
                            HoldemPoker.MessagePrompt.openPrompt(title, Laya.Handler.create(this, HoldemPoker.Sys.matchList.getMTTRevivalRequest, [HoldemPoker.MatchListMgr.detailsData, this, this.onMTTRevivalResponse]));
                        }
                        // Sys.matchList.getMTTRevivalRequest(MatchListMgr.roomData, this, this.onMTTRevivalResponse);
                    }
                }
            };
            DetailsUI.prototype.connectSngRoom = function () {
                if (HoldemPoker.MatchListMgr.roomData) {
                    var data = { invitationCode: HoldemPoker.MatchListMgr.roomData.invitationCode };
                    HoldemPoker.Sys.games.connectRoomServer(data, this, function (data) {
                        HoldemPoker.Sys.ui.stopLoading();
                        HoldemPoker.MessageDialog.showWithText(HoldemPoker.Utility.toMessageWithCode(data.codes));
                    });
                    this.onExit();
                }
            };
            // 检查报名费用
            DetailsUI.prototype.applyCheck = function (againMatch) {
                //报名验证
                var entryStr = HoldemPoker.MatchListMgr.roomData.roomSng.apply;
                var signUpType = HoldemPoker.MatchListMgr.roomData.signUpType;
                var feePercent = HoldemPoker.MatchListMgr.roomData.roomSng.signUpFeePercent;
                //复活
                if (againMatch && HoldemPoker.MatchListMgr.detailsData) {
                    entryStr = HoldemPoker.MatchListMgr.detailsData.rebuyCost;
                    signUpType = HoldemPoker.MatchListMgr.detailsData.signUpType;
                    feePercent = HoldemPoker.MatchListMgr.detailsData.rebuyFee;
                }
                var applyValidError = HoldemPoker.Sys.itemMgr.itemRepository.validateEntryFee(entryStr, signUpType, feePercent);
                if (applyValidError.flag === false) {
                    var errorTemplate = applyValidError.errorTemplate;
                    if (errorTemplate) {
                        // 微赛币不足
                        if (errorTemplate.itemTempId === HoldemPoker.VirtualCurrencyType.WesaiCurrency || errorTemplate.itemTempId === HoldemPoker.VirtualCurrencyType.DiamondCurrency) {
                            //处理快捷支付
                            HoldemPoker.Sys.itemMgr.itemRepository.resolveQuickPay(applyValidError, function () {
                            });
                        }
                        else {
                            //其它不足直接提示
                            HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.notEnoughToApply, errorTemplate.name));
                        }
                    }
                    else {
                        HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.accountNotEnoughToApply));
                    }
                }
                return applyValidError.flag;
            };
            DetailsUI.prototype.checkSignUpGold = function (restFee) {
                var _this = this;
                var content = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.enrollNotEnough, Math.abs(restFee));
                var gold = Math.abs(restFee);
                // AlertDialog.showWithText(content, Sys.localization.get(stringtable.recharge), Laya.Handler.create(this, () => {
                //     let data: msg.MallOrderRequest = { type: msg.PayType.Fast, paymentId: 0, amount: 1, gold: gold };
                //     Sys.games.mainUIMgr.createOrder(data, this, (data: msg.MallOrderResponse) => {
                //         if (data.order.wechatOrder) {
                //             let wechatOrder = data.order.wechatOrder;
                //             let json = { partnerid: wechatOrder.partnerId, prepayid: wechatOrder.prePayId, package: wechatOrder.package, noncestr: wechatOrder.nonceStr, timestamp: wechatOrder.timeStamp, sign: wechatOrder.sign };
                //             NativeModule.payWithWeixin(JSON.stringify(json));
                //         }
                //     });
                // }));
                HoldemPoker.MessagePrompt.openPrompt(content, Laya.Handler.create(this, function () {
                    var data = {
                        type: HoldemPoker.msg.PayType.Fast,
                        paymentId: 0,
                        amount: 1,
                        gold: Math.ceil(gold)
                    };
                    HoldemPoker.Sys.games.mainUIMgr.createOrder(data, _this, function (data) {
                        if (data.order.wechatOrder) {
                            var wechatOrder = data.order.wechatOrder;
                            var json = {
                                partnerid: wechatOrder.partnerId,
                                prepayid: wechatOrder.prePayId,
                                package: wechatOrder.package,
                                noncestr: wechatOrder.nonceStr,
                                timestamp: wechatOrder.timeStamp,
                                sign: wechatOrder.sign
                            };
                            HoldemPoker.NativeModule.payWithWeixin(JSON.stringify(json));
                        }
                    });
                }));
                HoldemPoker.MessagePrompt.setConfText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.recharge));
            };
            // 更新主要信息数据 请求
            DetailsUI.prototype.updateMainInfo = function () {
                var index = this.viewIndex;
                console.log('updateMainInfo', index);
                if (HoldemPoker.Sys.net.insureConnected && HoldemPoker.MatchListMgr.roomData) {
                    // 更新按钮状态
                    this.updateBtnStatus(HoldemPoker.MatchListMgr.roomData.signUpStatus, HoldemPoker.MatchListMgr.roomData.isStarted);
                    if (index === tabViewType.status) {
                        HoldemPoker.Sys.matchList.getMatchDetailsInfo(this, this.updateRaceMTTResponse);
                        return;
                    }
                    if (index === tabViewType.award) {
                        HoldemPoker.Sys.matchList.onRaceAwardRequest(HoldemPoker.MatchListMgr.roomData.raceId, this, this.onRaceAwardResponse);
                        return;
                    }
                    if (index === tabViewType.players) {
                        HoldemPoker.Sys.matchList.onRacePlayersRequest(HoldemPoker.MatchListMgr.roomData.raceId, this, this.onRacePlayersResponse);
                        return;
                    }
                    if (index === tabViewType.tablePoker) {
                        if (HoldemPoker.MatchListMgr.roomData.isStarted) {
                            if (!HoldemPoker.MatchListMgr.tabData.pokerTable) {
                                this.textTip.visible = false;
                                this.pokerTableBox.visible = true;
                            }
                            HoldemPoker.Sys.matchList.onRacePokerTableRequest(HoldemPoker.MatchListMgr.roomData.raceId, this, this.onRacePokerTableResponse);
                        }
                        return;
                    }
                }
            };
            // Tab事件切换 请求
            DetailsUI.prototype.onTabSelect = function (index) {
                this.navView.selectedIndex = index;
                this.viewIndex = index;
                this.updateMainInfo();
            };
            // 个人比赛管理
            DetailsUI.prototype.onManager = function () {
                HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.selfManageDeveloping));
            };
            DetailsUI.prototype.onLanguageChanged = function () {
                this.tabItem0.skin = HoldemPoker.Sys.localization.getResDir("1334/mainGame/", "details_tabStatus.png");
                this.tabItem1.skin = HoldemPoker.Sys.localization.getResDir("1334/mainGame/", "details_tabAward.png");
                this.tabItem2.skin = HoldemPoker.Sys.localization.getResDir("1334/mainGame/", "details_tabPlayers.png");
                this.tabItem3.skin = HoldemPoker.Sys.localization.getResDir("1334/mainGame/", "details_tabPokerTable.png");
            };
            DetailsUI.prototype.Refresh = function () {
            };
            DetailsUI.prototype.Dispose = function () {
                Laya.timer.clearAll(this); // 清除此页面的定时器
                this.UnregisterUIEvent();
            };
            // 报名请求 成功返回
            DetailsUI.prototype.onRaceApplyResponse = function (data) {
                if (HoldemPoker.MatchListMgr.detailsData.raceType === HoldemPoker.RoomType.GameSng) {
                    HoldemPoker.Sys.matchList.onEnterRaceRequest();
                }
                else {
                    if (HoldemPoker.MatchListMgr.roomData && data) {
                        HoldemPoker.MatchListMgr.roomData.isStarted = data.isStarted;
                        HoldemPoker.MatchListMgr.roomData.signUpStatus = data.signUpStatus;
                        HoldemPoker.MatchListMgr.roomData.gameId = data.gameId; // ?gameId会变吗   
                    }
                    HoldemPoker.Sys.ui.stopLoading();
                    this.updateMainInfo();
                    HoldemPoker.Sys.players.self.gold -= this.applyFeeNum; // 报名成功本地减去微赛币
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.MatchListMgr.applySuccessText);
                }
            };
            // 更新比赛详情 成功返回
            DetailsUI.prototype.updateRaceMTTResponse = function (data) {
                if (data) {
                    HoldemPoker.MatchListMgr.detailsData = data;
                    if (HoldemPoker.MatchListMgr.blindsData) {
                        this.renderMainView(renderViewType.update);
                    }
                }
            };
            // 取消报名请求 成功返回
            DetailsUI.prototype.onRaceCancelApplyResponse = function (data) {
                if (HoldemPoker.MatchListMgr.roomData && data) {
                    HoldemPoker.MatchListMgr.roomData.isStarted = data.isStarted;
                    HoldemPoker.MatchListMgr.roomData.signUpStatus = data.signUpStatus;
                }
                this.updateMainInfo();
                HoldemPoker.Sys.ui.stopLoading();
                HoldemPoker.Sys.players.self.gold += this.applyFeeNum; // 取消报名成功本地加回微赛币
                // console.log('取消报名费打印：', Sys.players.self.gold, this.applyFeeNum);
                HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.cancelApplySuccess));
                // this.submitBtn.mouseEnabled = true;
            };
            // 复活参赛 成功返回
            DetailsUI.prototype.onMTTRevivalResponse = function (data) {
                // console.log('复活参赛 成功返回:', data && data.suc, data, data.suc);
                if (data && data.suc) {
                    // 更新按钮状态
                    if (HoldemPoker.MatchListMgr.roomData) {
                        HoldemPoker.MatchListMgr.roomData.signUpStatus = HoldemPoker.msg.SignUpStatus.AlreadySignUp;
                        this.updateBtnStatus(HoldemPoker.MatchListMgr.roomData.signUpStatus, HoldemPoker.MatchListMgr.roomData.isStarted);
                    }
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.reEntrySuccessTip));
                    // 延时1秒后进入赛场
                    Laya.timer.once(1000, this, function () {
                        HoldemPoker.Sys.matchList.onEnterRaceRequest();
                    });
                }
            };
            // 奖励Tab请求 成功返回
            DetailsUI.prototype.onRaceAwardResponse = function (data) {
                if (data) {
                    if (!HoldemPoker.MatchListMgr.tabData.award) {
                        HoldemPoker.MatchListMgr.tabData.award = data;
                        this.renderAwardTabView(renderViewType.init);
                    }
                    else {
                        HoldemPoker.MatchListMgr.tabData.award = data;
                        this.renderAwardTabView(renderViewType.update);
                    }
                }
                // Sys.ui.stopLoading();
            };
            // 玩家Tab请求 成功返回
            DetailsUI.prototype.onRacePlayersResponse = function (data) {
                if (data) {
                    if (!HoldemPoker.MatchListMgr.tabData.players) {
                        HoldemPoker.MatchListMgr.tabData.players = data;
                        this.renderPlayersTabView(renderViewType.init);
                    }
                    else {
                        HoldemPoker.MatchListMgr.tabData.players = data;
                        this.renderPlayersTabView(renderViewType.update);
                    }
                }
            };
            // 牌桌Tab请求 成功返回
            DetailsUI.prototype.onRacePokerTableResponse = function (data) {
                if (data) {
                    if (!HoldemPoker.MatchListMgr.tabData.pokerTable) {
                        HoldemPoker.MatchListMgr.tabData.pokerTable = data;
                        this.renderPokerTableTabView(renderViewType.init);
                    }
                    else {
                        HoldemPoker.MatchListMgr.tabData.pokerTable = data;
                        this.renderPokerTableTabView(renderViewType.update);
                    }
                }
            };
            return DetailsUI;
        }(ui.MatchList.DetailsViewUI));
        HoldemPoker.DetailsUI = DetailsUI;
    })(HoldemPoker = wesai.HoldemPoker || (wesai.HoldemPoker = {}));
})(wesai || (wesai = {}));
//# sourceMappingURL=DetailsUI.js.map