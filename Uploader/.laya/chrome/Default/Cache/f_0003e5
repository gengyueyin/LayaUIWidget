var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var wesai;
(function (wesai) {
    var HoldemPoker;
    (function (HoldemPoker) {
        var minusSignColor = {
            default: '#29b026',
            primary: '#d32525'
        };
        var RecordComponent;
        (function (RecordComponent) {
            /**
             * 战绩详情列表项
             */
            var RecordDetailItem = /** @class */ (function (_super) {
                __extends(RecordDetailItem, _super);
                function RecordDetailItem() {
                    var _this = _super.call(this) || this;
                    _this.nameItem = new HoldemPoker.PlayerNameItem();
                    _this.col2.addChild(_this.nameItem);
                    _this.nameItem.pos(79, 17);
                    _this.nameItemNL = new HoldemPoker.PlayerNameItem();
                    _this.col1Nl.addChild(_this.nameItemNL);
                    _this.nameItemNL.pos(79, 17);
                    return _this;
                }
                RecordDetailItem.prototype.setIns = function (isIns) {
                };
                RecordDetailItem.prototype.renderItemData = function (data) {
                };
                /**
                 * 不同类型表头显示和位置
                 * @param type
                 */
                RecordDetailItem.prototype.setColPosition = function (type) {
                    var _this = this;
                    HoldemPoker.recordListTableCol[type].forEach(function (item, index) {
                        if (item === 0) {
                            _this['col' + (index + 1)].visible = false;
                        }
                        else {
                            _this['col' + (index + 1)].visible = true;
                            // this['col' + (index + 1)].x = item;
                        }
                    });
                };
                /**
                 * 处理奖励
                 * @param data
                 */
                RecordDetailItem.prototype.resolveAward = function (data) {
                    var _this = this;
                    this.moreReward.visible = false;
                    if (this.col4) {
                        this.col4.text = '';
                        if (data.rewardItems) {
                            this.col4.color = minusSignColor.primary;
                            //才能数据没有':'，直接显示
                            if (data.rewardItems.indexOf(':') === -1) {
                                this.col4.text = data.rewardItems;
                            }
                            else {
                                //拼出更多内容
                                var itemRewards = HoldemPoker.Sys.itemMgr.itemRepository.itemsStrMapToTemplate(data.rewardItems, false, false);
                                var tipTextArr_1 = [];
                                for (var _i = 0, itemRewards_1 = itemRewards; _i < itemRewards_1.length; _i++) {
                                    var reward = itemRewards_1[_i];
                                    if (reward.type === 1) {
                                        if (reward.costAmount > 0) {
                                            tipTextArr_1.push(reward.name + '+' + reward.costAmount);
                                        }
                                        else {
                                            tipTextArr_1.push(reward.name + reward.costAmount);
                                        }
                                    }
                                    else {
                                        tipTextArr_1.push(reward.name + 'x' + reward.costAmount);
                                    }
                                }
                                //显示第一个
                                if (itemRewards.length) {
                                    if (itemRewards[0].type === 1) {
                                        if (itemRewards[0].costAmount > 0) {
                                            this.col4.text = itemRewards[0].name + '+' + itemRewards[0].costAmount;
                                        }
                                        else {
                                            this.col4.text = itemRewards[0].name + itemRewards[0].costAmount;
                                        }
                                    }
                                    else {
                                        this.col4.text = itemRewards[0].name + 'x' + itemRewards[0].costAmount;
                                    }
                                }
                                //大于1条显示下拉更多奖励
                                if (itemRewards.length > 1 && !this.moreReward.clickHandler) {
                                    this.moreReward.visible = true;
                                    this.moreReward.on(Laya.Event.CLICK, this, function (e) {
                                        e.stopPropagation();
                                        HoldemPoker.ToolTipUI.showToolTip(tipTextArr_1.join('\n'), _this.moreReward);
                                    });
                                }
                            }
                        }
                        else {
                            var templateName = '';
                            if (data.floatRewardItemId) {
                                var itemTemplate = HoldemPoker.Sys.itemMgr.itemRepository.findItemTemplateById(data.floatRewardItemId);
                                if (itemTemplate) {
                                    templateName = itemTemplate.name;
                                }
                            }
                            //上于0时颜色改变
                            if (data.rewardGold > 0) {
                                this.col4.color = minusSignColor.primary;
                                this.col4.text = templateName + '+' + data.rewardGold;
                            }
                            else if (data.rewardGold < 0) {
                                this.col4.color = minusSignColor.default;
                                this.col4.text = templateName + data.rewardGold;
                            }
                            else {
                                this.col4.color = '#ffffff';
                                this.col4.text = '0';
                            }
                        }
                    }
                };
                return RecordDetailItem;
            }(ui.record.RecordDetailItemUI));
            RecordComponent.RecordDetailItem = RecordDetailItem;
            /**
             * 普通列表项
             */
            var RecordDetailItemNormal = /** @class */ (function (_super) {
                __extends(RecordDetailItemNormal, _super);
                function RecordDetailItemNormal() {
                    var _this = _super.call(this) || this;
                    _this.moreReward.visible = false;
                    return _this;
                }
                RecordDetailItemNormal.prototype.setIns = function (isIns) {
                    this.isIns = isIns;
                    this.mttItemView.visible = false;
                    this.NLitemView.visible = true;
                };
                RecordDetailItemNormal.prototype.renderItemData = function (data, isIns) {
                    //头像
                    HoldemPoker.Utility.loadImg(this.playerAvatarNL.avatarImg, HoldemPoker.GPLAYER_DEFAULT_ICON, data.icon);
                    // this.playerNameLabel.text = data.playerName;
                    this.nameItemNL.showChat(data.playerName, "#cccccc", 26, 120);
                    if (data.handCount) {
                        this.col2NL.text = String(data.handCount);
                    }
                    else {
                        this.col2NL.text = String(0);
                    }
                    this.col3NL.text = String(data.initBankroll);
                    if (data.ganis > 0) {
                        this.col4NL.color = minusSignColor.primary;
                        this.col4NL.text = "+" + String(data.ganis);
                    }
                    else if (data.ganis === 0) {
                        this.col4NL.color = '#ffffff';
                        this.col4NL.text = String(data.ganis);
                    }
                    else {
                        this.col4NL.color = minusSignColor.default;
                        this.col4NL.text = String(data.ganis);
                    }
                    if (this.isIns > 0) {
                        this.col5NL.visible = true;
                        this.col5NL.right = 5;
                        this.col4NL.right = 126;
                        this.col3NL.right = 260;
                        if (data.totalInsurance > 0) {
                            this.col5NL.color = minusSignColor.primary;
                            this.col5NL.text = "+" + String(data.totalInsurance);
                        }
                        else if (data.totalInsurance === 0) {
                            this.col5NL.color = '#ffffff';
                            this.col5NL.text = String(data.totalInsurance);
                        }
                        else {
                            this.col5NL.color = minusSignColor.default;
                            this.col5NL.text = String(data.totalInsurance);
                        }
                    }
                    else {
                        this.col5NL.visible = false;
                        this.col4NL.right = 10;
                        this.col3NL.right = 200;
                    }
                };
                return RecordDetailItemNormal;
            }(RecordDetailItem));
            RecordComponent.RecordDetailItemNormal = RecordDetailItemNormal;
            /**
             * Sng列表项
             */
            var RecordDetailItemSng = /** @class */ (function (_super) {
                __extends(RecordDetailItemSng, _super);
                function RecordDetailItemSng() {
                    var _this = _super.call(this) || this;
                    _this.setColPosition(1 /* SNG_ROOM */);
                    _this.mttItemView.visible = true;
                    _this.NLitemView.visible = false;
                    return _this;
                }
                RecordDetailItemSng.prototype.setIns = function (isIns) {
                };
                RecordDetailItemSng.prototype.renderItemData = function (data) {
                    this.col1.text = data.rank;
                    this.col3.visible = false;
                    //头像
                    HoldemPoker.Utility.loadImg(this.playerAvatar.avatarImg, HoldemPoker.GPLAYER_DEFAULT_ICON, data.icon);
                    // this.playerNameLabel.text = data.playerName;
                    this.nameItem.showChat(data.playerName, "#cccccc", 26, 120);
                    this.col3.visible = false;
                    this.resolveAward(data);
                };
                return RecordDetailItemSng;
            }(RecordDetailItem));
            RecordComponent.RecordDetailItemSng = RecordDetailItemSng;
            /**
             * Mtt列表项
             */
            var RecordDetailItemMtt = /** @class */ (function (_super) {
                __extends(RecordDetailItemMtt, _super);
                function RecordDetailItemMtt() {
                    var _this = _super.call(this) || this;
                    _this.setColPosition(2 /* MTT_ROOM */);
                    _this.mttItemView.visible = true;
                    _this.NLitemView.visible = false;
                    return _this;
                }
                RecordDetailItemMtt.prototype.setIns = function (isIns) {
                };
                RecordDetailItemMtt.prototype.renderItemData = function (data) {
                    this.col1.text = data.rank;
                    //头像
                    HoldemPoker.Utility.loadImg(this.playerAvatar.avatarImg, HoldemPoker.GPLAYER_DEFAULT_ICON, data.icon);
                    // this.playerNameLabel.text = data.playerName;
                    this.nameItem.showChat(data.playerName, "#cccccc", 26, 120);
                    //买入
                    this.col3.text = HoldemPoker.Utility.toNumberPattern(data.buyCount);
                    this.resolveAward(data);
                };
                return RecordDetailItemMtt;
            }(RecordDetailItem));
            RecordComponent.RecordDetailItemMtt = RecordDetailItemMtt;
            /**
             * 战绩详情信息
             */
            var RecordDetailMetaInfo = /** @class */ (function (_super) {
                __extends(RecordDetailMetaInfo, _super);
                function RecordDetailMetaInfo() {
                    var _this = _super.call(this) || this;
                    _this.initLayout();
                    _this.durationTimeLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.gameTotalTime);
                    _this.blindLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.blindLabelText);
                    _this.initialChipLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.initialChipNormal);
                    if (!_this.entryFeeUI) {
                        _this.entryFeeUI = new HoldemPoker.EntryFeeUI(false, {
                            color: '#f0f0f0',
                            fontSize: '38',
                            iconSize: [40, 40],
                            align: 'center'
                        });
                        _this.addChild(_this.entryFeeUI);
                    }
                    return _this;
                }
                RecordDetailMetaInfo.prototype.renderData = function (data) {
                    //牌局时长
                    this.durationTimeDisplay.text = String(Math.ceil(data.gameTime / 60)) + HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.minutes);
                    //盲注
                    var sb; //= data.sb;
                    if (data.sb) {
                        sb = data.sb;
                    }
                    else {
                        sb = data.bb / 2;
                    }
                    if (sb < 1) {
                        sb = 1;
                    }
                    this.blindDisplay.text = HoldemPoker.Utility.toNumberPattern(sb) + '/' + HoldemPoker.Utility.toNumberPattern(data.bb);
                    if (data.floatRewardItemId) {
                        //总带入
                        this.entryFeeUI.renderData(data.floatRewardItemId + ':' + data.initChip, data.signUpType);
                        this.entryFeeUI.pos(Laya.stage.width * 2 / 3 + (Laya.stage.width / 3 - this.entryFeeUI.width) / 2, 80);
                        this.initialChipDisplay.text = '';
                    }
                    else {
                        //总带入
                        this.initialChipDisplay.text = HoldemPoker.Utility.toNumberPattern(data.initChip);
                    }
                    if (data.isinsurance > 0) {
                        this.insAllMoney_lb.visible = true;
                        this.insAllMoney_dis.visible = true;
                        var insAllmoney = 0;
                        for (var _i = 0, _a = data.overData.gameResult; _i < _a.length; _i++) {
                            var result = _a[_i];
                            insAllmoney -= result.totalInsurance;
                        }
                        if (insAllmoney > 0) {
                            this.insAllMoney_dis.color = '#d32525';
                            this.insAllMoney_dis.text = "+" + String(insAllmoney);
                        }
                        else if (insAllmoney === 0) {
                            this.insAllMoney_dis.color = '#ffffff';
                            this.insAllMoney_dis.text = "0";
                        }
                        else {
                            this.insAllMoney_dis.color = '#29b026';
                            this.insAllMoney_dis.text = String(insAllmoney);
                        }
                    }
                    else {
                        this.insAllMoney_lb.visible = false;
                        this.insAllMoney_dis.visible = false;
                    }
                };
                RecordDetailMetaInfo.prototype.initLayout = function () {
                    var _a = Laya.stage, width = _a.width, height = _a.height;
                    var gridSize = width / 3;
                    this.col1.width = gridSize;
                    this.col2.width = gridSize;
                    this.col3.width = gridSize;
                    this.col2.x = 1 * gridSize;
                    this.col3.x = 2 * gridSize;
                    this.graphics.drawRect(0, 0, width, height, '#252528');
                };
                return RecordDetailMetaInfo;
            }(ui.record.RecordMetaInfoUI));
            RecordComponent.RecordDetailMetaInfo = RecordDetailMetaInfo;
            /**
             * 战绩详情Sng信息
             */
            var RecordDetailSngMetaInfo = /** @class */ (function (_super) {
                __extends(RecordDetailSngMetaInfo, _super);
                function RecordDetailSngMetaInfo() {
                    var _this = _super.call(this) || this;
                    _this.width = Laya.stage.width;
                    _this.upgrageBlindLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.upBlindsTime);
                    _this.durationTimeLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.gameTotalTime);
                    _this.entryFeeLable.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.applyCost);
                    _this.initialChipLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.initialChipSng);
                    if (!_this.entryFeeUI) {
                        _this.entryFeeUI = new HoldemPoker.EntryFeeUI(false, {
                            color: '#f0f0f0',
                            fontSize: '38',
                            iconSize: [40, 40],
                            align: 'center'
                        });
                        _this.addChild(_this.entryFeeUI);
                    }
                    return _this;
                }
                RecordDetailSngMetaInfo.prototype.renderData = function (data) {
                    //牌局时长
                    this.durationTimeDisplay.text = String(Math.ceil(data.gameTime / 60)) + HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.minutes);
                    //升盲时间
                    this.upgrageBlindDisplay.text = String(data.gameRule.actionCount / 60) + HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.minutes);
                    this.entryFeeDisplay.text = '';
                    //报名费
                    this.entryFeeUI.renderData(data.gameRule.applyCost, data.signUpType);
                    this.entryFeeUI.pos((375 - this.entryFeeUI.width) / 2, 192);
                    //初始计分牌
                    this.initialChipDisplay.text = HoldemPoker.Utility.toNumberPattern(data.gameRule.initChip);
                };
                return RecordDetailSngMetaInfo;
            }(ui.record.RecordSngMetaInfoUI));
            RecordComponent.RecordDetailSngMetaInfo = RecordDetailSngMetaInfo;
            /**
             * 战绩详情Mtt信息
             */
            var RecordDetailMttMetaInfo = /** @class */ (function (_super) {
                __extends(RecordDetailMttMetaInfo, _super);
                function RecordDetailMttMetaInfo() {
                    var _this = _super.call(this) || this;
                    _this.width = Laya.stage.width;
                    _this.durationTimeLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.gameTotalTime);
                    _this.startTimeLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.gameStartTime);
                    _this.upgrageBlindLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.upBlindsTime);
                    _this.entryFeeLable.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.applyCost);
                    //改为参加人数
                    _this.bonusLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.applyPeopleNum);
                    _this.initialChipLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.initialChipSng);
                    if (!_this.entryFeeUI) {
                        _this.entryFeeUI = new HoldemPoker.EntryFeeUI(false, {
                            color: '#f0f0f0',
                            fontSize: '38',
                            iconSize: [40, 40],
                            lineHeight: 30,
                            align: 'center'
                        });
                        _this.addChild(_this.entryFeeUI);
                    }
                    return _this;
                }
                RecordDetailMttMetaInfo.prototype.renderData = function (data) {
                    //牌局时长
                    this.durationTimeDisplay.text = String(Math.ceil(data.gameTime / 60)) + HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.minutes);
                    //开始时间
                    this.startTimeDisplay.text = data.startTime;
                    //升盲时间
                    this.upgrageBlindDisplay.text = String(data.gameRule.actionCount / 60) + HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.minutes);
                    // 改为参加人数
                    this.bonusDisplay.text = String(data.playerCount) + '+' + String(data.totalRebuyCount);
                    //初始计分牌
                    this.initialChipDisplay.text = String(data.gameRule.initChip);
                    //报名费
                    this.entryFeeUI.renderData(data.gameRule.applyCost, data.signUpType);
                    this.entryFeeUI.pos((250 - this.entryFeeUI.width) / 2, 192);
                };
                return RecordDetailMttMetaInfo;
            }(ui.record.RecordMttMetaInfoUI));
            RecordComponent.RecordDetailMttMetaInfo = RecordDetailMttMetaInfo;
        })(RecordComponent = HoldemPoker.RecordComponent || (HoldemPoker.RecordComponent = {}));
    })(HoldemPoker = wesai.HoldemPoker || (wesai.HoldemPoker = {}));
})(wesai || (wesai = {}));
//# sourceMappingURL=RecordComponent.js.map