/*
 * @Author: devilsome.曾挚
 * @Date: 2017-02-09 17:58:35
 * @Last Modified by: wesai.谢久伟
 * @Last Modified time: 2017-10-26 17:33:20
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var wesai;
(function (wesai) {
    var HoldemPoker;
    (function (HoldemPoker) {
        var Resource;
        (function (Resource) {
            Resource.raise = {
                raise: { url: "cfgs/raise.json", type: Laya.Loader.JSON },
            };
        })(Resource = HoldemPoker.Resource || (HoldemPoker.Resource = {}));
        var BetSliderUI = /** @class */ (function (_super) {
            __extends(BetSliderUI, _super);
            function BetSliderUI(room) {
                var _this = _super.call(this) || this;
                _this.animation = null;
                _this.barOffset = 30;
                _this.upCount = 0;
                _this.rc = room;
                _this.onLanguageChanged();
                return _this;
            }
            /**
             *
             * 创建界面
             * 主要是创建对象
             *
             * @memberOf LoginUI
             */
            BetSliderUI.prototype.Initalize = function () {
                if (HoldemPoker.Sys.isPad) {
                    // this.scale(1.5, 1.5);
                }
                this.visible = false;
                Laya.stage.addChild(this);
                this.RegisterUIEvent();
                this.Refresh();
                this.initPosition();
            };
            BetSliderUI.prototype.RegisterUIEvent = function () {
                // this.allInBtn.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);
                this.betBG.on(Laya.Event.CLICK, this, this.closeAction);
            };
            BetSliderUI.prototype.cancelRace = function () {
                this.cancelRaceBtn.off(Laya.Event.MOUSE_MOVE, this, this.cancelMove);
                this.cancelRaceBtn.off(Laya.Event.MOUSE_UP, this, this.cancelRace);
                this.cancelRaceBtn.off(Laya.Event.MOUSE_OUT, this, this.cancelOver);
                this.off(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
                this.off(Laya.Event.MOUSE_UP, this, this.onMouseUp);
                this.off(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
                console.log("00000000000");
                this.closeAction();
            };
            BetSliderUI.prototype.cancelMove = function () {
                this.off(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
                this.off(Laya.Event.MOUSE_UP, this, this.onMouseUp);
                this.off(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
                this.sldierText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.cancelRaise);
            };
            BetSliderUI.prototype.cancelOver = function () {
                this.cancelRaceBtn.off(Laya.Event.MOUSE_MOVE, this, this.cancelMove);
                this.cancelRaceBtn.off(Laya.Event.MOUSE_UP, this, this.cancelRace);
                this.cancelRaceBtn.off(Laya.Event.MOUSE_OUT, this, this.cancelOver);
                this.on(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
                this.buttonPosition = this.allInBtn.y;
                this.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
                this.on(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
                // this.cancelRaceBtn.on(Laya.Event.MOUSE_MOVE, this, this.cancelMove);
                // this.cancelRaceBtn.on(Laya.Event.MOUSE_UP, this, this.cancelRace);
                // this.cancelRaceBtn.on(Laya.Event.MOUSE_OUT, this, this.cancelOver);
            };
            BetSliderUI.prototype.UnregisterUIEvent = function () {
                this.betBG.off(Laya.Event.CLICK, this, this.closeAction);
            };
            //设置sliderText的值
            BetSliderUI.prototype.setSliderText = function (val) {
                // UIAnimator.RaiseBet(this.sldierText);
                this.sldierText.text = HoldemPoker.Utility.toNumberPattern(Math.ceil(val));
                var pot = this.rc.roomData.gameData.pot;
                var bb = this.rc.roomData.gameData.blind;
                if (val >= bb * 25 && val > pot) {
                    this.bbPotLb.text = (val / pot).toFixed(2) + " POT";
                }
                else {
                    this.bbPotLb.text = (val / bb).toFixed(2) + " BB";
                }
                var seat = this.rc.roomData.getSeatByPlayerId(HoldemPoker.Sys.players.self.id);
                if (val < seat.bankroll) {
                    this.allinWord.visible = false;
                }
            };
            BetSliderUI.prototype.closeAction = function (e) {
                this.visible = false;
                this.ani_allin.stop();
                this.setAllinAniVisible();
                this.cancelRaceBtn.visible = false;
                this.cancelRaceBtn.off(Laya.Event.MOUSE_UP, this, this.cancelRace);
            };
            BetSliderUI.prototype.initPosition = function () {
                this.upCount = 0;
                this.allInMask.width = this.barImg.width;
                this.allInMask.height = this.barImg.height;
                this.allInMask.y = this.allInMask.height;
                this.beginPosition = this.barImg.height - this.barOffset;
                this.endPosition = this.barOffset;
                this.maxLength = this.barImg.height - this.barOffset * 2;
                this.pot.text = this.rc.gameUI.potLabel.text;
                /*
                this.allInBtn.y = 991;
                this.allInMask.y = 435;
                this.endPosition = 562;
                this.maxLength = 429;
                this.beginPosition = this.buttonPosition = 991;
                */
                this.updateBetBarProgress(0);
                console.log("down.....");
                //添加鼠标移到侦听
                this.playAnimation();
                this.on(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
                this.buttonPosition = this.allInBtn.y;
                this.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
                this.on(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
                this.cancelRaceBtn.visible = true;
            };
            /**
             * 根据百分比显示加注尺
             * @param value 0~1
             */
            BetSliderUI.prototype.updateBetBarProgress = function (value) {
                if (value < 0) {
                    value = 0;
                }
                else if (value > 1) {
                    value = 1;
                }
                var offset = this.barOffset + (this.barImg.height - 2.0 * this.barOffset) * (1.0 - value);
                this.allInMask.y = offset;
                this.allInBtn.y = offset;
            };
            BetSliderUI.prototype.onLanguageChanged = function () {
                this.tips.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.dragToCancel);
            };
            /**
             *
             * 刷新界面，坐标，长宽和图片啥的
             * 比如横屏竖屏切换，刷新语言啥的
             *
             * @abstract
             *
             * @memberOf LoginUI
             */
            BetSliderUI.prototype.Refresh = function () {
            };
            /**
             *
             * 销毁界面
             *
             * @memberOf LoginUI
             */
            BetSliderUI.prototype.Dispose = function () {
                this.UnregisterUIEvent();
                HoldemPoker.Sys.ui.remove(this);
                this.offAll();
                this.destroy();
            };
            /**
             *
             * chip 身上的筹码数 - 最小加注额
             * bb 	大盲值
             * @memberOf BuyViewUI
             */
            BetSliderUI.prototype.updateSliderUI = function (chip, bb, delta, minRase) {
                this.minRasieNum = delta;
                this.minRasie = minRase;
                this.isPlayAllin = false;
                this.setAllinAniVisible();
                var seat = this.rc.roomData.getSeatByPlayerId(HoldemPoker.Sys.players.self.id);
                if (seat) {
                    this.maxNumText.text = "ALL IN  " + seat.bankroll;
                    if (isNaN(this.minRasieNum) || this.minRasieNum <= 0) {
                        this.minRasieNum = minRase;
                    }
                    if (this.minRasieNum > seat.bankroll) {
                        this.minRasieNum = seat.bankroll;
                    }
                    this.setSliderText(this.minRasieNum);
                    this.girdsBBs = [];
                    var cfs = HoldemPoker.Sys.loader.getRes(Resource.raise.raise.url);
                    this.getGirdNum(chip, bb, cfs);
                    this.visible = true;
                }
            };
            BetSliderUI.prototype.onMouseDown = function (e) {
                console.log("down.....");
                //添加鼠标移到侦听
                this.playAnimation();
                this.on(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
                this.buttonPosition = this.allInBtn.y;
                this.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
                this.on(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
                this.cancelRaceBtn.visible = true;
            };
            /**移到事件处理*/
            BetSliderUI.prototype.onMouseMove = function (e) {
                // this.cancelRaceBtn.off(Laya.Event.MOUSE_MOVE, this, this.cancelMove);
                this.upCount = 1;
                var lastPosition = this.allInBtn.y;
                var pt = new Laya.Point(this.mouseX, this.mouseY);
                this.betBar.globalToLocal(pt);
                var btnPosy = Math.max(Math.min(pt.y, this.beginPosition), this.endPosition);
                var dist = Math.abs(this.beginPosition - btnPosy);
                var progress = dist / this.maxLength;
                this.updateBetBarProgress(progress);
                this.currentSlider = 100 - Math.ceil(progress * 100);
                if (this.currentSlider <= 1) {
                    this.currentSlider = 0;
                }
                if (progress === 0) {
                    this.cancelRaceBtn.on(Laya.Event.MOUSE_MOVE, this, this.cancelMove);
                    this.cancelRaceBtn.on(Laya.Event.MOUSE_UP, this, this.cancelRace);
                    this.cancelRaceBtn.on(Laya.Event.MOUSE_OUT, this, this.cancelOver);
                }
                console.log("progress=" + progress + "  slider=" + this.currentSlider);
                this.startToSlide();
            };
            /**抬起事件处理*/
            BetSliderUI.prototype.onMouseUp = function (e) {
                this.off(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
                this.off(Laya.Event.MOUSE_UP, this, this.onMouseUp);
                this.off(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
                if (this.currentSlider === 100 && this.upCount === 0) {
                    console.log("down.....");
                    //添加鼠标移到侦听
                    this.upCount++;
                    this.allInBtn.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);
                    // this.playAnimation();
                    // 	this.on(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
                    // 	this.buttonPosition = this.allInBtn.y;
                    // 	this.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
                    // 	this.on(Laya.Event.MOUSE_OUT, this, this.onMouseUp);
                    // 	this.cancelRaceBtn.visible = true;
                    return;
                }
                // 滑动到目的地
                var pt = new Laya.Point(this.mouseX, this.mouseY);
                this.betBar.globalToLocal(pt);
                var dist = this.buttonPosition - pt.y;
                var targetY = this.beginPosition;
                if (dist > this.maxLength) {
                    targetY = this.endPosition;
                }
                Laya.Tween.to(this.allInBtn, { y: targetY }, 100);
                this.completeRaise();
                this.stopAnimation();
            };
            BetSliderUI.prototype.completeRaise = function () {
                this.visible = false;
                var seat = this.rc.roomData.getSeatByPlayerId(HoldemPoker.Sys.players.self.id);
                if (seat) {
                    // this.submitButton.startDrag();
                    var bb = this.rc.roomData.gameData.blind;
                    var value = this.minRasieNum + this.getSilderValue(100 - this.currentSlider, bb);
                    value = Math.ceil(value);
                    //最大跟最小值特殊处理
                    if (this.currentSlider === 0) {
                        this.event(HoldemPoker.GEvent.INGAME_ALL_IN_ACTION);
                        return;
                    }
                    else if (this.currentSlider === 100) {
                        value = this.minRasie;
                    }
                    if (value > seat.bankroll) {
                        value = seat.bankroll;
                    }
                    this.event(HoldemPoker.GEvent.INGAME_BET_SLIDER, value);
                }
            };
            BetSliderUI.prototype.addGirdBBToGirdsBBs = function (length, rasieBB, girds) {
                var room = this.rc.roomData;
                for (var j = 0; j < length; j++) {
                    girds += 1;
                    var gird = { gird: girds, raiseBB: rasieBB };
                    this.girdsBBs.push(gird);
                }
                return girds;
            };
            BetSliderUI.prototype.setAllinAniVisible = function () {
                this.allinLight.visible = false;
                this.allinWord.visible = false;
            };
            BetSliderUI.prototype.startToSlide = function () {
                HoldemPoker.Sys.audio.play("slider");
                var roomData = this.rc.roomData;
                if (roomData) {
                    var bb = roomData.gameData.blind;
                    var seat = this.rc.roomData.getSeatByPlayerId(HoldemPoker.Sys.players.self.id);
                    if (seat) {
                        var value = this.minRasieNum + this.getSilderValue(100 - this.currentSlider, bb);
                        if (this.currentSlider === 0) {
                            value = seat.bankroll;
                        }
                        else if (this.currentSlider === 100) {
                            value = this.minRasieNum;
                        }
                        if (value) {
                            if (value > seat.bankroll) {
                                value = seat.bankroll;
                            }
                            this.sldierText.visible = true;
                            this.setSliderText(value);
                        }
                        if (this.currentSlider === 0) {
                            if (this.isPlayAllin === false) {
                                this.isPlayAllin = true;
                                this.ani_allin.play(0, false);
                                this.ani_allin.once(Laya.Event.COMPLETE, this, function () {
                                });
                            }
                        }
                        else {
                            this.isPlayAllin = false;
                            // if (this.isPlayAllin === false) {
                            // 	this.setAllinAniVisible();
                            // }
                        }
                    }
                }
            };
            BetSliderUI.prototype.getSilderValue = function (slider, bb) {
                if (!this.girdsBBs) {
                    return;
                }
                var gird = Math.round(slider / 100 * (this.girdsBBs.length));
                var sum = 0;
                for (var i = 0; i < gird; i++) {
                    sum += this.girdsBBs[i].raiseBB * bb;
                }
                return sum;
            };
            //获取加注池的总格子数
            BetSliderUI.prototype.getGirdNum = function (chip, bb, cfs) {
                //获取加注齿的格子数
                var girds = 0;
                var length = 6;
                for (var i = 1; i < length; i++) {
                    this.raiseLevel = cfs["Raise" + i];
                    if (chip > this.raiseLevel.minBB * bb && chip <= this.raiseLevel.maxBB * bb) {
                        var index = 0;
                        index += Math.round((chip - this.raiseLevel.minBB * bb) / (this.raiseLevel.raisBB * bb));
                        girds = this.addGirdBBToGirdsBBs(index, this.raiseLevel.raisBB, girds);
                        break;
                    }
                    girds = this.addGirdBBToGirdsBBs(this.raiseLevel.girds, this.raiseLevel.raisBB, girds);
                    //玩家筹码值在这个阶段
                    if (chip < this.raiseLevel.minBB * bb) {
                        break;
                    }
                }
                //最后一个阶段重新计算 加注量是（chip -47BB）/5
                if (chip > cfs["MaxBBNum"] * bb) {
                    var raisBB = Math.round((chip - cfs["LevelFourBBNum"] * bb) / 5);
                    raisBB /= bb;
                    girds = this.addGirdBBToGirdsBBs(cfs["LastLevelGirds"], raisBB, girds);
                }
            };
            BetSliderUI.prototype.startAllinBtnAnimation = function () {
            };
            BetSliderUI.prototype.playAnimation = function () {
            };
            BetSliderUI.prototype.stopAnimation = function () {
            };
            return BetSliderUI;
        }(ui.BetSliderViewUI));
        HoldemPoker.BetSliderUI = BetSliderUI;
    })(HoldemPoker = wesai.HoldemPoker || (wesai.HoldemPoker = {}));
})(wesai || (wesai = {}));
//# sourceMappingURL=BetSliderUI.js.map