var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * 图片上传类
 * by guo
 */
var wesai;
(function (wesai) {
    var HoldemPoker;
    (function (HoldemPoker) {
        var FILE_INPUT_KEY = 'wesai_file';
        var FILE_UPLOAD_MAX_SIZE = 500 * 1024;
        HoldemPoker.FILE_UPLOADED = 'EVENT_FILE_UPLOADED';
        HoldemPoker.FILE_UPLOAD_PROGRESS = 'EVENT_UPLOAD_PROGRESS';
        HoldemPoker.STATIC_DOMAIN = 'http://192.168.1.115:8080';
        //上传类型
        var UploadType;
        (function (UploadType) {
            UploadType[UploadType["Base64"] = 0] = "Base64";
            UploadType[UploadType["Blob"] = 1] = "Blob";
        })(UploadType || (UploadType = {}));
        var Uploader = /** @class */ (function (_super) {
            __extends(Uploader, _super);
            /**
             * 默认是base64方式
             * @param trigger
             * @param cutWidth
             * @param cutHeight
             * @param uploadType
             */
            function Uploader(trigger, cutWidth, cutHeight, uploadType) {
                if (uploadType === void 0) { uploadType = UploadType.Base64; }
                var _this = _super.call(this) || this;
                _this.trigger = trigger;
                _this.uploadType = uploadType;
                // file input
                _this.input = null;
                _this.uploading = false;
                _this.uploadUrl = HoldemPoker.Utility.getImgUrl + '/upload.do';
                _this.cutWidth = 200;
                _this.cutHeight = 200;
                _this.trigger = trigger;
                if (cutWidth) {
                    _this.cutWidth = cutWidth;
                }
                if (cutHeight) {
                    _this.cutHeight = cutHeight;
                }
                if (!HoldemPoker.Sys.platformRunning) {
                    _this.createInput();
                }
                _this.initEvent();
                return _this;
            }
            /**
             * 创建input
             */
            Uploader.prototype.createInput = function () {
                if (!this.input) {
                    this.input = Laya.Browser.document.createElement('input');
                    this.input.setAttribute('name', FILE_INPUT_KEY);
                    this.input.setAttribute('id', String(Laya.Utils.getGID()));
                    this.input.setAttribute('type', 'file');
                    this.input.setAttribute('accept', 'image/jpg,image/jpeg,image/png');
                    this.input.style.position = 'absolute';
                    this.input.style.zIndex = Laya.Render.canvas.zIndex + 1;
                    this.input.style.overflow = 'hidden';
                    this.input.style.opacity = '0';
                    //设置位置和大小
                    this.updateInputPosition(this.trigger, 0, 0);
                    this.unusable();
                    Laya.Browser.document.body.appendChild(this.input);
                }
            };
            /**
             * 更新input位置
             */
            Uploader.prototype.updateInputPosition = function (coordinateSpace, offsetX, offsetY) {
                if (!this.input) {
                    return;
                }
                Laya.Utils.fitDOMElementInArea(this.input, coordinateSpace, offsetX, offsetY, this.trigger.width, this.trigger.height);
            };
            /**
             * initEvent
             */
            Uploader.prototype.initEvent = function () {
                if (HoldemPoker.Sys.platformRunning) {
                    this.trigger.on(Laya.Event.CLICK, this, this.nativeUpload);
                }
                else {
                    this.input.addEventListener('change', this.onChange.bind(this), true);
                    this.trigger.on(Laya.Event.MOUSE_OVER, this, this.usable);
                    this.trigger.on(Laya.Event.MOUSE_OUT, this, this.unusable);
                }
            };
            /**
             * input change
             * @param e
             */
            Uploader.prototype.onChange = function (e) {
                var _this = this;
                if (this.uploading) {
                    return;
                }
                var file = e.target.files[0];
                if (!(file instanceof Blob)) {
                    return;
                }
                if (file.size > FILE_UPLOAD_MAX_SIZE) {
                    HoldemPoker.MessageDialog.showWithText("\u4E0A\u4F20\u56FE\u7247\u4E0D\u80FD\u8D85\u8FC7" + parseInt(String(FILE_UPLOAD_MAX_SIZE / 1024)) + "k");
                    return;
                }
                // this.readBlobAsDataURL(file, (taget) => {
                //     this.event(FILE_UPLOADED, taget.result);
                // });
                this.upload(file).then(function (result) {
                    _this.event(HoldemPoker.FILE_UPLOADED, result);
                }).catch(function (e) {
                    console.log(e);
                });
            };
            /**
             * 执行上传
             * 原生过来的是base64,web上的是File对象
             * @param file
             * @returns {Promise<T>|Promise}
             */
            Uploader.prototype.upload = function (file) {
                return __awaiter(this, void 0, void 0, function () {
                    var _this = this;
                    var xhr, postData, reader;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.uploading = true;
                                xhr = new Laya.Browser.window.XMLHttpRequest();
                                postData = '';
                                if (!(typeof file === 'string')) return [3 /*break*/, 1];
                                postData = 'file=' + encodeURIComponent(file);
                                return [3 /*break*/, 3];
                            case 1: return [4 /*yield*/, this.readBlobAsDataURL(file)];
                            case 2:
                                reader = _a.sent();
                                postData = 'file=' + encodeURIComponent(reader.result);
                                _a.label = 3;
                            case 3: 
                            // create promise handle the xhr
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    xhr.onreadystatechange = function () {
                                        _this.uploading = false;
                                        if (xhr.readyState < 4) {
                                            return;
                                        }
                                        if (xhr.readyState < 400) {
                                            try {
                                                var res = JSON.parse(xhr.responseText);
                                                resolve(res);
                                            }
                                            catch (e) {
                                                console.log('上传服务器错误');
                                                reject(e);
                                            }
                                        }
                                        else {
                                            try {
                                                var err = JSON.parse(xhr.responseText);
                                                err.status = xhr.status;
                                                err.statusText = xhr.statusText;
                                                reject(err);
                                            }
                                            catch (e) {
                                                console.log('上传服务器错误');
                                                reject(e);
                                            }
                                        }
                                    };
                                    // xhr.upload.addEventListener('progress', e => {
                                    //     this.event(FILE_UPLOADED, e);
                                    // }, false);
                                    xhr.onerror = function () {
                                        _this.uploading = false;
                                        try {
                                            var err = JSON.parse(xhr.responseText);
                                            err.status = xhr.status;
                                            err.statusText = xhr.statusText;
                                            reject(err);
                                        }
                                        catch (e) {
                                            console.log('上传服务器错误');
                                            reject(e);
                                        }
                                    };
                                    xhr.open('POST', _this.uploadUrl, true);
                                    // xhr.send(form);
                                    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                                    xhr.send(postData);
                                })];
                        }
                    });
                });
            };
            /**
             * 转为base64url
             * @param blob
             * @param callback
             */
            Uploader.prototype.readBlobAsDataURL = function (blob) {
                return __awaiter(this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        this.uploading = true;
                        this.input.disabled = true;
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                var reader = new FileReader();
                                reader.onload = function (e) {
                                    _this.uploading = false;
                                    _this.input.disabled = false;
                                    resolve(e.target);
                                };
                                reader.onerror = function (error) {
                                    reject(error);
                                };
                                //上传进度
                                // reader.onprogress = (progress) => {
                                //     this.event(FILE_UPLOAD_PROGRESS, progress);
                                // }
                                reader.readAsDataURL(blob);
                            })];
                    });
                });
            };
            /**
             * base64转blob
             * @param base64String
             * @returns {Blob}
             */
            Uploader.prototype.base64ToBlob = function (base64String) {
                var arr = base64String.split(','), mime = arr[0].match(/:(.*?);/)[1], baseStr = this.atob(arr[1]), n = baseStr.length, unit8Arr = new Uint8Array(n);
                while (n--) {
                    unit8Arr[n] = baseStr.charCodeAt(n);
                }
                return new Blob([unit8Arr], { type: mime });
            };
            /**
             * native上传
             * @returns {Promise<void>}
             */
            Uploader.prototype.nativeUpload = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var _this = this;
                    var base64Image, e_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (this.uploading) {
                                    return [2 /*return*/];
                                }
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.nativePickerImage()];
                            case 2:
                                base64Image = _a.sent();
                                this.upload(base64Image).then(function (result) {
                                    _this.event(HoldemPoker.FILE_UPLOADED, result);
                                });
                                return [3 /*break*/, 4];
                            case 3:
                                e_1 = _a.sent();
                                console.log(e_1);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            };
            /**
             * native选择图片
             * @returns {Promise<Promise<T>|Promise>}
             */
            Uploader.prototype.nativePickerImage = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                if (HoldemPoker.Utility.isSupportSize()) {
                                    HoldemPoker.NativeModule.showPhotoPickerWithSize(function (base64Str) {
                                        //返回base64
                                        if (base64Str && (/:(.*?);/).test(base64Str)) {
                                            resolve(base64Str);
                                        }
                                        else {
                                            console.log('native pick image error');
                                            reject('native pick image error');
                                        }
                                    }, _this.cutWidth, _this.cutHeight);
                                }
                                else {
                                    HoldemPoker.NativeModule.showPhotoPicker(function (base64Str) {
                                        //返回base64
                                        if (base64Str && (/:(.*?);/).test(base64Str)) {
                                            resolve(base64Str);
                                        }
                                        else {
                                            console.log('native pick image error');
                                            reject('native pick image error');
                                        }
                                    });
                                }
                            })];
                    });
                });
            };
            /**
             * 栽剪尺寸
             * @param cutWidth
             * @param cutHeight
             */
            Uploader.prototype.setImgSize = function (cutWidth, cutHeight) {
                this.cutWidth = cutWidth;
                this.cutHeight = cutHeight;
            };
            /**
             * input在最上层会出问题
             * 页面上有其它操作层时显隐input
             */
            Uploader.prototype.usable = function () {
                if (!this.input) {
                    return;
                }
                this.input.disabled = false;
                this.input.style.display = '';
            };
            /**
             * input在最上层会出问题
             * 页面上有其它操作层时显隐input
             */
            Uploader.prototype.unusable = function () {
                if (!this.input) {
                    return;
                }
                this.input.disabled = true;
                this.input.style.display = 'none';
            };
            /**
             * dispose
             */
            Uploader.prototype.dispose = function () {
                if (this.input) {
                    Laya.Browser.document.body.removeChild(this.input);
                    this.input = null;
                    this.trigger.off(Laya.Event.MOUSE_OVER, this, this.usable);
                    this.trigger.off(Laya.Event.MOUSE_OUT, this, this.unusable);
                }
                this.trigger.off(Laya.Event.CLICK, this, this.nativeUpload);
            };
            /**
             * layabox不支持window.atob
             * @param input
             */
            Uploader.prototype.atob = function (input) {
                var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
                var str = String(input).replace(/[=]+$/, '');
                if (str.length % 4 === 1) {
                    throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
                }
                for (
                // initialize result and counters
                var bc = 0, bs, buffer, idx = 0, output = ''; 
                // get next character
                buffer = str.charAt(idx++); 
                // character found in table? initialize bit storage and add its ascii value;
                ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
                    // and if not first of each 4 characters,
                    // convert the first 8 bits to one ascii character
                    bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
                    // try to find character in table (0-63, not found => -1)
                    buffer = chars.indexOf(buffer);
                }
                return output;
            };
            return Uploader;
        }(Laya.EventDispatcher));
        HoldemPoker.Uploader = Uploader;
    })(HoldemPoker = wesai.HoldemPoker || (wesai.HoldemPoker = {}));
})(wesai || (wesai = {}));
//# sourceMappingURL=Uploader.js.map