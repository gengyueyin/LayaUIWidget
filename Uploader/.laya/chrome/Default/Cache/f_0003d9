///<reference path="../../repository/HandReviewRepository.ts" />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var wesai;
(function (wesai) {
    var HoldemPoker;
    (function (HoldemPoker) {
        var seatFlagBg = {
            dealerImg: '1334/common/D.png',
            bbImg: '1334/common/B.png',
            sbImg: '1334/common/S.png',
            sdImg: '1334/common/Sd.png'
        };
        var itemBg = ['1334/review/item_odd_bg.png', '1334/review/item_even_bg.png'];
        /**
         * 列表项
         */
        var HandReviewItem = /** @class */ (function (_super) {
            __extends(HandReviewItem, _super);
            function HandReviewItem() {
                var _this = _super.call(this) || this;
                _this.nameItem = new HoldemPoker.PlayerNameItem();
                _this.addChild(_this.nameItem);
                return _this;
            }
            HandReviewItem.prototype.renderItemData = function (data) {
                //头像
                HoldemPoker.Utility.loadImg(this.lb_avatar.avatarImg, HoldemPoker.GPLAYER_DEFAULT_ICON, data.icon);
                // this.lb_name.text = data.playerName;
                this.nameItem.showChat(data.playerName, "#cccccc", 18, 100);
                this.nameItem.pos(12 + (100 - this.nameItem.width) / 2, 99);
                //位置状态显示
                this.lb_isD.skin = '';
                this.lb_isD.visible = true;
                if (data.bb) {
                    this.lb_isD.skin = seatFlagBg.bbImg;
                }
                else if (data.isDealer) {
                    this.lb_isD.skin = seatFlagBg.dealerImg;
                }
                else if (data.sb) {
                    this.lb_isD.skin = seatFlagBg.sbImg;
                }
                else if (data.straddle) {
                    this.lb_isD.skin = seatFlagBg.sdImg;
                }
                else {
                    this.lb_isD.visible = false;
                }
                this.lb_hPower.text = data.handPowerDisplay;
                this.lb_money.text = data.gains > 0 ? '+' + HoldemPoker.Utility.toNumberPattern(data.gains) : HoldemPoker.Utility.toNumberPattern(data.gains);
                //手牌
                if (data.handCard && data.handCard.card.length > 0) {
                    if (data.handCard.card[0].cardNumber === 0 && data.handCard.card[0].cardSuit === '') {
                        this.lb_card1.skin = HoldemPoker.Utility.getCardBackSkin(HoldemPoker.CardSize.SM);
                    }
                    else {
                        this.lb_card1.skin = HoldemPoker.Utility.getSmallCardName(data.handCard.card[0].cardNumber, data.handCard.card[0].cardSuit);
                    }
                    if (data.handCard.card[1].cardNumber === 0 && data.handCard.card[1].cardSuit === '') {
                        this.lb_card2.skin = HoldemPoker.Utility.getCardBackSkin(HoldemPoker.CardSize.SM);
                    }
                    else {
                        this.lb_card2.skin = HoldemPoker.Utility.getSmallCardName(data.handCard.card[1].cardNumber, data.handCard.card[1].cardSuit);
                    }
                }
                else {
                    this.lb_card1.skin = HoldemPoker.Utility.getCardBackSkin(HoldemPoker.CardSize.SM);
                    this.lb_card2.skin = HoldemPoker.Utility.getCardBackSkin(HoldemPoker.CardSize.SM);
                }
                //公牌
                if (data.flopCard) {
                    this.lb_public1.skin = HoldemPoker.Utility.getSmallCardName(data.flopCard.card[0].cardNumber, data.flopCard.card[0].cardSuit);
                    this.lb_public2.skin = HoldemPoker.Utility.getSmallCardName(data.flopCard.card[1].cardNumber, data.flopCard.card[1].cardSuit);
                    this.lb_public3.skin = HoldemPoker.Utility.getSmallCardName(data.flopCard.card[2].cardNumber, data.flopCard.card[2].cardSuit);
                }
                else {
                    this.lb_public1.skin = '';
                    this.lb_public2.skin = '';
                    this.lb_public3.skin = '';
                }
                //转牌
                if (data.trunCard) {
                    this.lb_public4.skin = HoldemPoker.Utility.getSmallCardName(data.trunCard.cardNumber, data.trunCard.cardSuit);
                }
                else {
                    this.lb_public4.skin = '';
                }
                //河牌
                if (data.riverCard) {
                    this.lb_public5.skin = HoldemPoker.Utility.getSmallCardName(data.riverCard.cardNumber, data.riverCard.cardSuit);
                }
                else {
                    this.lb_public5.skin = '';
                }
                this.lb_action1.text = data.preflopActionDisplay;
                this.lb_action2.text = data.flopActionDisplay;
                this.lb_action3.text = data.trunActionDisplay;
                this.lb_action4.text = data.riverActionDisplay;
                //保险
                if (data.buyInsurAmount === 0 && data.returnInsurAmount === 0) {
                    this.insurAmount.text = "";
                }
                else {
                    var isInsurance = false;
                    if (data.buyInsurAmount > 0 && data.returnInsurAmount === 0) {
                        this.insurAmount.visible = true;
                        this.insurAmount.color = "#00991c";
                        this.insurAmount.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.insureValue, data.buyInsurAmount);
                        isInsurance = true;
                    }
                    else if (data.returnInsurAmount > 0) {
                        var money = data.returnInsurAmount - data.buyInsurAmount;
                        if (money < 0) {
                            money = 0;
                        }
                        this.insurAmount.visible = true;
                        this.insurAmount.color = "#f1962a";
                        this.insurAmount.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.payValue, (data.returnInsurAmount - data.buyInsurAmount));
                        isInsurance = true;
                    }
                }
                // if (data.returnInsurAmount > 0 && data.buyInsurAmount > 0 && data.returnInsurAmount - data.buyInsurAmount >= 0) {
                //     this.insurAmount.visible = true;
                //     this.insurAmount.color = "#f1962a";
                //     this.insurAmount.text = "赔付" + (data.returnInsurAmount - data.buyInsurAmount);
                //     isInsurance = true;
                // }
                // if (!isInsurance) {
                //     this.insurAmount.text = "";
                // }
            };
            return HandReviewItem;
        }(ui.handReview.HandReviewItemViewUI));
        /**
         * 手牌回顾类
         */
        var HandReviewUI = /** @class */ (function (_super) {
            __extends(HandReviewUI, _super);
            function HandReviewUI(roomControl) {
                var _this = _super.call(this) || this;
                _this.roomControl = roomControl;
                _this.listData = [];
                _this.collectedCount = 0;
                _this.allCollectCount = 0;
                _this.handReviewRepository = new HoldemPoker.HandReviewRepository(_this.roomControl.net);
                _this.RegisterUIEvent();
                _this.onLanguageChanged();
                _this.initList();
                _this.updateList();
                //初始盲注
                var data = {
                    bb: _this.roomControl.roomData.gameData.blind,
                    sb: _this.roomControl.roomData.gameData.sb
                };
                _this.updateMeta(data);
                _this.initShare();
                return _this;
            }
            HandReviewUI.prototype.initShare = function () {
                if (!HoldemPoker.Utility.isShare()) {
                    this.handReviewShare.visible = false;
                }
            };
            HandReviewUI.prototype.Initalize = function () {
            };
            HandReviewUI.prototype.RegisterUIEvent = function () {
                //数据更新通知
                this.handReviewRepository.on(HoldemPoker.EVENT_HAND_REVIEW_UPDATE, this, this.renderData);
                // 页面数据动作
                this.prev.on(Laya.Event.CLICK, this, this.pageAction.bind(this, 0 /* Prev */));
                this.prevPage.on(Laya.Event.CLICK, this, this.pageAction.bind(this, 1 /* PrevPage */));
                this.next.on(Laya.Event.CLICK, this, this.pageAction.bind(this, 2 /* Next */));
                this.nextPage.on(Laya.Event.CLICK, this, this.pageAction.bind(this, 3 /* NextPage */));
                this.handReviewShare.on(Laya.Event.CLICK, this, this.doShare);
                this.collectBtn.on(Laya.Event.CLICK, this, this.onCollect);
            };
            HandReviewUI.prototype.doShare = function () {
                var that = this;
                var name = Laya.Browser.window.conch.getCachePath() + "/" + Laya.timer.currTimer + "handreview.png";
                if (Laya.Browser.window.conch) {
                    Laya.Browser.window.conch.captureScreen(function (arrayBuff, width, height) {
                        //存储文件的方式
                        Laya.Browser.window.conch.saveAsPng(arrayBuff, width, height, name);
                        var path = "file:///" + name;
                        var shareData = new HoldemPoker.ShareData();
                        shareData.imgPath = path;
                        shareData.type = "img";
                        var imgShare = new HoldemPoker.ImgShare(shareData);
                        Laya.stage.addChild(imgShare);
                        imgShare.startAni();
                    });
                }
            };
            HandReviewUI.prototype.UnregisterUIEvent = function () {
                this.handReviewRepository.off(HoldemPoker.EVENT_HAND_REVIEW_UPDATE, this, this.renderData);
                this.prev.off(Laya.Event.CLICK, this, this.pageAction.bind(this, 0 /* Prev */));
                this.prevPage.off(Laya.Event.CLICK, this, this.pageAction.bind(this, 1 /* PrevPage */));
                this.next.off(Laya.Event.CLICK, this, this.pageAction.bind(this, 2 /* Next */));
                this.nextPage.off(Laya.Event.CLICK, this, this.pageAction.bind(this, 3 /* NextPage */));
                this.handReviewShare.off(Laya.Event.CLICK, this, this.doShare);
                this.collectBtn.off(Laya.Event.CLICK, this, this.onCollect);
            };
            HandReviewUI.prototype.onLanguageChanged = function () {
                this.handReviewTitle.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.handReviewTitleText);
            };
            HandReviewUI.prototype.Refresh = function () {
            };
            HandReviewUI.prototype.Dispose = function () {
                this.UnregisterUIEvent();
            };
            /**
             * 请求数据
             * @param handCount
             */
            HandReviewUI.prototype.sendRequest = function (handCount) {
                if (handCount === void 0) { handCount = 0; }
                this.handReviewRepository.sendRequest('HandReviewRequest', {
                    roomId: this.roomControl.roomData.id,
                    gameId: this.roomControl.roomData.gameId,
                    handCount: handCount
                });
            };
            HandReviewUI.prototype.initList = function () {
                this.lbList.itemRender = HandReviewItem;
                this.lbList.renderHandler = new Laya.Handler(this, this.updateItem);
            };
            HandReviewUI.prototype.updateList = function () {
                this.lbList.array = this.listData;
                this.lbList.refresh();
            };
            HandReviewUI.prototype.updateItem = function (cell, index) {
                cell.itemBg.skin = itemBg[index % 2];
                if (HoldemPoker.Sys.players.self.isSelf(cell.dataSource.playerId)) {
                    cell.self_bg.visible = true;
                }
                else {
                    cell.self_bg.visible = false;
                }
                cell.renderItemData(cell.dataSource);
            };
            /**
             * 其它信息
             * @param data
             */
            HandReviewUI.prototype.updateMeta = function (data) {
                this.lb_bb.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.handReviewBlindDisplay, String(data.sb) + '/' + String(data.bb));
                this.roomIdLabel.text = '' + this.roomControl.roomData.id;
            };
            /**
             * 分页
             */
            HandReviewUI.prototype.updatePagination = function () {
                var current = HoldemPoker.HandReviewRepository.currentHandCount === 0 ? HoldemPoker.HandReviewRepository.totalHandCount : HoldemPoker.HandReviewRepository.currentHandCount;
                this.pageStr.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.handRoundDisplay, String(current) + '/' + String(HoldemPoker.HandReviewRepository.totalHandCount));
            };
            /**
             * 分页控制
             * @param action
             */
            HandReviewUI.prototype.pageAction = function (action) {
                HoldemPoker.HandReviewRepository.computedHandCount(action);
                this.sendRequest(HoldemPoker.HandReviewRepository.currentHandCount);
            };
            HandReviewUI.prototype.renderData = function (data) {
                if (!this.displayedInStage) {
                    return;
                }
                //更新列表
                this.listData = data.handReview;
                this.updateList();
                //更新meta数据
                this.updateMeta(data);
                //更新分页
                this.updatePagination();
                this.collectedCount = data.collectedCount;
                this.allCollectCount = data.allCollectCount;
                this.collectStatus(data.isCollected);
                this.collectBtn.visible = this.listData.length > 0;
            };
            HandReviewUI.prototype.onCollect = function () {
                if (this.roomControl) {
                    this.roomControl.net.sendMesage('HandReviewCollectVideoRequest', {
                        recordId: this.roomControl.roomData.id,
                        gameId: this.roomControl.roomData.gameId,
                        handCount: HoldemPoker.HandReviewRepository.currentHandCount,
                    }, new Laya.Handler(this, this.onResolveCollect), new Laya.Handler(this, this.onCollectError));
                }
            };
            HandReviewUI.prototype.onResolveCollect = function (data) {
                var msg = data.isCollected ? HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.videoCllectOk) : HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.cacelVideoCllectOK);
                HoldemPoker.MessageDialog.showWithText(msg);
                this.collectedCount = data.isCollected ? (this.collectedCount + 1) : (this.collectedCount - 1);
                if (this.collectedCount > this.allCollectCount) {
                    this.collectedCount = this.allCollectCount;
                }
                if (this.collectedCount < 1) {
                    this.collectedCount = 0;
                }
                this.collectStatus(data.isCollected);
            };
            HandReviewUI.prototype.onCollectError = function (err) {
                if (err.codes) {
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Utility.toMessageWithCode(err.codes));
                }
            };
            HandReviewUI.prototype.collectStatus = function (isCollected) {
                var skinUrl = '1334/common/collect_icon.png';
                if (isCollected) {
                    skinUrl = '1334/common/collected_icon.png';
                }
                this.collectIcon.skin = skinUrl;
                this.collectTotal.text = '' + this.collectedCount + '/' + this.allCollectCount;
            };
            return HandReviewUI;
        }(ui.handReview.HandReviewViewUI));
        HoldemPoker.HandReviewUI = HandReviewUI;
    })(HoldemPoker = wesai.HoldemPoker || (wesai.HoldemPoker = {}));
})(wesai || (wesai = {}));
//# sourceMappingURL=HandReviewUI.js.map