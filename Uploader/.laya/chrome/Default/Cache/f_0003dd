var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var wesai;
(function (wesai) {
    var HoldemPoker;
    (function (HoldemPoker) {
        var PlayerInfoPropItem = /** @class */ (function (_super) {
            __extends(PlayerInfoPropItem, _super);
            function PlayerInfoPropItem() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.iconUrls = {
                    1: "1334/ingame/cheer.png",
                    2: "1334/ingame/bomb.png",
                    3: "1334/ingame/chicken.png",
                    4: "1334/ingame/fish.png",
                    5: "1334/ingame/head.png",
                    6: "1334/ingame/kiss.png",
                    7: "1334/ingame/clap.png",
                    8: "1334/ingame/salted_fish.png",
                    9: "1334/ingame/shark.png",
                    10: "1334/ingame/shit.png",
                    11: "1334/ingame/sniper.png",
                    12: "1334/ingame/water.png",
                    13: "1334/ingame/good.png",
                };
                return _this;
            }
            PlayerInfoPropItem.prototype.renderData = function (data) {
                this.propIcon.skin = this.iconUrls[data.index];
                this.costIcon.skin = HoldemPoker.Sys.itemMgr.itemRepository.getItemIcon(data.costItemId);
                this.propCost.text = data.costNum + "";
            };
            return PlayerInfoPropItem;
        }(ui.ingame.PlayerInfoPropItemUI));
        HoldemPoker.PlayerInfoPropItem = PlayerInfoPropItem;
        var PlayerInfoUI = /** @class */ (function (_super) {
            __extends(PlayerInfoUI, _super);
            function PlayerInfoUI(rc) {
                var _this = _super.call(this) || this;
                //装配请求中
                _this.duringDress = false;
                //展开动画中
                _this.duringToggle = false;
                //是否已展开
                _this.listExpanding = false;
                _this.clickProp = null;
                _this.clickProps = [];
                _this.rc = rc;
                return _this;
            }
            PlayerInfoUI.prototype.Initalize = function () {
                this.forbidenBtn.visible = false;
                this.playVoiceBtn.visible = false;
                this.voiceBtn.visible = false;
                this.standUpBtn.visible = false;
                this.kickBtn.visible = false;
                this.RegisterUIEvent();
                this.Refresh();
            };
            PlayerInfoUI.prototype.RegisterUIEvent = function () {
                this.closeBtn.on(Laya.Event.CLICK, this, this.onExit);
                this.selectedBox.on(Laya.Event.CLICK, this, this.onMascotBoxClick);
                HoldemPoker.Sys.itemMgr.itemRepository.on(HoldemPoker.EVENT_ITEM_DELETE, this, this.onMascotDelete);
                this.reportBtn.on(Laya.Event.CLICK, this, this.onReport);
                this.cancelSuspicion.on(Laya.Event.CLICK, this, this.onCancelSuspicion);
            };
            PlayerInfoUI.prototype.UnregisterUIEvent = function () {
                this.closeBtn.off(Laya.Event.CLICK, this, this.onExit);
                this.selectedBox.off(Laya.Event.CLICK, this, this.onMascotBoxClick);
                HoldemPoker.Sys.itemMgr.itemRepository.off(HoldemPoker.EVENT_ITEM_DELETE, this, this.onMascotDelete);
                this.reportBtn.off(Laya.Event.CLICK, this, this.onReport);
                this.cancelSuspicion.off(Laya.Event.CLICK, this, this.onCancelSuspicion);
            };
            PlayerInfoUI.prototype.onLanguageChanged = function () {
            };
            PlayerInfoUI.prototype.Refresh = function () {
                this.totalLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.totalNumer);
                this.matchLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.joinMatchNumber);
                this.joinRateLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.joinRate);
                this.rewardLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.rewardNumber);
            };
            PlayerInfoUI.prototype.Dispose = function () {
                this.UnregisterUIEvent();
                this.offAll();
                this.destroy();
            };
            PlayerInfoUI.prototype.setupData = function (data) {
                this.idLabel.text = "ID: " + data.playerId;
                this.playerId = data.playerId;
                if (data.playerId === HoldemPoker.Sys.players.self.id) {
                    this.myMoneyBox.visible = true;
                    this.signatureLabel.visible = false;
                    this.goldLabel.visible = true;
                    this.goldImg.visible = true;
                    this.diamondImg.visible = true;
                    this.diamondLabel.visible = true;
                    //显示钱和微赛币
                    this.goldLabel.text = String(data.gold);
                    this.diamondLabel.text = String(data.diamond);
                    this.msLable.text = String(data.masterScore);
                }
                else {
                    this.myMoneyBox.visible = false;
                    this.signatureLabel.visible = false;
                    this.goldLabel.visible = false;
                    this.goldImg.visible = false;
                    this.diamondImg.visible = false;
                    this.diamondLabel.visible = false;
                    //显示签名
                    if (data.signature) {
                        this.signatureLabel.text = data.signature;
                    }
                }
                var genderString;
                if (data.gender === 0) {
                    genderString = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.male);
                    this.genderImg.skin = "1334/mainGame/male_icon.png";
                }
                else {
                    genderString = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.female);
                    this.genderImg.skin = "1334/mainGame/female_icon.png";
                }
                if (!this.nameItem) {
                    this.nameItem = new HoldemPoker.PlayerNameItem();
                    this.infoBox.addChild(this.nameItem);
                }
                if (data.playerName) {
                    this.nameItem.showChat(data.playerName, "#f0f0f0", 38);
                    // let center = (750 - this.nameItem.width) / 2.0;
                    // if (Sys.isPad) {
                    this.nameItem.pos((this.infoBox.width - this.nameItem.width) / 2, this.genderImg.y);
                    // } else {
                    // this.nameItem.pos(center, 588);
                    // }
                }
                this.genderImg.x = this.nameItem.x + this.nameItem.width + 5;
                //头像
                HoldemPoker.Utility.loadImg(this.avatarView.avatarImg, HoldemPoker.GPLAYER_DEFAULT_ICON, data.icon);
                this.totalNumLabel.text = String(data.handCount);
                if (data.inPotCount !== 0) {
                    var result = data.inPotCount / data.handCount;
                    if (result < 0.01) {
                        result = 0.01;
                        this.joinRateNumberLabel.text = result + "%";
                    }
                    else {
                        result = result * 100;
                        var fixedString = result.toFixed(2);
                        this.joinRateNumberLabel.text = fixedString + "%";
                    }
                }
                else {
                    this.joinRateNumberLabel.text = "0";
                }
                this.matchNumberLabel.text = String(data.joinRaceCount);
                this.rewardNumberLabel.text = String(data.rewardCount);
                if (this.rc.roomData.getSelfSeat() === null) {
                    this.propList.visible = false;
                    this.mascotBox.visible = false;
                    this.reportBtn.visible = false;
                    this.cancelSuspicion.visible = false;
                }
                else {
                    if (HoldemPoker.Sys.players.self.isSelf(data.playerId)) {
                        this.cancelSuspicion.visible = false;
                        this.reportBtn.visible = false;
                        this.propList.visible = false;
                        this.mascotBox.visible = true;
                        this.originData = data;
                        this.mascotData = HoldemPoker.Sys.itemMgr.itemRepository.findOneByTemplateId(data.takeMascot);
                        this.createMascotList();
                        this.updateListData();
                        this.resolveMascotSelect();
                    }
                    else {
                        if (this.rc.roomData.roomType === 3 /* NL_ROOM */ || this.rc.roomData.roomType === 1 /* SNG_ROOM */) {
                            this.reportBtn.visible = true;
                            if (this.rc.roomData.getSeatByPlayerId(this.playerId).suspicionTag === 1) {
                                this.cancelSuspicion.visible = true;
                            }
                            else {
                                this.cancelSuspicion.visible = false;
                            }
                        }
                        else {
                            this.reportBtn.visible = false;
                            this.cancelSuspicion.visible = false;
                        }
                        this.mascotBox.visible = false;
                        this.propList.visible = true;
                        this.originData = data;
                        var propArray = [];
                        if (Laya.LocalStorage.getJSON("propDatas")) {
                            propArray = Laya.LocalStorage.getJSON("propDatas");
                            for (var _i = 0, propArray_1 = propArray; _i < propArray_1.length; _i++) {
                                var prop = propArray_1[_i];
                                for (var _a = 0, _b = data.interactionItem; _a < _b.length; _a++) {
                                    var prop2 = _b[_a];
                                    if (prop.index === prop2.index) {
                                        prop = prop2;
                                    }
                                }
                            }
                        }
                        else {
                            propArray = data.interactionItem;
                        }
                        this.propDatas = propArray;
                        for (var _c = 0, propArray_2 = propArray; _c < propArray_2.length; _c++) {
                            var prop = propArray_2[_c];
                            var ss = {
                                index: prop.index,
                                costItemId: prop.costItemId,
                                costNum: prop.costNum
                            };
                            this.clickProps.push(ss);
                        }
                        this.createPropList();
                        this.updatePropDatas();
                        this.propList.mouseHandler = new Laya.Handler(this, this.onPropClick, [this.propList]);
                    }
                }
                this.reportGroupView = new HoldemPoker.ReportGroupViewUI(this.rc, this.originData);
            };
            /**
             * 取消嫌疑标志
             */
            PlayerInfoUI.prototype.onCancelSuspicion = function () {
                var _this = this;
                HoldemPoker.Sys.ui.startLoading();
                var data = {
                    roomId: this.rc.roomData.id,
                    gameId: this.rc.roomData.gameId,
                    hidePlayerId: this.originData.playerId + ""
                };
                this.cancelSuspicionRequest(data, this, function (data) {
                    HoldemPoker.Sys.ui.stopLoading();
                    HoldemPoker.MessageDialog.showWithText("隐藏成功！");
                    _this.rc.roomData.getSeatByPlayerId(_this.playerId).suspicionTag = 0;
                    _this.rc.gameUI.updateAll();
                    _this.onExit();
                });
            };
            //嫌疑标记取消请求提交
            PlayerInfoUI.prototype.cancelSuspicionRequest = function (data, caller, handler) {
                this.rc.net.sendMesage("HideAgroupOfCardRequest", data, Laya.Handler.create(caller, handler), Laya.Handler.create(this, function (data) {
                    HoldemPoker.Sys.ui.stopLoading();
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Utility.toMessageWithCode(data.codes));
                }));
            };
            /**
             * 举报伙牌
             */
            PlayerInfoUI.prototype.onReport = function () {
                if (!this.reportGroupView) {
                    this.reportGroupView = new HoldemPoker.ReportGroupViewUI(this.rc, this.originData);
                }
                this.reportGroupView.Initalize();
                this.onExit();
            };
            PlayerInfoUI.prototype.onExit = function () {
                HoldemPoker.Sys.ui.remove(this);
                this.Dispose();
            };
            /**
             * 创建互动道具列表
             */
            PlayerInfoUI.prototype.createPropList = function () {
                this.propList.itemRender = PlayerInfoPropItem;
                this.propList.selectEnable = true;
                this.propList.renderHandler = new Laya.Handler(this, this.updatePropItem);
                this.propList.hScrollBarSkin = "";
            };
            /**
             * 互动道具列表数据
             */
            PlayerInfoUI.prototype.updatePropItem = function (cell, index) {
                cell.renderData(cell.dataSource);
            };
            /**
             * 更新互动道具列表数据
             */
            PlayerInfoUI.prototype.updatePropDatas = function () {
                this.propList.array = this.propDatas;
                this.propList.refresh();
            };
            PlayerInfoUI.prototype.onPropClick = function (list, e, index) {
                if (e.type === Laya.Event.CLICK) {
                    var selectedCell = list.getCell(index);
                    if (selectedCell === e.target) {
                        var requestData = {
                            roomId: this.rc.roomData.id,
                            gameId: this.rc.roomData.gameId,
                            sitId: this.originData.sitId,
                            interactionIndex: this.propDatas[index].index,
                        };
                        var itemData = this.propDatas[index];
                        ////拼出需要的费用字符串
                        var entryStr = itemData.costItemId + ":" + itemData.costNum;
                        var applyValidError = HoldemPoker.Sys.itemMgr.itemRepository.validateEntryFee(entryStr, HoldemPoker.ApplyType.And, 0);
                        //处理微赛币和钻石的情况
                        if (applyValidError.flag === false) {
                            var errorTemplate = applyValidError.errorTemplate;
                            if (errorTemplate) {
                                if (errorTemplate.itemTempId === HoldemPoker.VirtualCurrencyType.WesaiCurrency || errorTemplate.itemTempId === HoldemPoker.VirtualCurrencyType.DiamondCurrency) {
                                    //处理快捷支付
                                    HoldemPoker.Sys.itemMgr.itemRepository.resolveQuickPay(applyValidError, function () {
                                    });
                                    return;
                                }
                            }
                        }
                        this.rc.interactionItemRequest(requestData);
                        if (this.clickProp && this.clickProp.index === this.propDatas[index].index) {
                            return;
                        }
                        else {
                            this.clickProp = this.propDatas[index];
                            for (var i = 0; i < this.clickProps.length; i++) {
                                if (this.clickProps[i].index === this.clickProp.index) {
                                    this.clickProps.splice(i, 1);
                                    this.clickProps.unshift(this.clickProp);
                                    Laya.LocalStorage.setJSON("propDatas", this.clickProps);
                                    break;
                                }
                            }
                        }
                    }
                }
            };
            /**
             * 创建吉祥物列表
             */
            PlayerInfoUI.prototype.createMascotList = function () {
                var _this = this;
                this.mascotList.itemRender = ui.mascot.mascotItemUI;
                this.mascotList.selectEnable = true;
                this.mascotList.renderHandler = new Laya.Handler(this, this.updateItem);
                this.mascotList.hScrollBarSkin = '';
                this.prevBtn.on(Laya.Event.CLICK, this, function () {
                    _this.mascotList.scrollTo(0);
                });
                this.nextBtn.on(Laya.Event.CLICK, this, function () {
                    _this.mascotList.scrollTo(_this.mascotListData.length - 1);
                });
                this.mascotList.scrollBar.on(Laya.Event.CHANGE, this, function () {
                    _this.prevBtn.visible = true;
                    _this.nextBtn.visible = true;
                    if (_this.mascotList.scrollBar.value === 0) {
                        _this.prevBtn.visible = false;
                    }
                    if (_this.mascotList.scrollBar.value === _this.mascotList.scrollBar.max || _this.mascotListData.length < 5) {
                        _this.nextBtn.visible = false;
                    }
                });
            };
            /**
             * 吉祥物列表数据
             */
            PlayerInfoUI.prototype.updateItem = function (cell, index) {
                if (cell.dataSource && cell.dataSource.imageSml) {
                    cell.mascotImage.skin = cell.dataSource.imageSml;
                }
                if (!cell.clickBtn.clickHandler) {
                    cell.clickBtn.on(Laya.Event.CLICK, this, this.onItemSelect, [cell.dataSource]);
                }
            };
            /**
             * 点击吉祥物
             * @param item
             */
            PlayerInfoUI.prototype.onItemSelect = function (item) {
                var _this = this;
                if (this.duringDress) {
                    return;
                }
                if (item && item.templateId) {
                    this.duringDress = true;
                    HoldemPoker.Sys.itemMgr.itemRepository.dressUpItem(item.templateId).then(function (result) {
                        _this.mascotData = result.item;
                        _this.resolveMascotSelect();
                        _this.animateMascotList(false);
                        _this.duringDress = false;
                    }).catch(function () {
                        _this.duringDress = false;
                    });
                }
            };
            /**
             * 选中的吉祥物的处理
             */
            PlayerInfoUI.prototype.resolveMascotSelect = function () {
                if (this.mascotData) {
                    this.selectedMascot.skin = this.mascotData.imageSml;
                }
                else {
                    this.selectedMascot.skin = '';
                }
            };
            /**
             * 点击收起|展开
             */
            PlayerInfoUI.prototype.onMascotBoxClick = function () {
                if (!this.listExpanding && !this.originData.haveMascot.some(function (id) {
                    return HoldemPoker.Sys.itemMgr.itemRepository.findOneByTemplateId(id) !== null;
                })) {
                    HoldemPoker.MessageDialog.showWithText('您没有可以装配的幸运物');
                    return;
                }
                //展开动画中
                if (this.duringToggle) {
                    return;
                }
                this.animateMascotList(!this.listExpanding);
            };
            /**
             * 吉祥物展开收起动画
             * @param right
             */
            PlayerInfoUI.prototype.animateMascotList = function (right) {
                var _this = this;
                if (right === void 0) { right = true; }
                this.duringToggle = true;
                if (right) {
                    this.updateListData();
                    this.placeHolderLabel.visible = false;
                    Laya.Tween.to(this.listBox, {
                        x: 100
                    }, 300, null, new Laya.Handler(this, function () {
                        if (_this.mascotData) {
                            _this.selectedActive.visible = true;
                        }
                        _this.duringToggle = false;
                        _this.listExpanding = true;
                    }));
                }
                else {
                    this.selectedActive.visible = false;
                    Laya.Tween.to(this.listBox, {
                        x: -this.listBox.width
                    }, 300, null, new Laya.Handler(this, function () {
                        _this.placeHolderLabel.visible = true;
                        _this.duringToggle = false;
                        _this.listExpanding = false;
                    }));
                }
            };
            /**
             * 吉祥物列表数据
             */
            PlayerInfoUI.prototype.updateListData = function () {
                var _this = this;
                this.mascotListData = [];
                //不在当前装配中的
                var tempArr = this.originData.haveMascot.filter(function (item) {
                    if (_this.mascotData) {
                        return item !== _this.mascotData.templateId;
                    }
                    else {
                        // return item !== this.originData.takeMascot;
                        return true;
                    }
                });
                //去掉null的
                tempArr.forEach(function (item) {
                    var itemModel = HoldemPoker.Sys.itemMgr.itemRepository.findOneByTemplateId(item);
                    if (itemModel) {
                        _this.mascotListData.push(itemModel);
                    }
                });
                //装配了最后一荐是卸下
                if (this.mascotData) {
                    //最后一个是卸下，推一个空的占位
                    var lastOne = new HoldemPoker.ItemModelBase();
                    lastOne.templateId = this.mascotData.templateId;
                    lastOne.imageSml = HoldemPoker.Sys.localization.getResDir('1334/item/', 'mascot-dress-down.png');
                    this.mascotListData.push(lastOne);
                }
                //最多放4个
                if (this.mascotListData.length > 4) {
                    this.listBox.width = 4 * 100;
                }
                else {
                    this.listBox.width = this.mascotListData.length * 100;
                }
                /**
                 * 收到删除推送可能
                 * 一个都没有
                 * 如果在展开状态，重置状态
                 */
                if (this.mascotListData.length === 0) {
                    this.listBox.x = 0;
                    this.placeHolderLabel.visible = true;
                    this.duringToggle = false;
                    this.listExpanding = false;
                }
                this.mascotList.array = this.mascotListData;
                this.mascotList.refresh();
            };
            /**
             * 删除通知
             * @param items
             */
            PlayerInfoUI.prototype.onMascotDelete = function (items) {
                if (this.displayedInStage) {
                    //装配了移除掉
                    if (this.mascotData) {
                        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                            var item = items_1[_i];
                            if (this.mascotData && this.mascotData.templateId === item.templateId) {
                                this.mascotData = null;
                                break;
                            }
                        }
                    }
                    //原始数据中移除被删除的
                    var tempArr = [];
                    var _loop_1 = function (tid) {
                        if (!items.some(function (item) { return item.templateId === tid; })) {
                            tempArr.push(tid);
                        }
                    };
                    for (var _a = 0, _b = this.originData.haveMascot; _a < _b.length; _a++) {
                        var tid = _b[_a];
                        _loop_1(tid);
                    }
                    //覆盖原始值
                    this.originData.haveMascot = tempArr;
                    this.resolveMascotSelect();
                    this.updateListData();
                }
            };
            return PlayerInfoUI;
        }(ui.ingame.PlayerInfoViewUI));
        HoldemPoker.PlayerInfoUI = PlayerInfoUI;
    })(HoldemPoker = wesai.HoldemPoker || (wesai.HoldemPoker = {}));
})(wesai || (wesai = {}));
//# sourceMappingURL=PlayerInfoUI.js.map