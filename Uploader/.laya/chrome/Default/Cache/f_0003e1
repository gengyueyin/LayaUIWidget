var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * @Author: dengpeng
 * @Date: 2017-04-14 19:27:49
 * @Last Modified by: mikey.zhaopeng
 * @Last Modified time: 2017-11-22 18:22:07
 */
var wesai;
(function (wesai) {
    var HoldemPoker;
    (function (HoldemPoker) {
        /**
         *
         *
         * @export
         * @class CreateMatchUI
         * @extends {ui.CreateMatchViewUI}
         * @implements {GameUIBase}
         */
        var CreateNormalMatchUI = /** @class */ (function (_super) {
            __extends(CreateNormalMatchUI, _super);
            function CreateNormalMatchUI() {
                var _this = _super.call(this) || this;
                _this.anteOption = {
                    2: [0, 1, 2],
                    4: [0, 1, 2, 4],
                    10: [0, 1, 2, 5, 10],
                    20: [0, 1, 2, 5, 10, 15, 20],
                    40: [0, 5, 10, 15, 20, 25, 30, 40],
                    50: [0, 5, 10, 15, 20, 30, 40, 50],
                    100: [0, 10, 20, 30, 40, 50, 75, 100],
                    200: [0, 20, 40, 50, 75, 100, 150, 200],
                    400: [0, 25, 50, 100, 150, 200, 300, 400],
                    600: [0, 25, 50, 100, 200, 300, 400, 600],
                    1000: [0, 50, 100, 200, 400, 600, 800, 1000],
                    2000: [0, 100, 200, 400, 800, 1200, 1600, 2000],
                };
                _this.betLevelNew = [
                    {
                        bb: "1/2",
                        chip: 200,
                        ante: [0, 1, 2]
                    },
                    {
                        bb: "2/4",
                        chip: 400,
                        ante: [0, 1, 2, 4]
                    },
                    {
                        bb: "5/10",
                        chip: 1000,
                        ante: [0, 1, 2, 5, 10]
                    },
                    {
                        bb: "10/20",
                        chip: 2000,
                        ante: [0, 2, 5, 10, 20]
                    },
                    {
                        bb: "20/40",
                        chip: 4000,
                        ante: [0, 5, 10, 20, 40]
                    },
                    {
                        bb: "25/50",
                        chip: 5000,
                        ante: [0, 5, 10, 25, 50]
                    },
                    {
                        bb: "50/100",
                        chip: 10000,
                        ante: [0, 10, 25, 50, 100]
                    },
                    {
                        bb: "100/200",
                        chip: 20000,
                        ante: [0, 25, 50, 100, 200]
                    },
                    {
                        bb: "200/400",
                        chip: 40000,
                        ante: [0, 50, 100, 200, 400]
                    },
                    {
                        bb: "300/600",
                        chip: 60000,
                        ante: [0, 75, 150, 300, 600]
                    },
                    {
                        bb: "500/1000",
                        chip: 100000,
                        ante: [0, 125, 250, 500, 1000]
                    },
                    {
                        bb: "1000/2000",
                        chip: 200000,
                        ante: [0, 250, 500, 1000, 2000]
                    }
                ];
                _this.actionCountNew = [
                    "15s",
                    "20s",
                    "30s",
                    "45s",
                    "60s",
                    "90s",
                    "120s",
                    "180s"
                ];
                _this.minOnTableTimeNew = [
                    "0min",
                    "15min",
                    "30min",
                    "45min",
                    "60min"
                ];
                _this.timeTableNew = [
                    "1h",
                    "1.5h",
                    "2h",
                    "2.5h",
                    "3h",
                    "4h",
                    "5h",
                    "6h",
                ];
                _this.peopleNew = [2, 3, 4, 5, 6, 7, 8, 9];
                _this.anteLabelArray = [_this.anteValue0, _this.anteValue1, _this.anteValue2, _this.anteValue3,
                    _this.anteValue4, _this.anteValue5, _this.anteValue6, _this.anteValue7];
                return _this;
            }
            // private insCheck:
            CreateNormalMatchUI.prototype.Initalize = function () {
                this.visible = false;
                /**
                 * 俱乐部层级在最上面，不能显示，放到open里后面去了
                 */
                //Sys.ui.push(this);
                this.viewPosY = this.y;
                this.onLanguageChanged();
                this.RegisterUIEvent();
                this.Refresh();
                this.SubmitBtn.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.createGameSubmit);
                this.NormalBBSBText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.bbSb);
                this.NormalInitialChipText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.initialChip);
                this.GameBetText.text = this.betLevelNew[0].bb;
                this.chipText.text = String(this.betLevelNew[0].chip);
                this.stackCNum = 0;
                var big = this.betLevelNew[0].chip / 100;
                this.setAnteSlider(big);
                this.sliderStackC = HoldemPoker.Sys.games.mainUIMgr.addSliderView(12, 648, [22, 50], this, this.changeStackC);
                this.sliderStackCBox.addChild(this.sliderStackC);
                this.playersNum = this.peopleNew[0];
                this.sliderPlayers = HoldemPoker.Sys.games.mainUIMgr.addSliderView(8, 648, [22, 60], this, this.changePlayers, this.peopleNew);
                this.sliderPlayersBox.addChild(this.sliderPlayers);
                this.pokerTimeNum = Number(this.timeTableNew[0].split('h')[0]);
                this.sliderPokerTime = HoldemPoker.Sys.games.mainUIMgr.addSliderView(8, 648, [22, 60], this, this.changePokerTime, this.timeTableNew);
                this.sliderPokerTimeBox.addChild(this.sliderPokerTime);
                this.actionCountNum = Number(this.actionCountNew[0].split('s')[0]);
                this.sliderActionCount = HoldemPoker.Sys.games.mainUIMgr.addSliderView(8, 648, [22, 60], this, this.changeActionCount, this.actionCountNew);
                this.actionCountBox.addChild(this.sliderActionCount);
                this.anteSlider._progress.sizeGrid = "0,23,0,23,0";
                this.minOnTableTimeNum = Number(this.minOnTableTimeNew[0].split('min')[0]);
                this.sliderMinOnTableTime = HoldemPoker.Sys.games.mainUIMgr.addSliderView(5, 648, [22, 60], this, this.changeMinOnTableTime, this.minOnTableTimeNew);
                this.minOnTableTimeBox.addChild(this.sliderMinOnTableTime);
            };
            CreateNormalMatchUI.prototype.changeStackC = function (index) {
                this.GameBetText.text = this.betLevelNew[index].bb;
                this.chipText.text = String(this.betLevelNew[index].chip);
                this.stackCNum = index;
                var big = this.betLevelNew[index].chip / 100;
                this.setAnteSlider(big);
            };
            CreateNormalMatchUI.prototype.setAnteSlider = function (value) {
                this.tickValue = this.anteOption[value];
                this.anteSlider.max = this.tickValue.length - 1;
                var unit = 580 / (this.tickValue.length - 1);
                for (var i = 0; i < this.anteLabelArray.length; i++) {
                    if (i < this.tickValue.length) {
                        this.anteLabelArray[i].visible = true;
                        this.anteLabelArray[i].x = unit * i;
                        this.anteLabelArray[i].text = this.tickValue[i] + "";
                    }
                    else {
                        this.anteLabelArray[i].visible = false;
                    }
                }
                this.anteValue = this.tickValue[this.anteSlider.value];
            };
            CreateNormalMatchUI.prototype.changePlayers = function (index) {
                var num = this.peopleNew[index];
                this.playersNum = num;
            };
            CreateNormalMatchUI.prototype.changePokerTime = function (index) {
                var num = this.timeTableNew[index].split('h');
                this.pokerTimeNum = Number(num[0]);
            };
            CreateNormalMatchUI.prototype.changeActionCount = function (index) {
                var num = this.actionCountNew[index].split('s');
                this.actionCountNum = Number(num[0]);
            };
            CreateNormalMatchUI.prototype.changeMinOnTableTime = function (index) {
                var num = this.minOnTableTimeNew[index].split('min');
                this.minOnTableTimeNum = Number(num[0]);
            };
            CreateNormalMatchUI.prototype.RegisterUIEvent = function () {
                HoldemPoker.Sys.localization.event.on(HoldemPoker.GEvent.LANGUAGE_CHANGED, this, this.onLanguageChanged);
                this.navigationBar.backBtn.on(Laya.Event.CLICK, this, this.exit);
                this.SubmitBtn.on(Laya.Event.CLICK, this, this.submit);
                this.anteSlider.on(Laya.Event.CHANGED, this, this.onSliderChanged);
            };
            CreateNormalMatchUI.prototype.onSliderChanged = function () {
                var value = this.anteSlider.value;
                this.anteSlider.value = Math.round(value);
                this.anteValue = this.tickValue[this.anteSlider.value];
            };
            CreateNormalMatchUI.prototype.UnregisterUIEvent = function () {
                HoldemPoker.Sys.localization.event.off(HoldemPoker.GEvent.LANGUAGE_CHANGED, this, this.onLanguageChanged);
                this.navigationBar.backBtn.off(Laya.Event.CLICK, this, this.exit);
                this.SubmitBtn.off(Laya.Event.CLICK, this, this.submit);
                this.anteSlider.off(Laya.Event.CHANGED, this, this.onSliderChanged);
            };
            CreateNormalMatchUI.prototype.submit = function () {
                var roomNameL = HoldemPoker.Utility.getStrLength(this.GameName.text);
                if (roomNameL > 20) {
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.matchTitleWordsLimit));
                }
                else {
                    var feeTemplateId = (this.feeRadio.selectedIndex + 1);
                    switch (this.feeRadio.selectedIndex) {
                        case 1:
                            feeTemplateId = HoldemPoker.VirtualCurrencyType.MasterCurrency;
                            break;
                        default:
                            feeTemplateId = HoldemPoker.VirtualCurrencyType.WesaiCurrency;
                            break;
                    }
                    this.createRoomData = {
                        roomType: 3,
                        roomName: this.GameName.text ? this.GameName.text : HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.defaultRoomName, HoldemPoker.Sys.players.self.name),
                        bb: parseInt(this.betLevelNew[this.stackCNum].bb.split("/")[1]),
                        bankroll: this.betLevelNew[this.stackCNum].chip,
                        joinPlayerCount: this.playersNum,
                        time: this.pokerTimeNum * 60,
                        ante: this.anteValue,
                        // thinkTime: this.actionCount[this.ActionCountSlider.value] === "无限" ? -1 : parseInt(this.actionCount["level" + this.ActionCountSlider.value].split("s")[0]),
                        thinkTime: this.actionCountNum,
                        clubId: this.clubID,
                        applyItemTemplateId: feeTemplateId,
                        insurance: this.insCheckBox.selected ? 1 : 0,
                        straddle: this.stdCheckBox.selected ? 1 : 0,
                        minOnTableTime: this.minOnTableTimeNum
                    };
                    // console.log('创建普通局数据：', this.createRoomData);
                    HoldemPoker.Sys.games.createPokerRoomRequest(this.createRoomData);
                    this.exit();
                }
                ;
            };
            CreateNormalMatchUI.prototype.onLanguageChanged = function () {
                this.navigationBar.titleLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.createNormalGame);
                this.GameName.prompt = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.gameNamePrompt);
                this.feeTypeLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.feeTypeLabel);
                this.feeRadio.labels = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.feeRadio);
                this.NormalBBSBText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.blindNote);
                this.NormalInitialChipText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.initialChip);
                this.anteNumText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.anteSet);
                this.PeopleNumText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.participation);
                this.TimeLevelText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.match_time);
                this.ActionCountText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.action_count);
                this.insuranceText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.insurance);
                this.straddleText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.forceStraddle);
                this.minOnTableTimeText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.minOnTableTimeStr);
                this.SubmitBtn.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.createGameSubmit);
            };
            CreateNormalMatchUI.prototype.exit = function () {
                var _this = this;
                //隐藏掉
                this.GameName.text = '';
                HoldemPoker.UIAnimator.Start(HoldemPoker.UIAnimator.asyncFloatDown, this, { duration: 500 }, Laya.Handler.create(this, function () {
                    _this.visible = false;
                    HoldemPoker.Sys.ui.remove(_this);
                }));
            };
            CreateNormalMatchUI.prototype.Refresh = function () {
            };
            CreateNormalMatchUI.prototype.Dispose = function () {
                this.UnregisterUIEvent();
                // Sys.ui.remove(this);
                Laya.stage.removeChild(this);
                this.offAll();
                this.destroy();
            };
            CreateNormalMatchUI.prototype.onOpen = function (clubID) {
                HoldemPoker.Sys.ui.push(this);
                if (!clubID) {
                    this.clubID = -1;
                }
                else {
                    this.clubID = clubID ? Number(clubID) : -1;
                }
                this.visible = true;
                this.y = this.viewPosY;
                HoldemPoker.UIAnimator.Start(HoldemPoker.UIAnimator.asyncFadeIn, this, { duration: 200 });
                HoldemPoker.UIAnimator.Start(HoldemPoker.UIAnimator.asyncFloatUp, this, { duration: 600, ease: Laya.Ease.cubicOut });
            };
            return CreateNormalMatchUI;
        }(ui.CreateNormalMatchViewUI));
        HoldemPoker.CreateNormalMatchUI = CreateNormalMatchUI;
    })(HoldemPoker = wesai.HoldemPoker || (wesai.HoldemPoker = {}));
})(wesai || (wesai = {}));
//# sourceMappingURL=CreateNormalMatchUI.js.map