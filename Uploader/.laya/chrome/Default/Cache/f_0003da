var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var wesai;
(function (wesai) {
    var HoldemPoker;
    (function (HoldemPoker) {
        var InsurePlayerItemUI = /** @class */ (function (_super) {
            __extends(InsurePlayerItemUI, _super);
            function InsurePlayerItemUI() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            InsurePlayerItemUI.prototype.renderItemData = function (context, data) {
                this.playerNameText.text = context.room.roomData.getSeatByPlayerId(data.playerId).playerName;
                this.holeCard0.skin = HoldemPoker.Utility.getCardName(data.handCards[0].cardNumber, data.handCards[0].cardSuit);
                this.holeCard1.skin = HoldemPoker.Utility.getCardName(data.handCards[1].cardNumber, data.handCards[1].cardSuit);
                if (data.playerId === context.insuranceData.playerId) {
                    this.stateText.color = "#f1962a";
                    this.stateText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.buyingInsurance);
                }
                else {
                    this.stateText.color = "#999999";
                    this.stateText.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.outsNum, data.outsNum);
                }
            };
            return InsurePlayerItemUI;
        }(ui.InsurePlayerItemViewUI));
        HoldemPoker.InsurePlayerItemUI = InsurePlayerItemUI;
        var InsuranceViewUI = /** @class */ (function (_super) {
            __extends(InsuranceViewUI, _super);
            function InsuranceViewUI() {
                var _this = _super.call(this) || this;
                _this.pubCards = [];
                _this.playerListData = [];
                _this.overTakeOutsListData = [];
                _this.equalOutsListData = [];
                _this.isBuy = false;
                _this.buyOutsCardNums = []; //已选outs列表
                _this.oddsMap = {}; //赔率配置表
                _this.allOutsNum = 0; //总outs数
                _this.buyAmouts = 0; //投保额
                _this.autoBuyValue = 0; //自动投保额
                _this.oddsValue = 0; //赔付额
                HoldemPoker.Sys.ui.push(_this);
                _this.visible = false;
                _this.onLanguageChanged();
                _this.RegisterUIEvent();
                _this.initList();
                _this.pubCards = [_this.flop1, _this.flop2, _this.flop3, _this.turn, _this.river];
                return _this;
            }
            /**
             *
             * 创建界面
             * 主要是创建对象
             *
             * @memberOf GameUI
             */
            InsuranceViewUI.prototype.Initalize = function (rc) {
                this.initListData();
                this.room = rc;
                this.playerData = HoldemPoker.Sys.players.self;
                this.insuranceData = rc.roomData.gameData.insuranceData;
                if (this.room.insTime && this.room.insTime > 0) {
                    var time = new Date().getTime();
                    this.insuranceData.restThinkTime = this.insuranceData.restThinkTime - (Math.floor(time / 1000) - Math.ceil(this.room.insTime / 1000));
                }
                this.allOutsNum = this.insuranceData.overtakeOutsCards.length + this.insuranceData.equalOutsCards.length;
                this.updateThinkTime();
                this.initPlayerView(this.playerData.id === this.insuranceData.playerId);
                this.initPlayerListData();
                this.initOutsListData();
                this.Refresh();
                this.isBuy = false;
            };
            InsuranceViewUI.prototype.initListData = function () {
                this.buyOutsCardNums = [];
                this.playerListData = [];
                this.overTakeOutsListData = [];
                this.equalOutsListData = [];
                this.oddsMap = {};
            };
            InsuranceViewUI.prototype.RegisterUIEvent = function () {
                this.selectedAllCheckBox.on(Laya.Event.CLICK, this, this.onSelectAllChange);
                // this.selectedAllCheckBox.on(Laya.Event.CHANGE, this, this.onSelectAllChange);
                this.cancelBtn.on(Laya.Event.CLICK, this, this.onCancel);
                this.buyInsuranceBtn.on(Laya.Event.CLICK, this, this.buyInsurance);
                this.resetTimeImg.on(Laya.Event.CLICK, this, this.resetThinkTime);
                this.insureTypeRadio.on(Laya.Event.CLICK, this, this.onRadioTypeChange);
            };
            InsuranceViewUI.prototype.UnregisterUIEvent = function () {
                this.offAll();
            };
            /**
             * 多语言切换
             * event：Localization.Event_LanguageChanged
             */
            InsuranceViewUI.prototype.onLanguageChanged = function () {
                this.resetTimeImg.skin = HoldemPoker.Sys.localization.getResDir("1334/ingame/", "time_reset.png");
                this.potText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.pot);
                this.titleText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.insurance);
                this.countDownText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.countDownTime);
                this.pubPokerText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.pubPoker);
                this.selectedText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.selected);
                this.selectedAllCheckBox.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.allSelected);
                this.surpassText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.surpass);
                this.equalText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.equal);
                this.equalOutsLimitTips.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.equalTooMuchToBuy);
                this.insuredValueText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.insuredValueText);
                this.insureTypeRadio.labels = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.insureTypeRadio);
                this.payoutsText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.payoutsText);
                this.potValueText.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.potValue);
                this.cancelBtn.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.cancel);
                this.buyInsuranceBtn.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.buyInsurance);
                this.bottomTip.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.insuranceBottomTip);
            };
            /**
             *
             * 刷新界面，坐标，长宽和图片啥的
             * 比如横屏竖屏切换，刷新语言啥的
             *
             * @abstract
             *
             * @memberOf GameUIBase
             */
            InsuranceViewUI.prototype.Refresh = function () {
                this.initTimer();
                this.setThinkTimeRes();
                this.insurancePotText.text = this.insuranceData.insurPot + "";
                this.pondInText.text = this.insuranceData.playerInPool + "";
                this.insureTypeRadio.selectedIndex = -1;
                this.payValue.text = "0";
                this.initSlider();
                this.renderPlayerList();
                this.renderOutsList();
                this.updatePubCards();
                this.getOddsRange();
                this.setAllOuts(true);
            };
            //退出弹窗时清除倒计时
            InsuranceViewUI.prototype.clearTimer = function () {
                Laya.timer.clear(this, this.updateCountdownTime);
            };
            InsuranceViewUI.prototype.initTimer = function () {
                Laya.Tween.clearAll(this);
                this.countTime = this.insuranceData.restThinkTime;
                this.progressBar.value = 1;
                Laya.timer.loop(1000, this, this.updateCountdownTime);
                Laya.Tween.to(this.progressBar, { value: 0 }, this.insuranceData.restThinkTime * 1000, Laya.Ease.linearNone);
            };
            InsuranceViewUI.prototype.updateCountdownTime = function () {
                if (this.insuranceData.restThinkTime > 0) {
                    this.insuranceData.restThinkTime--;
                    this.downTime.text = this.insuranceData.restThinkTime + "s";
                }
                else {
                    this.clearTimer();
                    this.Exit();
                }
            };
            InsuranceViewUI.prototype.setThinkTimeRes = function () {
                this.resetTimeIcon.skin = HoldemPoker.Sys.itemMgr.itemRepository.getItemIcon(this.insuranceData.resetTimeItemId);
                var count = "";
                if (this.insuranceData.resetTimeCostCount > 0) {
                    count = this.insuranceData.resetTimeCostCount + "";
                }
                this.resetTimeCost.text = count;
                this.downTime.text = this.insuranceData.resetTime + "s";
            };
            InsuranceViewUI.prototype.updateThinkTime = function (data) {
                var itemId;
                var resetCount;
                var thinkTime;
                var canReset;
                var count = "";
                if (data) {
                    itemId = data.resetTimeItemId;
                    resetCount = data.resetTimeCostCount;
                    thinkTime = data.restThinkTime;
                    canReset = data.canReset;
                }
                else {
                    itemId = this.insuranceData.resetTimeItemId;
                    resetCount = this.insuranceData.resetTimeCostCount;
                    thinkTime = this.insuranceData.restThinkTime;
                    canReset = this.insuranceData.resetTimeCostCount > 0;
                }
                this.resetTimeItemId = itemId;
                this.resetTimeCostCount = resetCount;
                if (resetCount > 0) {
                    count = resetCount + "";
                }
                this.resetTimeIcon.skin = HoldemPoker.Sys.itemMgr.itemRepository.getItemIcon(itemId);
                this.resetTimeCost.text = count;
                this.downTime.text = thinkTime + "s";
                this.insuranceData.restThinkTime = thinkTime;
                if (!canReset) {
                    this.resetTimeImg.filters = [HoldemPoker.Utility.grayFilter()];
                    this.resetTimeImg.mouseEnabled = false;
                }
                else {
                    this.resetTimeImg.filters = null;
                    this.resetTimeImg.mouseEnabled = true;
                }
                this.initTimer();
            };
            /**
             * 根据角色初始化界面
             * @private
             * @param {boolean} isBuyer
             * @memberof InsuranceViewUI
             */
            InsuranceViewUI.prototype.initPlayerView = function (isBuyer) {
                this.selectedAllCheckBox.visible = isBuyer;
                this.resetTimeImg.visible = isBuyer;
                this.insureTypeRadio.visible = isBuyer;
                this.pondInText.visible = isBuyer;
                this.bottomBox.visible = isBuyer;
                this.bottomTip.visible = !isBuyer;
                this.sliderBar.mouseEnabled = isBuyer;
                this.sliderBar.visible = isBuyer;
                if (isBuyer) {
                    this.selectedAllCheckBox.filters = this.insuranceData.mustBuyAllOuts ? [HoldemPoker.Utility.grayFilter()] : null;
                    this.selectedAllCheckBox.mouseEnabled = !this.insuranceData.mustBuyAllOuts;
                    this.cancelBtn.filters = this.insuranceData.mustBuyAllOuts ? [HoldemPoker.Utility.grayFilter()] : null;
                    this.cancelBtn.mouseEnabled = !this.insuranceData.mustBuyAllOuts;
                }
            };
            /**
             * 初始化列表List
             * 入池玩家列表和outs列表
             * @private
             * @memberof InsuranceViewUI
             */
            InsuranceViewUI.prototype.initList = function () {
                this.insurePlayerList.array = this.playerListData;
                this.insurePlayerList.itemRender = InsurePlayerItemUI;
                this.insurePlayerList.repeatX = 4;
                this.insurePlayerList.repeatY = 1;
                this.insurePlayerList.renderHandler = new Laya.Handler(this, this.updateItem);
                this.insurePlayerList.refresh();
                this.overTakeList.array = this.overTakeOutsListData;
                this.overTakeList.itemRender = ui.OutsCardItemViewUI;
                this.overTakeList.selectEnable = true;
                this.overTakeList.renderHandler = new Laya.Handler(this, this.updateOutsItem);
                this.overTakeList.mouseHandler = new Laya.Handler(this, this.onMouse, [this.overTakeList]);
                this.overTakeList.refresh();
                this.equalOutsList.array = this.equalOutsListData;
                this.equalOutsList.itemRender = ui.OutsCardItemViewUI;
                this.equalOutsList.selectEnable = true;
                this.equalOutsList.renderHandler = new Laya.Handler(this, this.updateOutsItem);
                this.equalOutsList.mouseHandler = new Laya.Handler(this, this.onMouse, [this.equalOutsList]);
                this.equalOutsList.refresh();
            };
            InsuranceViewUI.prototype.renderPlayerList = function () {
                this.insurePlayerList.array = this.playerListData;
                this.insurePlayerList.refresh();
            };
            InsuranceViewUI.prototype.renderOutsList = function () {
                this.layoutOutsPanal();
                this.overTakeList.array = this.overTakeOutsListData;
                this.overTakeList.refresh();
                this.equalOutsList.array = this.equalOutsListData;
                this.equalOutsList.refresh();
            };
            InsuranceViewUI.prototype.initSlider = function () {
                // this.sliderBar.setSlider(this.insuranceData.buyAmountMin, this.insuranceData.buyAmountMax, 0);
                this.sliderBar.min = this.insuranceData.buyAmountMin;
                this.sliderBar.max = this.insuranceData.buyAmountMax;
                this.sliderBar.tick = this.room.roomData.gameData.sb;
                this.sliderBar.changeHandler = new Laya.Handler(this, this.onSliderChange);
                this.sliderBar.on(Laya.Event.CHANGED, this, this.onSliderChanged);
                this.isRadioClick = true;
                if (this.insuranceData.mustBuyAllOuts) {
                    this.sliderBar.value = this.insuranceData.buyAmountMin;
                    this.buyAmouts = this.insuranceData.buyAmountMin;
                }
                else {
                    this.sliderBar.value = 0;
                    this.buyAmouts = 0;
                }
                this.buyAmouts = Math.ceil(this.buyAmouts);
                this.insureValue.text = this.buyAmouts + "";
                // (<any>this.sliderBar).setprogressSizeGrid("0,23,0,23,0");
                this.sliderBar._progress.sizeGrid = "0,23,0,23,0";
            };
            /**
             * 入池玩家同步显示购买保险玩家的操作
             * @param {msg.OptionBroadCastResponse} option
             * @returns
             * @memberof InsuranceViewUI
             */
            InsuranceViewUI.prototype.updateOption = function (option) {
                if (this.insuranceData.playerId === this.playerData.id) {
                    return;
                }
                switch (option.option) {
                    case HoldemPoker.msg.InsuranceOption.BuyAmount:
                        // this.sliderBar.value = option.buyAmount;
                        this.buyAmouts = option.buyAmount;
                        this.buyAmouts = Math.ceil(this.buyAmouts);
                        this.insureValue.text = this.buyAmouts + "";
                        this.updateOddsPerform();
                        break;
                    case HoldemPoker.msg.InsuranceOption.SelectAll:
                        this.buyAmouts = 0;
                        this.setAllOuts(true);
                        this.resetSlider();
                        break;
                    case HoldemPoker.msg.InsuranceOption.SelectOuts:
                        this.setOuts(option.outsCardNum, true);
                        break;
                    case HoldemPoker.msg.InsuranceOption.UnSelectAll:
                        this.buyAmouts = 0;
                        this.setAllOuts(false);
                        this.resetSlider();
                        break;
                    case HoldemPoker.msg.InsuranceOption.UnSelectOuts:
                        this.setOuts(option.outsCardNum, false);
                        break;
                }
            };
            /**
             * 重新布局out列表
             * @private
             * @memberof InsuranceViewUI
             */
            InsuranceViewUI.prototype.layoutOutsPanal = function () {
                var lineNum = Math.ceil(this.overTakeOutsListData.length / 6);
                if (lineNum <= 0) {
                    lineNum = 1;
                }
                if (this.overTakeOutsListData.length <= 0) {
                    this.overTakeBox.visible = false;
                    this.overTakeBox.height = 0;
                    this.equalBox.pos(0, 16);
                }
                else {
                    this.overTakeBox.visible = true;
                    this.overTakeList.repeatX = 6;
                    this.overTakeList.repeatY = lineNum;
                    this.overTakeBox.height = 116 * lineNum;
                    this.equalBox.pos(0, 16 + 116 * lineNum);
                    // if (this.insuranceData.equalOutsLimit) {
                    this.equalOutsLimitTips.visible = this.insuranceData.equalOutsLimit;
                    this.equalOutsLimitTips.pos(74, 16 + 116 * lineNum);
                    // }
                }
                var lineNum1 = Math.ceil(this.equalOutsListData.length / 6);
                if (lineNum1 <= 0) {
                    lineNum1 = 1;
                }
                if (this.equalOutsListData.length <= 0) {
                    this.equalBox.visible = false;
                    this.equalBox.height = 0;
                }
                else {
                    this.equalBox.visible = true;
                    this.equalOutsList.repeatX = 6;
                    this.equalOutsList.repeatY = lineNum1;
                    this.equalBox.height = 116 * lineNum1;
                }
                this.outsPanel.scrollTo(0, 0);
                this.outsPanel.refresh();
            };
            /**
             * 渲染公牌展示
             * @private
             * @returns
             * @memberof InsuranceViewUI
             */
            InsuranceViewUI.prototype.updatePubCards = function () {
                var cards = this.room.roomData.gameData.boardCards;
                if (cards === null || cards === undefined || cards.length === 0) {
                    console.log("保险：公牌数据为空！！！");
                    return;
                }
                for (var i = 0; i < cards.length; i++) {
                    var cardName = HoldemPoker.Utility.getCardName(cards[i].cardNumber, cards[i].cardSuit);
                    this.pubCards[i].skin = cardName;
                }
                if (cards.length === 4) {
                    this.river.visible = true;
                    this.river.skin = HoldemPoker.Utility.getCardBackSkin();
                }
                else if (cards.length === 3) {
                    this.river.visible = false;
                    this.turn.visible = true;
                    this.turn.skin = HoldemPoker.Utility.getCardBackSkin();
                }
            };
            /**
             * 渲染入池玩家列表item
             * @private
             * @param {InsurePlayerItemUI} cell
             * @param {number} index
             * @memberof InsuranceViewUI
             */
            InsuranceViewUI.prototype.updateItem = function (cell, index) {
                cell.renderItemData(this, cell.dataSource);
            };
            /**
             * 渲染out列表 item
             * @private
             * @param {ui.OutsCardItemViewUI} cell
             * @param {number} index
             * @memberof InsuranceViewUI
             */
            InsuranceViewUI.prototype.updateOutsItem = function (cell, index) {
                var cellData = cell.dataSource;
                cell.outsCard.skin = HoldemPoker.Utility.getCardName(cellData.card.cardNumber, cellData.card.cardSuit);
                cell.outSelected.visible = cellData.isSelected;
            };
            /**
             * 结算赔率 并且计算赔付额
             * 选择outs改变时或者投保额改变时，计算自动投保额
             */
            InsuranceViewUI.prototype.updateOddsPerform = function () {
                var outsNum = this.buyOutsCardNums.length;
                var laseOutsNum = this.allOutsNum - outsNum;
                if (outsNum === 0) {
                    this.oddsText.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.oddsValue, 0);
                }
                else {
                    this.oddsText.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.oddsValue, this.oddsMap[outsNum]);
                }
                this.selectedCardNum.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.zhang, outsNum);
                if (laseOutsNum > 0 && outsNum > 0 && this.buyAmouts > 0) {
                    this.autoBuyValue = Math.ceil(this.buyAmouts / parseFloat(this.oddsMap[laseOutsNum]));
                    this.autoInsuranceTip.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.autoInsuranceTip, laseOutsNum, this.oddsMap[laseOutsNum], this.autoBuyValue);
                }
                else {
                    this.autoBuyValue = 0;
                    this.autoInsuranceTip.text = "";
                }
                this.selectedAllCheckBox.selected = this.buyOutsCardNums.length === this.allOutsNum;
                if (Math.floor(this.insuranceData.insurPot / parseFloat(this.oddsMap[outsNum])) < (this.insuranceData.buyAmountMax - this.autoBuyValue)) {
                    this.maxInsuraValue = Math.floor(this.insuranceData.insurPot / parseFloat(this.oddsMap[outsNum]));
                    // console.log("max:" + this.maxInsuraValue);
                }
                else {
                    this.maxInsuraValue = Math.floor(this.insuranceData.buyAmountMax - this.autoBuyValue);
                    // console.log("max2:" + this.maxInsuraValue);
                }
                this.sliderBar.max = this.maxInsuraValue;
                if (this.maxInsuraValue === 0) {
                    this.sliderBar.min = 0;
                }
                else {
                    this.sliderBar.min = this.insuranceData.buyAmountMin;
                }
                if (outsNum <= 0 || this.maxInsuraValue === 0) {
                    this.sliderBar.mouseEnabled = false;
                    this.buyInsuranceBtn.filters = [HoldemPoker.Utility.grayFilter()];
                    this.buyInsuranceBtn.mouseEnabled = false;
                }
                else {
                    this.sliderBar.mouseEnabled = true;
                    this.buyInsuranceBtn.filters = null;
                    this.buyInsuranceBtn.mouseEnabled = true;
                }
                // console.log(this.buyAmouts + "-" + this.buyOutsCardNums.length + "-" + this.oddsMap[this.buyOutsCardNums.length]);
                this.oddsValue = Math.floor(this.buyAmouts * parseFloat(this.oddsMap[this.buyOutsCardNums.length]));
                this.payValue.text = this.oddsValue + "";
                if (this.buyAmouts <= 0) {
                    this.buyInsuranceBtn.filters = [HoldemPoker.Utility.grayFilter()];
                    this.buyInsuranceBtn.mouseEnabled = false;
                }
                else {
                    this.buyInsuranceBtn.filters = null;
                    this.buyInsuranceBtn.mouseEnabled = true;
                }
                if (this.buyOutsCardNums.length <= 0) {
                    this.insureTypeRadio.filters = [HoldemPoker.Utility.grayFilter()];
                    this.insureTypeRadio.mouseEnabled = false;
                }
                else {
                    this.insureTypeRadio.filters = null;
                    this.insureTypeRadio.mouseEnabled = true;
                }
            };
            InsuranceViewUI.prototype.resetSlider = function () {
                this.sliderBar.value = 0;
                this.insureTypeRadio.selectedIndex = -1;
                this.buyAmouts = 0;
                this.insureValue.text = this.buyAmouts + "";
                this.payValue.text = "0";
                this.autoInsuranceTip.text = "";
                if (this.buyAmouts <= 0) {
                    this.buyInsuranceBtn.filters = [HoldemPoker.Utility.grayFilter()];
                    this.buyInsuranceBtn.mouseEnabled = false;
                }
                else {
                    this.buyInsuranceBtn.filters = null;
                    this.buyInsuranceBtn.mouseEnabled = true;
                }
            };
            /**
             * 获取赔率范围
             */
            InsuranceViewUI.prototype.getOddsRange = function () {
                this.oddsMap = {};
                var maxOdds, minOdds;
                var outsCount = this.insuranceData.overtakeOutsCards.length + this.equalOutsList.length;
                for (var _i = 0, _a = this.insuranceData.odds; _i < _a.length; _i++) {
                    var odds = _a[_i];
                    var oddString = odds.odds;
                    if (parseInt(odds.odds) === parseFloat(odds.odds)) {
                        oddString = parseInt(odds.odds).toString();
                    }
                    this.oddsMap[odds.cardCount] = oddString;
                    if (odds.cardCount === 1) {
                        maxOdds = odds.odds;
                    }
                }
                this.oddsMap[0] = 0;
            };
            /**
             * 全选监听
             * @private
             * @memberof InsuranceViewUI
             */
            InsuranceViewUI.prototype.onSelectAllChange = function () {
                // console.log(this.selectedAllCheckBox.selected);
                if (this.selectedAllCheckBox.selected) {
                    this.room.sendOption(HoldemPoker.msg.InsuranceOption.SelectAll);
                }
                else {
                    this.room.sendOption(HoldemPoker.msg.InsuranceOption.UnSelectAll);
                }
                this.buyAmouts = 0;
                this.setAllOuts(this.selectedAllCheckBox.selected);
                this.resetSlider();
                this.insureTypeRadio.selectedIndex = -1;
            };
            InsuranceViewUI.prototype.onRadioTypeChange = function () {
                this.isRadioClick = true;
                var odds = parseFloat(this.oddsMap[this.buyOutsCardNums.length]);
                if (this.insureTypeRadio.selectedIndex === 0) {
                    this.buyAmouts = Math.ceil(this.insuranceData.playerInPool / odds);
                    if (this.buyAmouts > this.maxInsuraValue) {
                        this.buyAmouts = this.maxInsuraValue;
                    }
                    this.updateOddsPerform();
                }
                else if (this.insureTypeRadio.selectedIndex === 1) {
                    this.buyAmouts = this.insuranceData.insurPot / (odds + 1);
                    this.buyAmouts = Math.ceil(this.buyAmouts);
                    if (this.buyAmouts > this.maxInsuraValue) {
                        this.buyAmouts = this.maxInsuraValue;
                    }
                    this.updateOddsPerform();
                }
                this.sliderBar.value = this.buyAmouts;
                this.buyAmouts = Math.ceil(this.buyAmouts);
                this.insureValue.text = this.buyAmouts + "";
                this.room.sendOption(HoldemPoker.msg.InsuranceOption.BuyAmount, null, this.buyAmouts);
            };
            InsuranceViewUI.prototype.setOuts = function (outsCardNum, isSelected) {
                if (outsCardNum > this.overTakeOutsListData.length) {
                    this.equalOutsListData[outsCardNum - this.overTakeOutsListData.length - 1].isSelected = isSelected;
                }
                else {
                    this.overTakeOutsListData[outsCardNum - 1].isSelected = isSelected;
                }
                if (isSelected) {
                    this.buyOutsCardNums.push(outsCardNum);
                }
                else {
                    this.buyOutsCardNums.splice(this.buyOutsCardNums.indexOf(outsCardNum), 1);
                }
                this.buyAmouts = 0;
                this.updateOddsPerform();
                this.resetSlider();
                this.renderOutsList();
            };
            InsuranceViewUI.prototype.setAllOuts = function (isSelected) {
                var _this = this;
                this.buyOutsCardNums = [];
                this.overTakeOutsListData.forEach(function (element) {
                    element.isSelected = isSelected;
                    if (isSelected) {
                        _this.buyOutsCardNums.push(element.index);
                    }
                });
                this.equalOutsListData.forEach(function (element) {
                    element.isSelected = isSelected;
                    if (isSelected) {
                        _this.buyOutsCardNums.push(element.index);
                    }
                });
                this.updateOddsPerform();
                this.renderOutsList();
            };
            /**
             * 初始化入池玩家列表数据
             * @private
             * @memberof InsuranceViewUI
             */
            InsuranceViewUI.prototype.initPlayerListData = function () {
                var buyPlayer = {
                    playerId: this.insuranceData.playerId,
                    sitId: null,
                    outsNum: null,
                    handCards: this.insuranceData.buyerHandCards
                };
                this.playerListData = [];
                this.playerListData.push(buyPlayer);
                this.insuranceData.inPoolPlayer.sort(function (a, b) { return b.outsNum - a.outsNum; });
                for (var _i = 0, _a = this.insuranceData.inPoolPlayer; _i < _a.length; _i++) {
                    var player = _a[_i];
                    this.playerListData.push(player);
                }
            };
            /**
             * 初始化outs 列表数据
             * @private
             * @memberof InsuranceViewUI
             */
            InsuranceViewUI.prototype.initOutsListData = function () {
                this.overTakeOutsListData = [];
                this.equalOutsListData = [];
                this.buyOutsCardNums = [];
                for (var i = 0; i < this.insuranceData.overtakeOutsCards.length; i++) {
                    var outsData = {
                        card: this.insuranceData.overtakeOutsCards[i],
                        index: i + 1,
                        isSelected: false,
                        type: HoldemPoker.OutsType.OVER_TAKE
                    };
                    this.overTakeOutsListData.push(outsData);
                }
                for (var i = 0; i < this.insuranceData.equalOutsCards.length; i++) {
                    var outsData = {
                        card: this.insuranceData.equalOutsCards[i],
                        index: this.insuranceData.overtakeOutsCards.length + i + 1,
                        isSelected: false,
                        type: HoldemPoker.OutsType.EQUAL
                    };
                    this.equalOutsListData.push(outsData);
                }
            };
            InsuranceViewUI.prototype.onSliderChanged = function () {
                // console.log("滑块的位置：" + this.sliderBar.value);
                if (Math.abs(this.sliderBar.value - this.insuranceData.buyAmountMin) < this.sliderBar.tick) {
                    this.buyAmouts = this.insuranceData.buyAmountMin;
                }
                else {
                    this.buyAmouts = this.sliderBar.value;
                }
                if (this.buyAmouts > this.maxInsuraValue) {
                    this.buyAmouts = this.maxInsuraValue;
                }
                this.buyAmouts = Math.ceil(this.buyAmouts);
                this.insureValue.text = this.buyAmouts + "";
                this.insureTypeRadio.selectedIndex = -1;
                this.room.sendOption(HoldemPoker.msg.InsuranceOption.BuyAmount, null, this.buyAmouts);
                this.updateOddsPerform();
            };
            InsuranceViewUI.prototype.onSliderChange = function () {
                if (this.isRadioClick) {
                    this.isRadioClick = false;
                    return;
                }
                // console.log("滑块的位置onSliderChange：" + this.sliderBar.value);
                if (Math.abs(this.sliderBar.value - this.insuranceData.buyAmountMin) < this.sliderBar.tick) {
                    this.buyAmouts = this.insuranceData.buyAmountMin;
                }
                else {
                    this.buyAmouts = this.sliderBar.value;
                }
                if (this.buyAmouts > this.maxInsuraValue) {
                    this.buyAmouts = this.maxInsuraValue;
                }
                this.buyAmouts = Math.ceil(this.buyAmouts);
                this.insureValue.text = this.buyAmouts + "";
                this.updateOddsPerform();
            };
            InsuranceViewUI.prototype.onMouse = function (list, e, index) {
                if (e.type === Laya.Event.CLICK) {
                    var selectedData = list.getCell(index);
                    var cellData = selectedData.dataSource;
                    if (e.target === selectedData && this.playerData.id === this.insuranceData.playerId && !this.insuranceData.mustBuyAllOuts) {
                        // console.log("点击outs第" + index + "张牌");
                        var selectedTag = selectedData.getChildByName("outSelected");
                        if (cellData.isSelected) {
                            selectedTag.visible = false;
                            cellData.isSelected = false;
                            this.room.sendOption(HoldemPoker.msg.InsuranceOption.UnSelectOuts, cellData.index);
                            this.buyOutsCardNums.splice(this.buyOutsCardNums.indexOf(cellData.index), 1);
                        }
                        else {
                            selectedTag.visible = true;
                            cellData.isSelected = true;
                            this.room.sendOption(HoldemPoker.msg.InsuranceOption.SelectOuts, cellData.index);
                            this.buyOutsCardNums.push(cellData.index);
                        }
                        this.insureTypeRadio.selectedIndex = -1;
                        this.buyAmouts = 0;
                        this.updateOddsPerform();
                        this.resetSlider();
                    }
                }
            };
            InsuranceViewUI.prototype.resetThinkTime = function () {
                //拼出需要的费用字符串
                var entryStr = this.resetTimeItemId + ":" + this.resetTimeCostCount;
                //验证费用
                var applyValidError = HoldemPoker.Sys.itemMgr.itemRepository.validateEntryFee(entryStr, HoldemPoker.ApplyType.And, 0);
                //只处理微赛币和钻石的情况
                if (applyValidError.flag === false) {
                    var errorTemplate = applyValidError.errorTemplate;
                    if (errorTemplate) {
                        if (errorTemplate.itemTempId === HoldemPoker.VirtualCurrencyType.WesaiCurrency || errorTemplate.itemTempId === HoldemPoker.VirtualCurrencyType.DiamondCurrency) {
                            //处理快捷支付
                            HoldemPoker.Sys.itemMgr.itemRepository.resolveQuickPay(applyValidError, function () {
                            });
                            return;
                        }
                    }
                }
                this.room.resetdowntime(this.room.roomData.id);
            };
            InsuranceViewUI.prototype.buyInsurance = function () {
                if (this.isBuy) {
                    return;
                }
                this.isBuy = true;
                if (this.buyOutsCardNums.length > 0) {
                    this.room.go(HoldemPoker.PlayState.WaitingState);
                    this.room.buyInsurance(this.buyAmouts, this.buyOutsCardNums);
                }
                else {
                }
            };
            InsuranceViewUI.prototype.onCancel = function () {
                this.room.UnbuyInsurance();
                this.Exit();
            };
            InsuranceViewUI.prototype.Exit = function () {
                this.clearTimer();
                this.visible = false;
            };
            /**
             *
             * 销毁界面
             *
             * @memberOf GameUI
             */
            InsuranceViewUI.prototype.Dispose = function () {
                this.removeSelf();
                this.UnregisterUIEvent();
            };
            return InsuranceViewUI;
        }(ui.InsuranceDialogViewUI));
        HoldemPoker.InsuranceViewUI = InsuranceViewUI;
    })(HoldemPoker = wesai.HoldemPoker || (wesai.HoldemPoker = {}));
})(wesai || (wesai = {}));
//# sourceMappingURL=InsuranceViewUI.js.map