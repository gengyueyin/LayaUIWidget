var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/*
 * @Author: devilsome.曾挚
 * @Date: 2017-02-15 17:54:55
 * @Last Modified by: wesai.谢久伟
 * @Last Modified time: 2017-12-14 14:01:18
 *
 * 处理游戏的登录状态
 */
var wesai;
(function (wesai) {
    var HoldemPoker;
    (function (HoldemPoker) {
        HoldemPoker.CREDIT_SCORE_CHANGE = 'CREDIT_SCORE_CHANGE';
        HoldemPoker.CLUB_STATE_CHANGE = 'CLUB_STATE_CHANGE';
        HoldemPoker.CLUB_UPDATE = "CLUB_UPDATE";
        var ClubMgr = /** @class */ (function (_super) {
            __extends(ClubMgr, _super);
            function ClubMgr() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ClubMgr.prototype.Initalize = function () {
                this.registerEvent();
            };
            ClubMgr.prototype.LoadFromRes = function () {
            };
            /**
             * 发送请求
             * @param requestStr
             * @param requestData
             * @param context
             * @returns {Promise<T>|Promise}
             */
            ClubMgr.prototype.sendRequest = function (requestStr, requestData, showLoading, context) {
                if (showLoading === void 0) { showLoading = false; }
                return __awaiter(this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        if (showLoading) {
                            HoldemPoker.Sys.ui.startLoading('', 1);
                        }
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                context = context === undefined ? _this : context;
                                HoldemPoker.Sys.net.sendMesage(requestStr, requestData, Laya.Handler.create(context, function (successResult) {
                                    HoldemPoker.Sys.ui.stopLoading();
                                    resolve(successResult);
                                }), Laya.Handler.create(context, function (failResult) {
                                    HoldemPoker.Sys.ui.stopLoading();
                                    //有错误码直接打印出来
                                    if (failResult && failResult.codes) {
                                        //未找到俱尔部都统一跳，俱乐部列表页
                                        if (failResult.codes === HoldemPoker.msg.Codes.ErrClubNotFind && HoldemPoker.ClubScene.inClubState === true) {
                                            HoldemPoker.Sys.clubFsm.back();
                                        }
                                        else {
                                            if (HoldemPoker.Utility.toMessageWithCode(failResult.codes)) {
                                                HoldemPoker.MessageDialog.showWithText(HoldemPoker.Utility.toMessageWithCode(failResult.codes));
                                                reject();
                                            }
                                            else {
                                                reject(failResult);
                                            }
                                        }
                                    }
                                    else {
                                        //其它错误放到，各个请求内部处理
                                        reject(failResult);
                                    }
                                }));
                            })];
                    });
                });
            };
            // 创建俱乐部
            ClubMgr.prototype.create = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('ClubCreateRequest', requestData).then(function (result) {
                                return result;
                            }).catch(function (error) {
                                // MessageDialog.showWithText(Utility.toMessageWithCode(error.codes));
                                return Promise.reject(error);
                            })];
                    });
                });
            };
            // 删除俱乐部
            ClubMgr.prototype.removeClub = function (requestData) {
                return this.sendRequest('DissolutionClubRequest', requestData);
            };
            // 俱乐部详情
            ClubMgr.prototype.getClubById = function (id) {
                return __awaiter(this, void 0, void 0, function () {
                    var allClubs, clubs, e_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.getClubs({ clubIds: String(id) })];
                            case 1:
                                allClubs = _a.sent();
                                if (allClubs.length) {
                                    clubs = allClubs.filter(function (item) { return item.id === id; });
                                    if (clubs.length) {
                                        HoldemPoker.Sys.clubStore.self.club = clubs[0];
                                        return [2 /*return*/, HoldemPoker.Sys.clubStore.self.club];
                                    }
                                    else {
                                        return [2 /*return*/, null];
                                    }
                                }
                                return [2 /*return*/, null];
                            case 2:
                                e_1 = _a.sent();
                                return [2 /*return*/, Promise.reject(e_1)];
                            case 3: return [2 /*return*/];
                        }
                    });
                });
            };
            // 俱乐部列表
            ClubMgr.prototype.getClubs = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    var result, error_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.sendRequest('ClubSearchRequest', requestData)];
                            case 1:
                                result = _a.sent();
                                return [2 /*return*/, result.club ? result.club : []];
                            case 2:
                                error_1 = _a.sent();
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                });
            };
            // 俱乐部列表
            ClubMgr.prototype.getClubsList = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    var result, error_2;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.sendRequest('ClubSearchRequest', requestData)];
                            case 1:
                                result = _a.sent();
                                return [2 /*return*/, result];
                            case 2:
                                error_2 = _a.sent();
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                });
            };
            /**
             * 是否可创建俱乐部
             * @returns {Promise<boolean>}
             */
            ClubMgr.prototype.canCreateClub = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var clubsMax, allClubs, createdClubs, e_2;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                clubsMax = HoldemPoker.Sys.players.self.settingsObject.modules.clubsMax;
                                return [4 /*yield*/, this.getClubs({})];
                            case 1:
                                allClubs = _a.sent();
                                createdClubs = allClubs.filter(function (item) { return item.presidentId === HoldemPoker.Sys.players.self.id; });
                                HoldemPoker.Sys.clubStore.self.clubCount = createdClubs.length;
                                return [2 /*return*/, createdClubs.length < clubsMax];
                            case 2:
                                e_2 = _a.sent();
                                return [2 /*return*/, false];
                            case 3: return [2 /*return*/];
                        }
                    });
                });
            };
            // // 搜索列表
            // public getSearchClubs(requestData: msg.ClubSearchRequest): Promise<any> {
            //     return this.sendRequest('ClubSearchRequest', requestData).then((result) => {
            //         Sys.clubStore.self.searchResults = result.club;
            //     }).catch((error) => {
            //         MessageDialog.showWithText(Utility.toMessageWithCode(error.codes));
            //     });
            // }
            // 修改信息
            ClubMgr.prototype.updateClub = function (requestData) {
                return this.sendRequest('ClubUpdateRequest', requestData).then(function (result) {
                    // Sys.clubStore.self.club = result.club;
                    return true;
                }).catch(function (error) {
                    // MessageDialog.showWithText(Utility.toMessageWithCode(error.codes));
                });
            };
            // 申请加入
            ClubMgr.prototype.joinClub = function (requestData) {
                return this.sendRequest('ApplyClubPlayerRequest', requestData);
            };
            // // 同意加入
            // public agreeJoinClub(requestData: msg.ClubAcceptRequest): Promise<any> {
            //     return this.sendRequest('ClubAcceptRequest', requestData);
            // }
            //
            // // 申请列表
            // public clubApplyNotifications(requestData: msg.ClubAppListRequest): Promise<any> {
            //     return this.sendRequest('ClubAppListRequest', requestData);
            // }
            // 会员列表
            ClubMgr.prototype.clubMembers = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    var result, e_3;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.sendRequest('FindClubPlayerRequest', requestData)];
                            case 1:
                                result = _a.sent();
                                if (result.clubPlayer && result.clubPlayer.length) {
                                    //会长排在最前面
                                    result.clubPlayer.sort(function (a, b) { return a.playerDuties - b.playerDuties; });
                                }
                                return [2 /*return*/, result];
                            case 2:
                                e_3 = _a.sent();
                                return [2 /*return*/, null];
                            case 3: return [2 /*return*/];
                        }
                    });
                });
            };
            //俱乐部成员
            ClubMgr.prototype.getClubPlayer = function (clubId, playerId) {
                return __awaiter(this, void 0, void 0, function () {
                    var postData, members, filterMembers, e_4;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                postData = {
                                    clubId: clubId,
                                    page: 1,
                                    pageSize: 9999
                                };
                                return [4 /*yield*/, this.clubMembers(postData)];
                            case 1:
                                members = _a.sent();
                                if (members && members.clubPlayer) {
                                    filterMembers = members.clubPlayer.filter(function (item) { return item.playerId === playerId; });
                                    return [2 /*return*/, filterMembers.length ? filterMembers[0] : null];
                                }
                                else {
                                    return [2 /*return*/, null];
                                }
                                return [3 /*break*/, 3];
                            case 2:
                                e_4 = _a.sent();
                                return [2 /*return*/, null];
                            case 3: return [2 /*return*/];
                        }
                    });
                });
            };
            // 会员详情
            ClubMgr.prototype.getClubMemberInfo = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('PlayerInfoRequest', requestData)];
                    });
                });
            };
            /**
             * 俱乐部和成员
             * @param requestData
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.getClubWithPlayers = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.sendRequest('FindClubAndClubPlayersRequest', requestData)];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                });
            };
            // 踢出
            ClubMgr.prototype.kickOut = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('KickClubPlayerRequest', requestData)];
                    });
                });
            };
            // 退出
            ClubMgr.prototype.quitClub = function (requestData) {
                return this.sendRequest('CancelClubRequest', requestData);
            };
            /**
             * 提升权限
             * @param requestData
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.upgradePrivilege = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    var error_3;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.sendRequest('SetClubPlayerRequest', requestData)];
                            case 1:
                                _a.sent();
                                HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.setSuccess));
                                return [2 /*return*/, true];
                            case 2:
                                error_3 = _a.sent();
                                return [2 /*return*/, false];
                            case 3: return [2 /*return*/];
                        }
                    });
                });
            };
            /**
             * 降权限
             * @param requestData
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.downgradePrivilege = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    var error_4;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.sendRequest('SetClubPlayerRequest', requestData)];
                            case 1:
                                _a.sent();
                                HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.removeSuccess));
                                return [2 /*return*/, true];
                            case 2:
                                error_4 = _a.sent();
                                return [2 /*return*/, false];
                            case 3: return [2 /*return*/];
                        }
                    });
                });
            };
            /**
             * 贡献大师分
             * @param requestData
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.contributeMasterScore = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('ContributionMasterScoreRequest', requestData)];
                    });
                });
            };
            /**
             * 发放大师分
             * @param requestData
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.grantMasterScore = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('GrantMasterScoreRequest', requestData)];
                    });
                });
            };
            /**
             * 流水记录
             * @param requestData
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.getMasterScoreRecords = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('MasterScoreRecordsRequest', requestData)];
                    });
                });
            };
            /**
             * 流水明细
             * @param requestData
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.getMasterScoreStatistics = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('MasterScoreStatisticsRequest', requestData)];
                    });
                });
            };
            ClubMgr.prototype.getMasterScoreGainsRequest = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest("MasterScoreGainsRequest", requestData)];
                    });
                });
            };
            /**
             * 管理员盲注区间
             * @param requestData
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.getAllBlindSections = function (clubId) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('AllOfficialRoomRequest', { clubId: clubId })];
                    });
                });
            };
            /**
             * 管理员设置盲注区间
             * @param requestData
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.setBlindSection = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('SetClubOfficialRoomRequest', requestData)];
                    });
                });
            };
            /**
             * club盲注区间
             * @param clubId
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.getBlindSections = function (clubId) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('FindClubOfficealRoomRequest', { clubId: clubId })];
                    });
                });
            };
            /**
             * 盲注区间下所有牌局
             * @param blindSection
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.getTablesByBlindSection = function (requestData, isLoading) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('FindTableRequest', requestData, isLoading)];
                    });
                });
            };
            /**
             * 追加信用分
             * @param requestData
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.addClubCreditScoreRequest = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('AddClubCreditScoreRequest', requestData)];
                    });
                });
            };
            /**
             * 撤回信用分
             * @param requestData
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.withdrawClubCreditScoreRequest = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('WithdrawClubCreditScoreRequest', requestData)];
                    });
                });
            };
            /**
             * 分配信用分
             * @param requestData
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.allotPlayerCreditScoreRequest = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('AllotPlayerCreditScoreRequest', requestData)];
                    });
                });
            };
            /**
             * 帮他人偿还信用分
             * @param requestData
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.allotPlayerRepayScoreRequest = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('HelpRepayCreditScoreRequest', requestData)];
                    });
                });
            };
            /**
             * 偿还信用分
             * @param requestData
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.repayClubCreditScoreRequest = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('RepayClubCreditScoreRequest', requestData)];
                    });
                });
            };
            /**
             * 赠送活跃度
             * @param requestData
             * @returns {Promise<any>}
             */
            ClubMgr.prototype.giveClubActivityRequest = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('GiveClubActivityRequest', requestData)];
                    });
                });
            };
            // 俱乐部详情
            ClubMgr.prototype.getClubByCardId = function (id) {
                return __awaiter(this, void 0, void 0, function () {
                    var requestData;
                    return __generator(this, function (_a) {
                        requestData = {
                            cardID: id
                        };
                        return [2 /*return*/, this.sendRequest('FindClubInfoRequest', requestData)];
                    });
                });
            };
            ClubMgr.prototype.getInvitationClubs = function (requestData) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.sendRequest('SubClubRebateRequest', requestData)];
                    });
                });
            };
            ClubMgr.prototype.registerEvent = function () {
                //信用分变更
                HoldemPoker.Sys.net.registerNotifyMsg('AllotPlayerCreditScoreNotify', this, this.onCreditScoreChanged);
                HoldemPoker.Sys.net.registerNotifyMsg('ClubNotify', this, this.onClubStateChanged);
            };
            ClubMgr.prototype.unregisterEvent = function () {
                HoldemPoker.Sys.net.unRegisterNotifyMsg('AllotPlayerCreditScoreNotify');
                HoldemPoker.Sys.net.unRegisterNotifyMsg('ClubNotify');
            };
            /**
             * //信用分变更回调
             * @param result
             */
            ClubMgr.prototype.onCreditScoreChanged = function (result) {
                this.event(HoldemPoker.CREDIT_SCORE_CHANGE, result);
            };
            /**
             * //基金变更回调
             * @param result
             */
            ClubMgr.prototype.onClubStateChanged = function (result) {
                this.event(HoldemPoker.CLUB_STATE_CHANGE, result);
            };
            /**
             * 会员数据测试
             * @param {{clubId: number; page: number; pageSize: number}} pramas
             * @returns {Promise<Promise<any> | Promise>}
             */
            ClubMgr.prototype.loadMembersTest = function (pramas) {
                return __awaiter(this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                Laya.loader.load([{
                                        url: 'testData/dataPlayer.json',
                                        type: Laya.Loader.JSON
                                    }], new Laya.Handler(_this, function () {
                                    var data = Laya.loader.getRes('testData/dataPlayer.json');
                                    if (data) {
                                        var players = data.clubPlayer.slice();
                                        var len = players.length;
                                        var totalPage = Math.ceil(len / pramas.pageSize);
                                        if (pramas.page < 1) {
                                            pramas.page = 1;
                                        }
                                        if (pramas.page > totalPage) {
                                            pramas.page = totalPage;
                                        }
                                        var take = pramas.pageSize * (pramas.page - 1);
                                        var skip = pramas.pageSize + take;
                                        var result_1 = {
                                            page: pramas.page,
                                            clubPlayer: players.slice(take, skip)
                                        };
                                        setTimeout(function () {
                                            resolve(result_1);
                                        }, Math.ceil(Math.random() * 3000));
                                    }
                                    else {
                                        reject();
                                    }
                                }));
                            })];
                    });
                });
            };
            return ClubMgr;
        }(Laya.EventDispatcher));
        HoldemPoker.ClubMgr = ClubMgr;
    })(HoldemPoker = wesai.HoldemPoker || (wesai.HoldemPoker = {}));
})(wesai || (wesai = {}));
//# sourceMappingURL=ClubMgr.js.map