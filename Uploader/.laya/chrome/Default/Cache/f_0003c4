/*
 * @Author: aileLiu
 * @Date: 2017-03-30 15:38:31
 * @Last Modified by: aileLiu
 * @Last Modified time: 2017-11-17 17:18:15
 */
var wesai;
(function (wesai) {
    var HoldemPoker;
    (function (HoldemPoker) {
        var MatchListMgr = /** @class */ (function () {
            function MatchListMgr() {
            }
            MatchListMgr.prototype.Initalize = function () {
                this.registerNotify();
                this.bindRoomChange();
            };
            MatchListMgr.prototype.LoadFromRes = function () {
            };
            MatchListMgr.prototype.registerNotify = function () {
                HoldemPoker.Sys.net.registerNotifyMsg("MallPaymentNotify", this, this.onNotifyPaymentResponse);
                HoldemPoker.Sys.login.on(HoldemPoker.GEvent.LOGIN_SUCCESS, this, function () {
                    if (MatchListMgr.roomData) {
                        console.log('详情页面重连拉取room数据-------------');
                        HoldemPoker.RoomRepository.inst.sendRequest('RoomListRequest', {
                            type: HoldemPoker.RoomRepository.roomListTabIndex
                        }, true);
                    }
                });
            };
            MatchListMgr.prototype.unRegisterNotify = function () {
                HoldemPoker.Sys.net.unRegisterNotifyMsg("MallPaymentNotify");
            };
            MatchListMgr.prototype.applyMatchSNG = function (data) {
                if (data.roomSng.signUpFeePercent >= 0) {
                    HoldemPoker.MainUIMgr.initFeePercent = data.roomSng.signUpFeePercent;
                }
                //报名验证
                var entryStr = MatchListMgr.roomData.roomSng.apply;
                var signUpType = MatchListMgr.roomData.signUpType;
                var feePercent = MatchListMgr.roomData.roomSng.signUpFeePercent;
                var applyValidError = HoldemPoker.Sys.itemMgr.itemRepository.validateEntryFee(entryStr, signUpType, feePercent);
                if (applyValidError.flag === false) {
                    var errorTemplate = applyValidError.errorTemplate;
                    if (errorTemplate) {
                        //微赛币不足
                        if (errorTemplate && (errorTemplate.itemTempId === HoldemPoker.VirtualCurrencyType.WesaiCurrency || errorTemplate.itemTempId === HoldemPoker.VirtualCurrencyType.DiamondCurrency)) {
                            //处理快捷支付
                            HoldemPoker.Sys.itemMgr.itemRepository.resolveQuickPay(applyValidError, function (quickPayResult) {
                            });
                        }
                        else {
                            //其它不足直接提示
                            HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.notEnoughToApply, errorTemplate.name));
                        }
                    }
                    else {
                        HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.accountNotEnoughToApply));
                    }
                    return;
                }
                var entryFeeDisplayStr = HoldemPoker.Sys.itemMgr.itemRepository.entryFeeDisplayStr(entryStr, signUpType, feePercent);
                if (HoldemPoker.Sys.itemMgr.itemRepository.isFreeWithItemsStr(entryStr)) {
                    entryFeeDisplayStr = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.freeJoinGame, data.roomName);
                }
                else {
                    entryFeeDisplayStr = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.joinSngTip, entryFeeDisplayStr);
                }
                HoldemPoker.MessagePrompt.openPrompt(entryFeeDisplayStr, Laya.Handler.create(this, this.connectRoom, [data]));
            };
            MatchListMgr.prototype.joinMatchRoom = function (room) {
                if (room) {
                    HoldemPoker.Sys.lastRoomType = room.roomType;
                    MatchListMgr.roomData = room;
                    var isPacked = room.playerCount === room.playerCountLimit; // 这句？
                    if (room.roomType === HoldemPoker.RoomType.GameSng) {
                        if (room.raceId === 0) {
                            this.connectRoom(room);
                        }
                        else {
                            this.openMatchDetails();
                        }
                        // if (isPacked || room.isEntered) {
                        //     this.connectRoom(room);
                        // } else {
                        //     this.applyMatchSNG(room);
                        // }
                    }
                    else if (room.roomType === HoldemPoker.RoomType.GameMtt) {
                        this.openMatchDetails();
                    }
                    else {
                        this.connectRoom(room);
                    }
                }
                else {
                    HoldemPoker.MessageDialog.showRichText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.emptyRoom));
                }
            };
            MatchListMgr.prototype.connectRoom = function (room) {
                HoldemPoker.Sys.ui.startLoading(null, 1);
                var postData;
                if (room.roomType === HoldemPoker.RoomType.GameMtt) {
                    postData = {
                        incode: room.invitationCode
                    };
                }
                else {
                    postData = {
                        invitationCode: room.invitationCode,
                        roomId: room.id
                    };
                }
                HoldemPoker.Sys.games.connectRoomServer(postData, this, function (data) {
                    HoldemPoker.Sys.ui.stopLoading();
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Utility.toMessageWithCode(data.codes));
                }, true, room.clubId);
                // if (room.clubId) {
                //     Sys.games.connectRoomRequest(
                //         room.id,
                //         room.ip,
                //         room.port,
                //         room.gameId,
                //         room.invitationCode,
                //         room.roomType,
                //         room.clubId);
                // } else {
                //     Sys.games.connectRoomRequest(
                //         room.id,
                //         room.ip,
                //         room.port,
                //         room.gameId,
                //         room.invitationCode,
                //         room.roomType);
                // }
            };
            /**
             *  打开比赛详情
             */
            MatchListMgr.prototype.openMatchDetails = function (data) {
                var _this = this;
                if (!data) {
                    if (MatchListMgr.roomData) {
                        this.getMatchBlinds(MatchListMgr.roomData.raceId, this, this.getMatchBlindsResponse);
                        HoldemPoker.Sys.ui.startLoading(null, 1);
                    }
                }
                else {
                    // Sys.ui.stopLoading();
                    MatchListMgr.detailsData = data;
                    // 拉去本地列表存储的room数据
                    HoldemPoker.RoomRepository.inst.find(MatchListMgr.detailsData.roomId).then(function (room) {
                        if (room) {
                            MatchListMgr.roomData = room;
                            _this.getMatchBlinds(MatchListMgr.roomData.raceId, _this, _this.getMatchBlindsResponse);
                        }
                        else {
                            _this.getRoomInfo(data.roomId, data.raceId);
                        }
                    });
                }
            };
            MatchListMgr.prototype.getRoomInfo = function (roomId, raceId) {
                var _this = this;
                var data = { roomId: roomId };
                HoldemPoker.Sys.net.sendMesage("RoomInfoRequest", data, Laya.Handler.create(this, function (room) {
                    if (room) {
                        // MatchListMgr.detailsData = null;
                        MatchListMgr.roomData = room.room;
                        MatchListMgr.roomData.raceId = raceId;
                        _this.getMatchBlinds(raceId, _this, _this.getMatchBlindsResponse);
                    }
                }), Laya.Handler.create(this, function () {
                    HoldemPoker.Sys.ui.stopLoading();
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Utility.toMessageWithCode(HoldemPoker.msg.Codes.ErrRoomNotFound));
                }));
            };
            /**
             *  展示比赛详情界面
             */
            MatchListMgr.prototype.openMatchListDetailsView = function () {
                HoldemPoker.Sys.ui.stopLoading();
                this.matchDetailsView = new HoldemPoker.DetailsUI();
                HoldemPoker.Sys.ui.push(this.matchDetailsView);
            };
            MatchListMgr.prototype.Dispose = function () {
                this.unRegisterNotify();
            };
            // 获取比赛详情 请求
            MatchListMgr.prototype.getMatchDetailsInfo = function (caller, handler) {
                if (MatchListMgr.roomData) {
                    HoldemPoker.Sys.net.sendMesage("RaceMTTRequest", { raceId: MatchListMgr.roomData.raceId }, Laya.Handler.create(caller, handler), Laya.Handler.create(this, function (data) {
                        HoldemPoker.Sys.ui.stopLoading();
                        HoldemPoker.MessageDialog.showWithText(HoldemPoker.Utility.toMessageWithCode(data.codes));
                    }));
                }
            };
            // 获取比赛详情 成功返回
            MatchListMgr.prototype.onRaceMTTResponse = function (data) {
                // Sys.ui.stopLoading();
                if (data) {
                    MatchListMgr.detailsData = data;
                    this.openMatchListDetailsView();
                }
            };
            /**
             * 比赛详情页按钮－取消报名请求
             */
            MatchListMgr.prototype.getRaceCancelApplyRequest = function (data, caller, handler) {
                HoldemPoker.Sys.net.sendMesage("RaceCancelApplyRequest", { raceId: data.raceId }, Laya.Handler.create(caller, handler), Laya.Handler.create(this, function (data) {
                    HoldemPoker.Sys.ui.stopLoading();
                    HoldemPoker.MessageDialog.showWithText(String(HoldemPoker.Utility.toMessageWithCode(data.codes)));
                }));
            };
            /**
             * 比赛详情页按钮－报名请求
             */
            MatchListMgr.prototype.getRaceApplyRequest = function (data, caller, handler) {
                var postIds = HoldemPoker.Sys.itemMgr.itemRepository.resolveEntryFeePostStr(data.roomSng.apply, data.signUpType, data.roomSng.signUpFeePercent);
                if (!HoldemPoker.Sys.itemMgr.itemRepository.isFreeWithItemsStr(data.roomSng.apply)) {
                    var entryFeeDisplayStr = HoldemPoker.Sys.itemMgr.itemRepository.entryFeeResolveDisplayStr(data.roomSng.apply, data.signUpType, data.roomSng.signUpFeePercent);
                    MatchListMgr.applySuccessText = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.consumeToApplySuccess, entryFeeDisplayStr);
                }
                else {
                    MatchListMgr.applySuccessText = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.freeApplySuccess);
                }
                var clubId = -1;
                if (HoldemPoker.Sys.games.mainUIMgr.matchViewUI && HoldemPoker.Sys.games.mainUIMgr.matchViewUI.currentClub) {
                    clubId = HoldemPoker.Sys.games.mainUIMgr.matchViewUI.currentClub.id;
                }
                HoldemPoker.Sys.net.sendMesage("RaceApplyRequest", { raceId: data.raceId, applyItemUniqueId: postIds, "clubId": clubId }, Laya.Handler.create(caller, handler), Laya.Handler.create(this, function (data) {
                    HoldemPoker.Sys.ui.stopLoading();
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Utility.toMessageWithCode(data.codes));
                }));
            };
            /**
             * 比赛详情－奖励tab 请求
             */
            MatchListMgr.prototype.onRaceAwardRequest = function (dataID, caller, handler) {
                HoldemPoker.Sys.net.sendMesage("RaceMttRewardRequest", { raceId: dataID }, // 待确定奖励协议aileen
                Laya.Handler.create(caller, handler), Laya.Handler.create(this, function (data) {
                    // Sys.ui.stopLoading();
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Utility.toMessageWithCode(data.codes));
                }));
            };
            /**
             * 比赛详情－玩家tab 请求
             */
            MatchListMgr.prototype.onRacePlayersRequest = function (dataID, caller, handler) {
                HoldemPoker.Sys.net.sendMesage("RaceMttRankRequest", {
                    raceId: dataID,
                    rankStart: 1,
                    rankEnd: 100 // 分页参数
                }, Laya.Handler.create(caller, handler), Laya.Handler.create(this, function (data) {
                    // Sys.ui.stopLoading();
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Utility.toMessageWithCode(data.codes));
                }));
            };
            /**
             * 比赛详情－牌桌tab 请求
             */
            MatchListMgr.prototype.onRacePokerTableRequest = function (dataID, caller, handler) {
                HoldemPoker.Sys.net.sendMesage("RaceMttTableRequest", { raceId: dataID }, Laya.Handler.create(caller, handler), Laya.Handler.create(this, function (data) {
                    // Sys.ui.stopLoading();
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Utility.toMessageWithCode(data.codes));
                }));
            };
            // 获取blinds 请求
            MatchListMgr.prototype.getMatchBlinds = function (dataID, caller, handler) {
                HoldemPoker.Sys.net.sendMesage("RaceMTTBlindRequest", { raceId: dataID }, Laya.Handler.create(caller, handler), Laya.Handler.create(this, function (data) {
                    HoldemPoker.Sys.ui.stopLoading();
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Utility.toMessageWithCode(data.codes));
                }));
            };
            MatchListMgr.prototype.onEnterRaceRequest = function () {
                if (MatchListMgr.roomData) {
                    var data = { incode: MatchListMgr.roomData.invitationCode };
                    HoldemPoker.Sys.games.connectRoomServer(data, this, function (data) {
                        HoldemPoker.Sys.ui.stopLoading();
                        HoldemPoker.MessageDialog.showWithText(HoldemPoker.Utility.toMessageWithCode(data.codes));
                    });
                    this.matchDetailsView.onExit();
                }
            };
            MatchListMgr.prototype.onOrderCreateSuccess = function (data) {
                if (data.order.wechatOrder) {
                    var wechatOrder = data.order.wechatOrder;
                    var json = {
                        partnerid: wechatOrder.partnerId,
                        prepayid: wechatOrder.prePayId,
                        package: wechatOrder.package,
                        noncestr: wechatOrder.nonceStr,
                        timestamp: wechatOrder.timeStamp,
                        sign: wechatOrder.sign
                    };
                    HoldemPoker.NativeModule.payWithWeixin(JSON.stringify(json));
                }
            };
            MatchListMgr.prototype.getMatchBlindsResponse = function (data) {
                if (data) {
                    MatchListMgr.blindsData = data;
                    if (!MatchListMgr.detailsData) {
                        this.getMatchDetailsInfo(this, this.onRaceMTTResponse);
                        // Sys.ui.startLoading();
                    }
                    else {
                        this.openMatchListDetailsView();
                    }
                }
            };
            MatchListMgr.prototype.onNotifyPaymentResponse = function (data) {
                HoldemPoker.Sys.ui.stopLoading();
                if (data.isSuccess) {
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.rechargeSuccess));
                    HoldemPoker.Sys.players.self.diamond = data.diamond;
                    HoldemPoker.Sys.players.self.gold = data.gold;
                    //特殊处理
                    var rechargeView = HoldemPoker.Sys.ui.topView();
                    if (rechargeView instanceof HoldemPoker.RechargeUI) {
                        var rechargeUI = rechargeView;
                        rechargeUI.headView.diamondLabel.text = String(HoldemPoker.Sys.players.self.diamond);
                    }
                }
                else {
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.rechargeFail));
                }
            };
            MatchListMgr.prototype.bindRoomChange = function () {
                var _this = this;
                HoldemPoker.RoomRepository.inst.on(HoldemPoker.EVENT_ROOM_UPDATE, this, function () {
                    _this.updateRoomData();
                });
                HoldemPoker.RoomRepository.inst.on(HoldemPoker.EVENT_ROOM_LIST, this, function () {
                    var reConnect = true;
                    _this.updateRoomData(reConnect);
                });
            };
            MatchListMgr.prototype.updateRoomData = function (reConnect) {
                var _this = this;
                if (MatchListMgr.roomData && MatchListMgr.detailsData) {
                    // console.log('详情页面更新依赖room数据-------------');
                    HoldemPoker.RoomRepository.inst.find(MatchListMgr.roomData.id).then(function (room) {
                        if (room) {
                            // 监听更新房间信息
                            MatchListMgr.roomData = room;
                            _this.matchDetailsView.updateBtnStatus(MatchListMgr.roomData.signUpStatus, MatchListMgr.roomData.isStarted);
                            if (reConnect) {
                                _this.matchDetailsView.updateMainInfo();
                            }
                        }
                        else {
                            HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.matchOver));
                            _this.matchDetailsView.onExit();
                        }
                    });
                }
            };
            /**
             * 清除matchList存储数据
             */
            MatchListMgr.prototype.clearDate = function () {
                MatchListMgr.roomData = null;
                MatchListMgr.detailsData = null;
                MatchListMgr.tabData.award = null;
                MatchListMgr.tabData.players = null;
                MatchListMgr.tabData.pokerTable = null;
                MatchListMgr.blindsData = null;
            };
            /**
             * 搜索玩家
             */
            MatchListMgr.prototype.onSearchPlayer = function (data) {
                if (MatchListMgr.tabData.players && MatchListMgr.tabData.players.rankPlayer.length > 0) {
                    var arr = MatchListMgr.tabData.players.rankPlayer.filter(function (info) { return (info.playerName.indexOf(data) > -1 || info.playerId === Number(data)); });
                    return arr;
                }
                else {
                    return [];
                }
            };
            /**
             * 比赛详情页按钮－复活参赛请求
             */
            MatchListMgr.prototype.getMTTRevivalRequest = function (data, caller, handler) {
                var postIds = HoldemPoker.Sys.itemMgr.itemRepository.resolveEntryFeePostStr(data.rebuyCost, data.signUpType, data.signUpFeePercent);
                HoldemPoker.Sys.net.sendMesage("MTTRevivalRequest", { raceId: data.raceId, revivalItemUniqueId: postIds }, Laya.Handler.create(caller, handler), Laya.Handler.create(this, function (data) {
                    HoldemPoker.Sys.ui.stopLoading();
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Utility.toMessageWithCode(data.codes));
                }));
            };
            // private requestData: Laya.Dictionary; // 数据存储
            MatchListMgr.roomData = null;
            MatchListMgr.detailsData = null;
            MatchListMgr.lookOnPlayerId = 0;
            MatchListMgr.lookOnGameId = 0;
            MatchListMgr.isLookOn = false;
            MatchListMgr.lookOnType = 0;
            MatchListMgr.tabData = {
                "award": null,
                "players": null,
                "pokerTable": null
            };
            MatchListMgr.applySuccessText = '';
            MatchListMgr.blindsData = null;
            return MatchListMgr;
        }());
        HoldemPoker.MatchListMgr = MatchListMgr;
    })(HoldemPoker = wesai.HoldemPoker || (wesai.HoldemPoker = {}));
})(wesai || (wesai = {}));
//# sourceMappingURL=MatchListMgr.js.map