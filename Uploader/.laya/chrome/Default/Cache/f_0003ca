var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var wesai;
(function (wesai) {
    var HoldemPoker;
    (function (HoldemPoker) {
        //记录最后拉取列表，用于离开房间后重新拉取数
        //todo 后台重构协议格式
        var GameListLastState;
        (function (GameListLastState) {
            GameListLastState[GameListLastState["GameClub"] = 0] = "GameClub";
            GameListLastState[GameListLastState["GameSNG"] = 1] = "GameSNG";
            GameListLastState[GameListLastState["GameOfficial"] = 2] = "GameOfficial";
            GameListLastState[GameListLastState["GamePersonal"] = 3] = "GamePersonal";
        })(GameListLastState = HoldemPoker.GameListLastState || (HoldemPoker.GameListLastState = {}));
        HoldemPoker.EVENT_ROOM_UPDATE = 'EVENT_ROOM_UPDATE';
        HoldemPoker.EVENT_ROOM_CREATED = 'EVENT_ROOM_CREATED';
        HoldemPoker.EVENT_ROOM_LIST = 'EVENT_ROOM_LIST';
        var RoomRepository = /** @class */ (function (_super) {
            __extends(RoomRepository, _super);
            /**
             * 保证数据统一，禁止new
             * @param net
             */
            function RoomRepository(net) {
                if (net === void 0) { net = HoldemPoker.Sys.net; }
                var _this = _super.call(this) || this;
                _this.rooms = [];
                _this.net = net;
                _this.requestMap = new Laya.Dictionary;
                _this.bindResponse();
                return _this;
                // this.bindEvents();
            }
            Object.defineProperty(RoomRepository, "inst", {
                /**
                 * 返回单例
                 * @returns {ClubRepository}
                 */
                get: function () {
                    if (!RoomRepository.instance) {
                        RoomRepository.instance = new RoomRepository();
                    }
                    return RoomRepository.instance;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * 是否存在
             * @param room
             * @returns {number}
             */
            RoomRepository.prototype.getExistIndex = function (room) {
                var existIndex = -1;
                var flag = this.rooms.some(function (item, index) {
                    existIndex = index;
                    return item.id === room.id;
                });
                if (!flag) {
                    return -1;
                }
                return existIndex;
            };
            /**
             *
             * @param room
             */
            RoomRepository.prototype.create = function (room) {
                this.rooms.push(room);
            };
            /**
             *
             * @param room
             */
            RoomRepository.prototype.update = function (room) {
                var hasIndex = this.getExistIndex(room);
                if (hasIndex !== -1) {
                    this.rooms.splice(hasIndex, 1, room);
                }
                else {
                    this.create(room);
                }
            };
            /**
             * 根据roomid找一个房间信息
             * @param id
             * @param force
             * @returns {Promise<any>}
             */
            RoomRepository.prototype.find = function (id, force) {
                if (force === void 0) { force = false; }
                return __awaiter(this, void 0, void 0, function () {
                    var rooms;
                    return __generator(this, function (_a) {
                        if (force) {
                            try {
                                // let result = await  this.resolveRequest('ClubRequest', {id: id});
                                // return Promise.resolve(result.club);
                            }
                            catch (error) {
                                return [2 /*return*/, Promise.reject(error)];
                            }
                        }
                        else {
                            rooms = this.rooms.filter(function (room) { return room.id === id; });
                            return [2 /*return*/, Promise.resolve(rooms.length ? rooms[0] : null)];
                        }
                        return [2 /*return*/];
                    });
                });
            };
            /**
             * 批量更新
             * @param rooms
             */
            RoomRepository.prototype.updateMany = function (rooms) {
                for (var _i = 0, rooms_1 = rooms; _i < rooms_1.length; _i++) {
                    var room = rooms_1[_i];
                    this.update(room);
                }
            };
            /**
             * 删除
             * @param rooms
             */
            RoomRepository.prototype.delete = function (room) {
                var hasIndex = this.getExistIndex(room);
                if (hasIndex !== -1) {
                    this.rooms.splice(hasIndex, 1);
                }
            };
            /**
             * 批量删除
             * @param rooms
             */
            RoomRepository.prototype.deleteMany = function (rooms) {
                for (var _i = 0, rooms_2 = rooms; _i < rooms_2.length; _i++) {
                    var room = rooms_2[_i];
                    this.delete(room);
                }
            };
            /**
             * 删除同类型的
             * @param type
             */
            RoomRepository.prototype.deleteWithType = function (type) {
                var typedRooms = this.getRooms(type);
                this.deleteMany(typedRooms);
            };
            /**
             * 房间
             * @param type
             * @returns {msg.Room[]}
             */
            RoomRepository.prototype.getRooms = function (type) {
                if (type === void 0) { type = HoldemPoker.msg.RoomListType.RoomListClub; }
                var rooms = this.rooms.filter(function (room) { return room.type === type; });
                if (type === HoldemPoker.msg.RoomListType.RoomListClub) {
                    return rooms;
                }
                else if (type === HoldemPoker.msg.RoomListType.RoomListOfficial) {
                    return this.resolveOfficialSort(rooms);
                }
                return rooms.sort(this.sortByStartAt);
            };
            /**
             * 俱乐部房间
             * @param clubId
             * @returns {msg.Room[]}
             */
            RoomRepository.prototype.getClubRooms = function (clubId) {
                var rooms = this.rooms.filter(function (room) { return room.type === HoldemPoker.msg.RoomListType.RoomListClub && room.clubId === clubId; });
                return rooms.sort(this.sortByStartAt);
            };
            /**
             * 根据raceId找房间
             * @param raceId
             * @returns {msg.Room}
             */
            RoomRepository.prototype.getRoomByRaceId = function (raceId) {
                var rooms = this.rooms.filter(function (room) { return room.raceId === raceId; });
                return rooms.length ? rooms[0] : null;
            };
            /**
             * 监听socket
             */
            RoomRepository.prototype.bindResponse = function () {
                var _this = this;
                //创建
                this.net.registerNotifyMsg('RoomUpdateNotify', this, function (result) {
                    switch (result.type) {
                        case HoldemPoker.msg.UpdateType.Deleted:
                            _this.deleteMany(result.rooms);
                            break;
                        case HoldemPoker.msg.UpdateType.Updated:
                            if (result.rooms.length === 1) {
                                var room = result.rooms[0];
                                for (var i = 0; i < _this.rooms.length; i++) {
                                    if (_this.rooms[i].id === room.id) {
                                        if (_this.rooms[i].type === HoldemPoker.msg.RoomListType.RoomListPersonal) {
                                            _this.rooms[i] = room;
                                            _this.rooms[i].type = HoldemPoker.msg.RoomListType.RoomListPersonal;
                                        }
                                        else {
                                            _this.rooms[i] = room;
                                        }
                                        break;
                                    }
                                }
                            }
                            else {
                                _this.updateMany((result.rooms));
                            }
                            break;
                        default:
                            _this.updateMany((result.rooms));
                            break;
                    }
                    // this.event(EVENT_ROOM_UPDATE, this.rooms.sort(this.sortByStartAt));
                    _this.event(HoldemPoker.EVENT_ROOM_UPDATE);
                });
                //列表
                this.net.registerNotifyMsg('RoomListResponse', this, function (result) {
                    HoldemPoker.Sys.ui.stopLoading();
                    if (HoldemPoker.Sys.games.mainUIMgr && HoldemPoker.Sys.games.mainUIMgr.matchViewUI.matchLIstTab.selectedIndex !== HoldemPoker.FoundTapType.Club && result.type === HoldemPoker.msg.RoomListType.RoomListClub) {
                        return;
                    }
                    //清除掉所有同类型的，因为退出房间后收不到后台信息。。。。
                    _this.deleteWithType(result.type);
                    _this.updateMany((result.rooms));
                    // this.rooms = result.rooms;
                    // this.event(EVENT_ROOM_UPDATE, this.rooms);
                    if (result.type === HoldemPoker.msg.RoomListType.RoomListClub) {
                        _this.event(HoldemPoker.EVENT_ROOM_LIST, [result.rooms]);
                    }
                    else if (result.type === HoldemPoker.msg.RoomListType.RoomListOfficial) {
                        _this.event(HoldemPoker.EVENT_ROOM_LIST, [_this.resolveOfficialSort(result.rooms)]);
                    }
                    else {
                        _this.event(HoldemPoker.EVENT_ROOM_LIST, [result.rooms.sort(_this.sortByStartAt)]);
                    }
                });
                //创建
                this.net.registerNotifyMsg('ClubCreateRoomResponse', this, function (result) {
                    _this.event(HoldemPoker.EVENT_ROOM_CREATED);
                });
            };
            /**
             * force=false 只发送一次
             * @param requestName
             * @param params
             * @param force
             */
            RoomRepository.prototype.sendRequest = function (requestName, params, force, isLoading) {
                if (params === void 0) { params = {}; }
                if (force === void 0) { force = false; }
                //强行pull
                if (!isLoading) {
                    HoldemPoker.Sys.ui.startLoading('', 1);
                }
                if (force) {
                    this.net.requestNotify(requestName, params);
                    this.requestMap[requestName] = true;
                }
                else {
                    // 只拉一次
                    if (!this.requestMap[requestName]) {
                        this.net.requestNotify(requestName, params);
                        this.requestMap[requestName] = true;
                    }
                }
            };
            /**
             * 绑定重连事件
             */
            // public bindEvents() {
            //     Sys.login.on(GEvent.LOGIN_SUCCESS, this, () => {
            //         this.sendRequest('RoomListRequest', {
            //             type: RoomRepository.roomListTabIndex
            //         }, true);
            //     });
            // }
            /**
             * 取消监听socket
             */
            RoomRepository.prototype.unbindResponse = function () {
                this.net.unRegisterNotifyMsg('RoomUpdateNotify');
                this.net.unRegisterNotifyMsg('RoomListResponse');
                this.net.unRegisterNotifyMsg('ClubCreateRoomResponse');
            };
            /**
             * 开始时间排序
             * @param a
             * @param b
             * @returns {number}
             */
            RoomRepository.prototype.sortByStartAt = function (a, b) {
                if (b.order - a.order === 0) {
                    return a.startTime - b.startTime;
                }
                else {
                    return b.order - a.order;
                }
            };
            /**
             * OfficialSort
             * @param {wesai.HoldemPoker.msg.Room[]} data
             * @returns {wesai.HoldemPoker.msg.Room[]}
             */
            RoomRepository.prototype.resolveOfficialSort = function (data) {
                var sngRooms = data.filter(function (item) { return item.roomType === HoldemPoker.RoomType.GameSng; });
                var mttRooms = data.filter(function (item) { return item.roomType === HoldemPoker.RoomType.GameMtt && item.order === 0; });
                var orderRooms = data.filter(function (item) { return item.order > 0; });
                var sngEmptyRooms = sngRooms.filter(function (item) { return item.playerCount === 0 && item.order === 0; });
                var sngFullRooms = sngRooms.filter(function (item) { return item.playerCount === item.playerCountLimit && item.order === 0; });
                var sngOtherRooms = sngRooms.filter(function (item) { return item.playerCount !== 0 && item.playerCount !== item.playerCountLimit && item.order === 0; });
                orderRooms.sort(function (a, b) { return b.order - a.order; });
                mttRooms.sort(function (a, b) { return a.startTime - b.startTime; });
                sngOtherRooms.sort(function (a, b) { return b.playerCount - a.playerCount; });
                return orderRooms.concat(sngOtherRooms, sngFullRooms, sngEmptyRooms, mttRooms);
            };
            RoomRepository.prototype.getSortRoomList = function (data, type) {
                var sngRooms = data.filter(function (item) { return item.roomType === HoldemPoker.RoomType.GameSng; });
                var mttRooms = data.filter(function (item) { return item.roomType === HoldemPoker.RoomType.GameMtt; });
                var sngEmptyRooms = sngRooms.filter(function (item) { return item.playerCount === 0; });
                var sngFullRooms = sngRooms.filter(function (item) { return item.playerCount === item.playerCountLimit; });
                var sngOtherRooms = sngRooms.filter(function (item) { return item.playerCount !== 0 && item.playerCount !== item.playerCountLimit; });
                mttRooms.sort(function (a, b) { return a.startTime - b.startTime; });
                sngOtherRooms.sort(function (a, b) { return b.playerCount - a.playerCount; });
                if (type === GameListLastState.GameOfficial) {
                    return mttRooms.sort(function (a, b) { return b.order - a.order; });
                }
                else {
                    return sngOtherRooms.concat(sngFullRooms, sngEmptyRooms).sort(function (a, b) { return b.order - a.order; });
                }
            };
            RoomRepository.prototype.hiddeFullRoomList = function (data) {
                return data.filter(function (item) { return item.playerCount !== item.playerCountLimit; });
            };
            /**
             * 销毁事件等
             */
            RoomRepository.prototype.dispose = function () {
                this.unbindResponse();
            };
            /**
             * 销毁对象
             */
            RoomRepository.prototype.destroy = function () {
                this.dispose();
                this.rooms = [];
                this.net = null;
                this.requestMap.clear();
                RoomRepository.instance = null;
            };
            RoomRepository.instance = null;
            RoomRepository.roomListTabIndex = GameListLastState.GameOfficial;
            return RoomRepository;
        }(HoldemPoker.Repository));
        HoldemPoker.RoomRepository = RoomRepository;
    })(HoldemPoker = wesai.HoldemPoker || (wesai.HoldemPoker = {}));
})(wesai || (wesai = {}));
//# sourceMappingURL=RoomRepository.js.map