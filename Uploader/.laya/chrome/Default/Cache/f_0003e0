/*
 * @Author: mikey.zhaopeng
 * @Date: 2017-03-03 18:38:13
 * @Last Modified by: wesai.谢久伟
 * @Last Modified time: 2017-10-27 15:54:32
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var wesai;
(function (wesai) {
    var HoldemPoker;
    (function (HoldemPoker) {
        /**
         *
         *
         * @export
         * @class CreateMatchVUI
         * @extends {ui.CreateMatchVUI}
         * @implements {GameUIBase}
         */
        var Resource;
        (function (Resource) {
            Resource.createGameMatch = {
                atlas: { url: "res/atlas/createGame.atlas", type: Laya.Loader.ATLAS },
            };
        })(Resource = HoldemPoker.Resource || (HoldemPoker.Resource = {}));
        var CreateMatchUI = /** @class */ (function (_super) {
            __extends(CreateMatchUI, _super);
            function CreateMatchUI() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                // 奖金，盲注表弹窗参数
                _this.openBoxArg = {
                    blinds: 0,
                    bonuses: 1
                };
                _this.SNGLevel = [
                    {
                        'apply': 100,
                        'chip': 500,
                        'blindingTime': 1
                    },
                    {
                        'apply': 200,
                        'chip': 1000,
                        'blindingTime': 2
                    },
                    {
                        'apply': 500,
                        'chip': 2000,
                        'blindingTime': 3
                    },
                    {
                        'apply': 1000,
                        'chip': 4000,
                        'blindingTime': 5
                    },
                    {
                        'apply': 2000,
                        'chip': 5000,
                        'blindingTime': 8
                    },
                    {
                        'apply': 5000,
                        'chip': 10000,
                        'blindingTime': 10
                    },
                    {
                        'apply': 10000,
                        'chip': 15000,
                        'blindingTime': 15
                    }
                ];
                // SNG报名人数
                _this.peopleCount = [
                    { 'level': 2 },
                    { 'level': 3 },
                    { 'level': 4 },
                    { 'level': 5 },
                    { 'level': 6 },
                    { 'level': 7 },
                    { 'level': 8 },
                    { 'level': 9 }
                ];
                _this.peopleCountNew = [2, 3, 4, 5, 6, 7, 8, 9];
                return _this;
            }
            CreateMatchUI.prototype.Initalize = function () {
                this.onLanguageChanged();
                // 下拉列表测试app显示
                this.comboBoxDay.labels = '001,002,003';
                this.comboBoxDay.selectHandler = Laya.Handler.create(this, this.onSelect, [this.comboBoxDay]);
                // init盲注表
                this.initBlindsList();
                /**
                 * 俱乐部层级在最上面，不能显示，放到open里后面去了
                 */
                // Sys.ui.push(this);
                this.visible = false;
                this.viewPosY = this.y;
                // init SNG数值
                // this.SNGControlPlayerApplyText.text = Sys.localization.get(stringtable.controlPlayerApply);
                // this.SNGGPSLimitText.text = Sys.localization.get(stringtable.gpsLimit);
                // this.SNGIPLimitText.text = Sys.localization.get(stringtable.ipLimit);
                // SNG奖金表初始写死
                this.FirstPrizeText.text = '200';
                this.SecondPrizeText.text = '0';
                this.ThirdPrizeText.text = '0';
                // init MTT数值
                this.BMFnumMTT.text = String(this.SNGLevel[1].apply);
                this.JLFnumMTT.text = String(this.SNGLevel[1].apply * 0.1);
                this.JFPnumMTT.text = String(this.SNGLevel[2].chip);
                this.ZMSJnumMTT.text = String(this.SNGLevel[2].blindingTime);
                this.initHSlider(this.MTTLevelSliderBMF, this.SNGLevel, 1, this.chooseMTTLevel.bind(this, this.BMFnumMTT));
                this.initHSlider(this.MTTLevelSliderJFP, this.SNGLevel, 2, this.chooseMTTLevel.bind(this, this.JFPnumMTT));
                this.initHSlider(this.MTTLevelSliderZMSJ, this.SNGLevel, 2, this.chooseMTTLevel.bind(this, this.ZMSJnumMTT));
                // new滑杆UI init
                this.sngSliderPlayers = HoldemPoker.Sys.games.mainUIMgr.addSliderView(8, 648, [22, 60], this, this.changePlayers, this.peopleCountNew);
                this.sngSliderPlayersBox.addChild(this.sngSliderPlayers);
                this.playersNum = this.peopleCountNew[0];
                // this.CSRSnum.text = String(this.peopleCountNew[0]);
                this.BMFnum.text = String(this.SNGLevel[0].apply);
                this.JLFnum.text = String(this.SNGLevel[0].apply * 0.1);
                this.sngSliderApplyFee = HoldemPoker.Sys.games.mainUIMgr.addSliderView(7, 648, [22, 90], this, this.changeApplyFee);
                this.sngSliderApplyFeeBox.addChild(this.sngSliderApplyFee);
                this.JFPnum.text = String(this.SNGLevel[0].chip);
                this.sngSliderStack = HoldemPoker.Sys.games.mainUIMgr.addSliderView(7, 648, [22, 90], this, this.changeStack);
                this.sngSliderStackBox.addChild(this.sngSliderStack);
                this.ZMSJnum.text = String(this.SNGLevel[0].blindingTime);
                this.sngSliderUpblindsTime = HoldemPoker.Sys.games.mainUIMgr.addSliderView(7, 648, [22, 90], this, this.changeUpblindsTime);
                this.sngSliderUpblindsTimeBox.addChild(this.sngSliderUpblindsTime);
                this.RegisterUIEvent();
                this.Refresh();
            };
            // 滑杆－人数变化函数
            CreateMatchUI.prototype.changePlayers = function (index) {
                // console.log("选中了： " + index);
                this.playersNum = this.peopleCountNew[index];
                this.chooseSNGPeopleAction();
            };
            // 报名费变化函数
            CreateMatchUI.prototype.changeApplyFee = function (index) {
                this.BMFnum.text = String(this.SNGLevel[index].apply);
                this.JLFnum.text = String(this.SNGLevel[index].apply * 0.1);
                this.chooseSNGPeopleAction();
            };
            // 记分牌变化函数
            CreateMatchUI.prototype.changeStack = function (index) {
                this.JFPnum.text = String(this.SNGLevel[index].chip);
            };
            // 升盲时间变化函数
            CreateMatchUI.prototype.changeUpblindsTime = function (index) {
                console.log("选中了： " + index);
                this.ZMSJnum.text = String(this.SNGLevel[index].blindingTime);
            };
            CreateMatchUI.prototype.chooseSNGPeopleAction = function () {
                var numPlayers = this.playersNum;
                var num = Number(this.BMFnum.text) * numPlayers;
                if (numPlayers < 6) {
                    this.FirstPrizeText.text = String(num * 1);
                    this.SecondPrizeText.text = '0';
                    this.ThirdPrizeText.text = '0';
                }
                else if (numPlayers < 8) {
                    this.FirstPrizeText.text = String(num * 0.6);
                    this.SecondPrizeText.text = String(num * 0.4);
                    this.ThirdPrizeText.text = '0';
                }
                else {
                    this.FirstPrizeText.text = String(num * 0.5);
                    this.SecondPrizeText.text = String(num * 0.3);
                    this.ThirdPrizeText.text = String(num * 0.2);
                }
            };
            // 绑定MTT滑动杆函数
            CreateMatchUI.prototype.chooseMTTLevel = function (textObj) {
                // 报名费
                if (textObj = this.BMFnumMTT) {
                    textObj.text = String(this.SNGLevel[this.MTTLevelSliderBMF.value].apply);
                    this.JLFnumMTT.text = String(this.SNGLevel[this.MTTLevelSliderBMF.value].apply * 0.1);
                }
                ;
                // 记分牌
                if (textObj = this.JFPnumMTT) {
                    textObj.text = String(this.SNGLevel[this.MTTLevelSliderJFP.value].chip);
                }
                ;
                // 涨盲时间
                if (textObj = this.ZMSJnumMTT) {
                    textObj.text = String(this.SNGLevel[this.MTTLevelSliderZMSJ.value].blindingTime);
                }
                ;
            };
            // 初始化滑动杆数据(obj：滑动杆对象, data：数组数据, num：滑杆初值, fn：滑动执行函数)
            CreateMatchUI.prototype.initHSlider = function (obj, data, num, fn) {
                obj.max = data.length - 1;
                obj.value = num;
                obj.changeHandler = Laya.Handler.create(this, fn, null, false);
            };
            CreateMatchUI.prototype.openBox = function (type) {
                // this.bonusesBox.visible = true;
                if (type === this.openBoxArg.bonuses) {
                    this.bonusesBox.visible = true;
                }
                ;
                if (type === this.openBoxArg.blinds) {
                    this.listView.scrollBar.value = 0;
                    this.blindsBox.visible = true;
                }
                ;
            };
            CreateMatchUI.prototype.closeBox = function (type) {
                if (type === this.openBoxArg.bonuses) {
                    this.bonusesBox.visible = false;
                }
                ;
                if (type === this.openBoxArg.blinds) {
                    this.blindsBox.visible = false;
                    if (this.bonusesBox.visible = true) {
                        this.bonusesBox.visible = false;
                    }
                    ;
                }
                ;
            };
            CreateMatchUI.prototype.initBlindsList = function () {
                this.listView.itemRender = HoldemPoker.CreateMatchBListItemUI;
                this.listView.vScrollBarSkin = "";
                this.listView.selectEnable = true;
                // this.listView.page = 1;
                // this.listView.selectHandler = new Laya.Handler(this, this.onSelect);
                this.listView.renderHandler = new Laya.Handler(this, this.updateItem);
                this.listView.array = CreateMatchUI.blindsList;
                this.listView.refresh();
            };
            CreateMatchUI.prototype.updateItem = function (cell, index) {
                cell.setupData(cell.dataSource, index);
            };
            CreateMatchUI.prototype.chooseSNGPeopleNum = function () {
                var valueNum = 0;
                var num = Number(this.BMFnum.text) * this.peopleCount[valueNum].level;
                if (valueNum < 4) {
                    this.FirstPrizeText.text = String(num * 1);
                    this.SecondPrizeText.text = '0';
                    this.ThirdPrizeText.text = '0';
                }
                else if (valueNum < 6) {
                    this.FirstPrizeText.text = String(num * 0.6);
                    this.SecondPrizeText.text = String(num * 0.4);
                    this.ThirdPrizeText.text = '0';
                }
                else {
                    this.FirstPrizeText.text = String(num * 0.5);
                    this.SecondPrizeText.text = String(num * 0.3);
                    this.ThirdPrizeText.text = String(num * 0.2);
                }
            };
            CreateMatchUI.prototype.submit = function () {
                if (this.createSNG.visible === true) {
                    var roomNameL = HoldemPoker.Utility.getStrLength(this.GameName.text);
                    if (roomNameL > 20) {
                        HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.matchTitleWordsLimit));
                    }
                    else {
                        //报名费类型
                        var feeTemplateId = (this.feeRadio.selectedIndex + 1);
                        switch (this.feeRadio.selectedIndex) {
                            case 1:
                                feeTemplateId = HoldemPoker.VirtualCurrencyType.MasterCurrency;
                                break;
                            default:
                                feeTemplateId = HoldemPoker.VirtualCurrencyType.WesaiCurrency;
                                break;
                        }
                        //服务费
                        var serviceFee = parseInt(this.JLFnum.text);
                        serviceFee = 0; //去掉服务费
                        //手续费
                        var enrollFee = parseInt(this.BMFnum.text);
                        //费用差值
                        var restFee = HoldemPoker.Sys.itemMgr.itemRepository.getCurrency(feeTemplateId) - (serviceFee + enrollFee);
                        // if (feeTemplateId === VirtualCurrencyType.WesaiCurrency && this.clubID === -1 && restFee < 0) {//不是从俱乐部进入
                        //
                        //     MessagePrompt.setConfText(Sys.localization.get(stringtable.recharge));
                        //     MessagePrompt.openPrompt(Sys.localization.getFormated(stringtable.enrollNotEnough, Math.abs(restFee)), new Laya.Handler(this, () => {
                        //         let data: msg.MallOrderRequest = {
                        //             type: msg.PayType.Fast,
                        //             paymentId: 0,
                        //             amount: 1,
                        //             gold: Math.abs(restFee)
                        //         };
                        //         Sys.games.mainUIMgr.createOrder(data, this, this.onOrderCreateSuccess);
                        //     }));
                        //
                        //     return;
                        // } else if (feeTemplateId === VirtualCurrencyType.MasterCurrency && this.clubID === -1 && restFee < 0) {
                        //     MessageDialog.showWithText(Sys.localization.getFormated(stringtable.masterScoreNotEnoughCreateMatch, Math.abs(restFee)));
                        //     return;
                        // }
                        if (this.clubID === -1) {
                            //拼出需要的费用字符串
                            var entryStr = feeTemplateId + ":" + (serviceFee + enrollFee);
                            //验证费用
                            var applyValidError = HoldemPoker.Sys.itemMgr.itemRepository.validateEntryFee(entryStr, HoldemPoker.ApplyType.And, 0);
                            //只处理微赛币和钻石的情况
                            if (applyValidError.flag === false) {
                                var errorTemplate = applyValidError.errorTemplate;
                                if (errorTemplate) {
                                    if (errorTemplate.itemTempId === HoldemPoker.VirtualCurrencyType.WesaiCurrency || errorTemplate.itemTempId === HoldemPoker.VirtualCurrencyType.DiamondCurrency) {
                                        //处理快捷支付
                                        HoldemPoker.Sys.itemMgr.itemRepository.resolveQuickPay(applyValidError, function () {
                                        });
                                        return;
                                    }
                                    else if (errorTemplate.itemTempId === HoldemPoker.VirtualCurrencyType.MasterCurrency) {
                                        HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.masterScoreNotEnoughCreateMatch, Math.abs(restFee)));
                                        return;
                                    }
                                }
                            }
                        }
                        var data = {
                            roomName: this.GameName.text === "牌局名称" || this.GameName.text === "" ? HoldemPoker.Sys.players.self.name + "的房间" : this.GameName.text,
                            joinPlayerCount: this.playersNum,
                            upBlindTime: parseInt(this.ZMSJnum.text) * 60,
                            bankroll: parseInt(this.JFPnum.text),
                            surcharge: serviceFee,
                            applyCost: enrollFee,
                            clubId: this.clubID,
                            applyItemTemplateId: feeTemplateId
                        };
                        // console.log('创建SNG数据：', data);
                        HoldemPoker.Sys.games.createSNGGame(data);
                        this.exit();
                    }
                }
                if (this.createMTT.visible === true) {
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.mttCannotCreate));
                }
            };
            CreateMatchUI.prototype.onLanguageChanged = function () {
                this.navigationBar.titleLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.createSNG);
                this.GameName.prompt = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.gameNamePrompt);
                this.feeTypeLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.feeTypeLabel);
                this.feeRadio.labels = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.feeRadio);
                this.titleApplyCost.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.titleApplyCost);
                this.rewardTable.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.rewardTable);
                this.titleJFP.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.titleJFP);
                this.JFPtext.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.initialChip);
                this.titleUpblindsTime.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.blindInterval);
                this.blindMap.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.blindMap);
                this.FZtext.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.minutes);
                this.titleApplyPeople.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.joinCount);
                this.SubmitBtn.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.createGameSubmit);
            };
            CreateMatchUI.prototype.RegisterUIEvent = function () {
                HoldemPoker.Sys.localization.event.on(HoldemPoker.GEvent.LANGUAGE_CHANGED, this, this.onLanguageChanged);
                this.SubmitBtn.on(Laya.Event.CLICK, this, this.submit);
                this.navigationBar.backBtn.on(Laya.Event.CLICK, this, this.exit);
                // 奖励，盲注表
                this.bonusesBoxBtn.on(Laya.Event.CLICK, this, this.openBox.bind(this, this.openBoxArg.bonuses));
                this.blindsBoxBtn.on(Laya.Event.CLICK, this, this.openBox.bind(this, this.openBoxArg.blinds));
                this.closeBonusesBoxBtn.on(Laya.Event.CLICK, this, this.closeBox.bind(this, this.openBoxArg.bonuses));
                this.closeBlindsBoxBtn.on(Laya.Event.CLICK, this, this.closeBox.bind(this, this.openBoxArg.blinds));
            };
            CreateMatchUI.prototype.UnregisterUIEvent = function () {
                HoldemPoker.Sys.localization.event.off(HoldemPoker.GEvent.LANGUAGE_CHANGED, this, this.onLanguageChanged);
                this.navigationBar.backBtn.off(Laya.Event.CLICK, this, this.exit);
                this.SubmitBtn.off(Laya.Event.CLICK, this, this.submit);
                // 奖励，盲注表
                this.bonusesBoxBtn.off(Laya.Event.CLICK, this, this.openBox.bind(this, this.openBoxArg.bonuses));
                this.blindsBoxBtn.off(Laya.Event.CLICK, this, this.openBox.bind(this, this.openBoxArg.blinds));
                this.closeBonusesBoxBtn.off(Laya.Event.CLICK, this, this.closeBox.bind(this, this.openBoxArg.bonuses));
                this.closeBlindsBoxBtn.off(Laya.Event.CLICK, this, this.closeBox.bind(this, this.openBoxArg.blinds));
            };
            CreateMatchUI.prototype.Refresh = function () {
            };
            CreateMatchUI.prototype.Dispose = function () {
                this.UnregisterUIEvent();
                // Sys.ui.remove(this);
                // Laya.stage.removeChild(this);
                this.offAll();
                this.destroy();
            };
            CreateMatchUI.prototype.onOpen = function (clubID) {
                HoldemPoker.Sys.ui.push(this);
                this.CreateGameView.vScrollBar.value = 0;
                if (clubID instanceof Laya.Event) {
                    this.clubID = -1;
                }
                else {
                    this.clubID = clubID ? Number(clubID) : -1;
                }
                this.visible = true;
                this.y = this.viewPosY;
                HoldemPoker.UIAnimator.Start(HoldemPoker.UIAnimator.asyncFadeIn, this, { duration: 200 });
                HoldemPoker.UIAnimator.Start(HoldemPoker.UIAnimator.asyncFloatUp, this, { duration: 600, ease: Laya.Ease.cubicOut });
            };
            CreateMatchUI.prototype.exit = function () {
                var _this = this;
                this.GameName.text = '';
                HoldemPoker.UIAnimator.Start(HoldemPoker.UIAnimator.asyncFloatDown, this, { duration: 500 }, Laya.Handler.create(this, function () {
                    _this.visible = false;
                    HoldemPoker.Sys.ui.remove(_this);
                }));
            };
            CreateMatchUI.prototype.onSelect = function (cb) {
                console.log("选中了： " + cb.selectedLabel);
            };
            CreateMatchUI.prototype.onOrderCreateSuccess = function (data) {
                if (data.order.wechatOrder) {
                    var wechatOrder = data.order.wechatOrder;
                    var json = {
                        partnerid: wechatOrder.partnerId,
                        prepayid: wechatOrder.prePayId,
                        package: wechatOrder.package,
                        noncestr: wechatOrder.nonceStr,
                        timestamp: wechatOrder.timeStamp,
                        sign: wechatOrder.sign
                    };
                    HoldemPoker.NativeModule.payWithWeixin(JSON.stringify(json));
                }
            };
            // 盲注数据
            CreateMatchUI.blindsList = [{ "rank": 1, "smallBlind": 25, "bigBlind": 50, "anteNum": 0 }, {
                    "rank": 2,
                    "smallBlind": 50,
                    "bigBlind": 100,
                    "anteNum": 0
                }, { "rank": 3, "smallBlind": 100, "bigBlind": 200, "anteNum": 25 }, {
                    "rank": 4,
                    "smallBlind": 200,
                    "bigBlind": 400,
                    "anteNum": 50
                }, { "rank": 5, "smallBlind": 300, "bigBlind": 600, "anteNum": 75 }, {
                    "rank": 6,
                    "smallBlind": 400,
                    "bigBlind": 800,
                    "anteNum": 100
                }, { "rank": 7, "smallBlind": 500, "bigBlind": 1000, "anteNum": 100 }, {
                    "rank": 8,
                    "smallBlind": 600,
                    "bigBlind": 1200,
                    "anteNum": 200
                }, { "rank": 9, "smallBlind": 800, "bigBlind": 1600, "anteNum": 200 }, {
                    "rank": 10,
                    "smallBlind": 1000,
                    "bigBlind": 2000,
                    "anteNum": 300
                }, { "rank": 11, "smallBlind": 2000, "bigBlind": 4000, "anteNum": 500 }, {
                    "rank": 12,
                    "smallBlind": 3000,
                    "bigBlind": 6000,
                    "anteNum": 1000
                }, { "rank": 13, "smallBlind": 4000, "bigBlind": 8000, "anteNum": 1000 }, {
                    "rank": 14,
                    "smallBlind": 5000,
                    "bigBlind": 10000,
                    "anteNum": 1000
                }, { "rank": 15, "smallBlind": 6000, "bigBlind": 12000, "anteNum": 2000 }, {
                    "rank": 16,
                    "smallBlind": 8000,
                    "bigBlind": 16000,
                    "anteNum": 2000
                }, { "rank": 17, "smallBlind": 10000, "bigBlind": 20000, "anteNum": 3000 }, {
                    "rank": 18,
                    "smallBlind": 20000,
                    "bigBlind": 40000,
                    "anteNum": 5000
                }, { "rank": 19, "smallBlind": 30000, "bigBlind": 60000, "anteNum": 10000 }, {
                    "rank": 20,
                    "smallBlind": 40000,
                    "bigBlind": 80000,
                    "anteNum": 10000
                }, { "rank": 21, "smallBlind": 50000, "bigBlind": 100000, "anteNum": 15000 }, {
                    "rank": 22,
                    "smallBlind": 60000,
                    "bigBlind": 120000,
                    "anteNum": 20000
                }, { "rank": 23, "smallBlind": 75000, "bigBlind": 150000, "anteNum": 25000 }, {
                    "rank": 24,
                    "smallBlind": 100000,
                    "bigBlind": 200000,
                    "anteNum": 25000
                }, { "rank": 25, "smallBlind": 200000, "bigBlind": 400000, "anteNum": 50000 }, {
                    "rank": 26,
                    "smallBlind": 300000,
                    "bigBlind": 600000,
                    "anteNum": 75000
                }];
            return CreateMatchUI;
        }(ui.CreateMatchVUI));
        HoldemPoker.CreateMatchUI = CreateMatchUI;
    })(HoldemPoker = wesai.HoldemPoker || (wesai.HoldemPoker = {}));
})(wesai || (wesai = {}));
//# sourceMappingURL=CreateMatchUI.js.map