var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var wesai;
(function (wesai) {
    var HoldemPoker;
    (function (HoldemPoker) {
        var VideoCollectListItem = /** @class */ (function (_super) {
            __extends(VideoCollectListItem, _super);
            function VideoCollectListItem() {
                var _this = _super.call(this) || this;
                _this.width = Laya.stage.width;
                return _this;
            }
            VideoCollectListItem.prototype.renderItemData = function (data) {
                this.gameName.text = '' + data.roomName;
                // this.handRound.text = `第${data.handCount}手 ${WeDate.format(data.handBeginTime, 'H:i')}`;
                this.handRound.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.roundAndTime, data.handCount, HoldemPoker.WeDate.format(data.handBeginTime, 'H:i'));
                if (data.selfProfit >= 0) {
                    this.totalAmount.color = '#b01920';
                }
                else {
                    this.totalAmount.color = '#00991c';
                }
                if (data.selfProfit <= 0) {
                    this.totalAmount.text = '' + data.selfProfit;
                }
                else {
                    this.totalAmount.text = '+' + data.selfProfit;
                }
                this.dateLabel.text = HoldemPoker.WeDate.format(data.handBeginTime, 'Y/m/d').substring(2);
                var skinUrl = '1334/common/collect_icon.png';
                if (data.collected) {
                    skinUrl = '1334/common/collected_icon.png';
                }
                //是否参与
                var isTakeIn = data.showPlayerId === HoldemPoker.Sys.players.self.id;
                //有手牌
                var hasHand = data.holeCards.length > 0;
                this.collectBtn.skin = skinUrl;
                if (data.endHandPowerType === 0) {
                    this.actionLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.fold);
                }
                else {
                    //5张牌以上都显示牌型
                    if (data.pubCards.length >= 3) {
                        this.actionLabel.text = HoldemPoker.Utility.handPowerToString(data.endHandPowerType);
                    }
                    else {
                        this.actionLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.victory);
                    }
                }
                for (var i = 0; i < 2; i++) {
                    var card = (this['card' + (i + 1)]);
                    card.skin = HoldemPoker.Utility.getCardBackSkin(HoldemPoker.CardSize.SM);
                    if (data.holeCards[i] != undefined) {
                        card.skin = HoldemPoker.Utility.getSmallCardName(data.holeCards[i].cardNumber, data.holeCards[i].cardSuit);
                    }
                }
                for (var i = 0; i < 5; i++) {
                    var card = (this['pubCard' + (i + 1)]);
                    card.skin = HoldemPoker.Utility.getCardBackSkin(HoldemPoker.CardSize.SM);
                    if (data.pubCards[i] != undefined) {
                        card.skin = HoldemPoker.Utility.getSmallCardName(data.pubCards[i].cardNumber, data.pubCards[i].cardSuit);
                    }
                }
                //参与的牌局
                if (isTakeIn) {
                    //负
                    if (data.endHandPowerType === 0 || data.selfProfit < 0) {
                        // this.resultMsg.text = `玩家【${data.showPlayerName}】本局失败`;
                        this.resultMsg.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.playerRoundFailed, data.showPlayerName);
                    }
                    else if (data.selfProfit === 0) {
                        //有牌型
                        if (data.endHandPowerType > 0) {
                            // this.resultMsg.text = `玩家【${data.showPlayerName}】【${Utility.handPowerToString(data.endHandPowerType)}】本局无收益`;
                            this.resultMsg.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.playerRoundGainZero1, HoldemPoker.Utility.handPowerToString(data.endHandPowerType));
                        }
                        else {
                            // this.resultMsg.text = `玩家【${data.showPlayerName}】本局无收益`;
                            this.resultMsg.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.playerRoundGainZero);
                        }
                    }
                    else {
                        // this.resultMsg.text = `玩家【${data.showPlayerName}】以【${Utility.handPowerToString(data.endHandPowerType)}】获得胜利`;
                        this.resultMsg.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.playerRoundVictory1, data.showPlayerName, HoldemPoker.Utility.handPowerToString(data.endHandPowerType));
                    }
                }
                else {
                    //负
                    if (data.endHandPowerType === 0 || data.selfProfit <= 0) {
                        this.resultMsg.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.playerRoundFailed, data.showPlayerName);
                    }
                    else if (data.selfProfit === 0) {
                        //有牌型
                        if (data.endHandPowerType > 0) {
                            // this.resultMsg.text = `玩家【${data.showPlayerName}】【${Utility.handPowerToString(data.endHandPowerType)}】本局无收益`;
                            this.resultMsg.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.playerRoundGainZero1, HoldemPoker.Utility.handPowerToString(data.endHandPowerType));
                        }
                        else {
                            // this.resultMsg.text = `玩家【${data.showPlayerName}】本局无收益`;
                            this.resultMsg.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.playerRoundGainZero);
                        }
                    }
                    else {
                        //手牌如果翻开
                        if (hasHand) {
                            // this.resultMsg.text = `玩家【${data.showPlayerName}】以【${Utility.handPowerToString(data.endHandPowerType)}】获得胜利`;
                            this.resultMsg.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.playerRoundVictory1, data.showPlayerName, HoldemPoker.Utility.handPowerToString(data.endHandPowerType));
                        }
                        else {
                            this.actionLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.victory);
                            // this.resultMsg.text = `玩家【${data.showPlayerName}】以精湛的牌技取得胜利`;
                            this.resultMsg.text = HoldemPoker.Sys.localization.getFormated(HoldemPoker.stringtable.playerRoundVictory, data.showPlayerName);
                        }
                    }
                }
            };
            return VideoCollectListItem;
        }(ui.videoView.VideoCollectLIstItemUI));
        HoldemPoker.VideoCollectListItem = VideoCollectListItem;
        var VideoCollectListUI = /** @class */ (function (_super) {
            __extends(VideoCollectListUI, _super);
            function VideoCollectListUI() {
                var _this = _super.call(this) || this;
                _this.listData = [];
                _this.sortDateAsc = true;
                _this.sortProfitAsc = true;
                _this.collectedCount = 0;
                _this.allCollectCount = 0;
                _this.isInit = false;
                /**
                 * 数据为空UI
                 */
                if (_this.emptyUi === undefined) {
                    _this.emptyUi = Laya.Pool.getItemByClass('EmptyUI', HoldemPoker.Club.Components.EmptyUI);
                    _this.emptyUi.init(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.noData), 0, -100);
                    _this.addChild(_this.emptyUi);
                }
                _this.onLanguageChanged();
                _this.initList();
                return _this;
            }
            VideoCollectListUI.prototype.Initalize = function () {
                this.isInit = true;
                HoldemPoker.Sys.ui.push(this);
                this.listData = [];
                this.bindNotify();
                this.RegisterUIEvent();
                this.getData();
            };
            VideoCollectListUI.prototype.RegisterUIEvent = function () {
                this.header.backBtn.on(Laya.Event.CLICK, this, this.onHide);
                this.sortBtn.on(Laya.Event.CLICK, this, this.toggleMenu);
                Laya.stage.on(Laya.Event.CLICK, this, this.hideMenu);
                this.dateSortBtn.on(Laya.Event.CLICK, this, this.toggleSortByDate);
                this.profitSortBtn.on(Laya.Event.CLICK, this, this.toggleSortByProfit);
                HoldemPoker.Sys.net.on(HoldemPoker.GEvent.VIDEO_COLLECT, this, this.updateCollect);
            };
            VideoCollectListUI.prototype.UnregisterUIEvent = function () {
                this.header.backBtn.off(Laya.Event.CLICK, this, this.onHide);
                this.sortBtn.off(Laya.Event.CLICK, this, this.toggleMenu);
                Laya.stage.off(Laya.Event.CLICK, this, this.hideMenu);
                this.dateSortBtn.off(Laya.Event.CLICK, this, this.toggleSortByDate);
                this.profitSortBtn.off(Laya.Event.CLICK, this, this.toggleSortByProfit);
                HoldemPoker.Sys.net.off(HoldemPoker.GEvent.VIDEO_COLLECT, this, this.updateCollect);
            };
            VideoCollectListUI.prototype.Refresh = function () {
            };
            VideoCollectListUI.prototype.updateCollect = function () {
                this.listData = this.listData.filter(function (item) { return item.collected; });
                this.refreshList();
            };
            VideoCollectListUI.prototype.onLanguageChanged = function () {
                this.header.titleLabel.text = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.videoCllect);
                this.totalLabel.x = (Laya.stage.width + this.header.titleLabel.textField.textWidth) / 2 + 20;
                this.sortBtn.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.sort);
                this.dateSortBtn.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.sortByDate);
                this.profitSortBtn.label = HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.sortByGain);
            };
            VideoCollectListUI.prototype.Dispose = function () {
                this.UnregisterUIEvent();
                this.unbindNotify();
            };
            VideoCollectListUI.prototype.bindNotify = function () {
                HoldemPoker.Sys.net.registerNotifyMsg('CollectVideoListResponse', this, this.onGetListData);
            };
            VideoCollectListUI.prototype.unbindNotify = function () {
                HoldemPoker.Sys.net.unRegisterNotifyMsg('CollectVideoListResponse');
            };
            /**
             * 创建列表
             */
            VideoCollectListUI.prototype.initList = function () {
                this.videoList.itemRender = VideoCollectListItem;
                this.videoList.selectEnable = true;
                this.videoList.renderHandler = new Laya.Handler(this, this.updateItem);
                this.videoList.mouseHandler = new Laya.Handler(this, this.onMouse);
                this.videoList.scrollBar.elasticBackTime = HoldemPoker.SCROLLBAR_ELASTIC_TIME;
                this.videoList.scrollBar.elasticDistance = HoldemPoker.SCROLLBAR_ELASTIC_DISTANCE;
                this.videoList.array = this.listData;
            };
            /**
             * @param cell
             * @param index
             */
            VideoCollectListUI.prototype.updateItem = function (cell, index) {
                cell.itemBg.skin = HoldemPoker.mttItemOddEvenBg[index % 2];
                if (!cell.collectBtn.clickHandler) {
                    cell.collectBtn.on(Laya.Event.CLICK, this, this.onCollect, [cell.dataSource]);
                }
                cell.renderItemData(cell.dataSource);
            };
            /**
             * 点击事件
             * @param e
             * @param index
             */
            VideoCollectListUI.prototype.onMouse = function (e, index) {
                var _this = this;
                if (e.type === Laya.Event.CLICK) {
                    this.videoList.mouseEnabled = false;
                    // 延时500后再接收鼠标事件
                    Laya.timer.once(500, this, function () {
                        if (_this && _this.videoList) {
                            _this.videoList.mouseEnabled = true;
                        }
                    });
                    var videoInfo = this.listData[index];
                    if (videoInfo) {
                        HoldemPoker.Sys.ui.startLoading('', 1);
                        // if (!this.videoControl) {
                        this.videoControl = new HoldemPoker.VideoControl();
                        // }
                        this.videoControl.getData(videoInfo);
                    }
                }
            };
            /**
             * 显示场景
             */
            VideoCollectListUI.prototype.onShow = function () {
                this.x = 0;
                this.Initalize();
                HoldemPoker.UIAnimator.Start(HoldemPoker.UIAnimator.asyncFloatRight, this, { duration: 300 });
            };
            /**
             * 隐藏场景
             */
            VideoCollectListUI.prototype.onHide = function () {
                var _this = this;
                HoldemPoker.UIAnimator.Start(HoldemPoker.UIAnimator.asyncFloatLeft, this, { duration: 300 }, Laya.Handler.create(this, function () {
                    _this.Dispose();
                    _this.removeSelf();
                }));
            };
            VideoCollectListUI.prototype.onGetListData = function (data) {
                HoldemPoker.Sys.ui.stopLoading();
                this.listData = data.videoInfo;
                if (this.isInit) {
                    this.sortDateAsc = false;
                    this.sortBy(this.sortDateAsc, 'handBeginTime');
                }
                this.isInit = false;
                this.collectedCount = data.collectedCount;
                this.allCollectCount = data.allCollectCount;
                this.refreshList();
            };
            VideoCollectListUI.prototype.refreshList = function () {
                this.emptyUi.visible = this.listData.length === 0;
                this.videoList.array = this.listData;
                this.totalLabel.text = "(" + this.collectedCount + "/" + this.allCollectCount + ")";
            };
            VideoCollectListUI.prototype.getData = function () {
                HoldemPoker.Sys.ui.startLoading();
                HoldemPoker.Sys.net.requestNotify('CollectVideoListRequest', {});
            };
            VideoCollectListUI.prototype.onCollect = function (data, e) {
                e.stopPropagation();
                var request = data.collected ? 'CancelCollectVideoRequest' : 'CollectVideoRequest';
                HoldemPoker.Sys.net.sendMesage(request, {
                    recordId: data.recordId,
                    gameId: data.gameId,
                    handCount: data.handCount,
                }, new Laya.Handler(this, this.onResolveCollect), new Laya.Handler(this, this.onCollectError));
            };
            VideoCollectListUI.prototype.onResolveCollect = function (data) {
                HoldemPoker.MessageDialog.showWithText(HoldemPoker.Sys.localization.get(HoldemPoker.stringtable.cacelVideoCllectOK));
                this.collectedCount = this.collectedCount < 1 ? 0 : (this.collectedCount - 1);
                this.listData = this.listData.filter(function (item) {
                    if (item.handCount === data.handCount && item.collected) {
                        return false;
                    }
                    return true;
                });
                this.refreshList();
            };
            VideoCollectListUI.prototype.onCollectError = function (err) {
                if (err.codes) {
                    HoldemPoker.MessageDialog.showWithText(HoldemPoker.Utility.toMessageWithCode(err.codes));
                }
            };
            /**
             * toggle菜单
             * @param e
             */
            VideoCollectListUI.prototype.toggleMenu = function (e) {
                e.stopPropagation();
                this.menuBox.visible = !this.menuBox.visible;
            };
            /**
             * 隐藏菜单
             */
            VideoCollectListUI.prototype.hideMenu = function () {
                if (this.menuBox.visible === false)
                    return;
                this.menuBox.visible = false;
            };
            VideoCollectListUI.prototype.sortBy = function (isAsc, key) {
                this.listData = this.listData.sort(function (a, b) {
                    if (isAsc) {
                        return a[key] - b[key];
                    }
                    else {
                        return b[key] - a[key];
                    }
                });
                this.refreshList();
            };
            VideoCollectListUI.prototype.toggleSortByDate = function () {
                this.sortDateAsc = !this.sortDateAsc;
                this.sortBy(this.sortDateAsc, 'handBeginTime');
            };
            VideoCollectListUI.prototype.toggleSortByProfit = function () {
                this.sortProfitAsc = !this.sortProfitAsc;
                this.sortBy(this.sortProfitAsc, 'selfProfit');
            };
            return VideoCollectListUI;
        }(ui.videoView.VideoListUIUI));
        HoldemPoker.VideoCollectListUI = VideoCollectListUI;
    })(HoldemPoker = wesai.HoldemPoker || (wesai.HoldemPoker = {}));
})(wesai || (wesai = {}));
//# sourceMappingURL=VideoCollectListUI.js.map