///<reference path='../model/ItemModel.ts'/>
namespace wesai.HoldemPoker {

    //道具相关
    import reject = Promise.reject;
    export const EVENT_ITEM_UPDATE = 'EVENT_ITEM_UPDATE';
    export const EVENT_ITEM_DELETE = 'EVENT_ITEM_DELETE';
    export const EVENT_ITEM_LIST_CHANGE = 'EVENT_ITEM_LIST_CHANGE';
    export const EVENT_ITEM_USE_SUCCESS = 'EVENT_ITEM_USE_SUCCESS';
    export const EVENT_ITEM_USE_FAILED = 'EVENT_ITEM_USE_FAILED';
    export const EVENT_LUCKY_ITEM__DRESS = 'EVENT_LUCKY_ITEM__DRESS';

    //虚拟币


    export class ItemRepository extends Repository implements RepositoryInterface {

        public page: number = 1;

        private pageSize: number = Number.MAX_VALUE;

        //最后一次请求列表类型
        public lastItemType: ItemType = ItemType.Ticket;

        //所有物品
        private _items: ItemModel[] = [];

        //玩家信息
        private playerInfo: PlayerData = Sys.players.self;

        /**
         * 后台道具为0时后台没下发，初始化基本道具
         * 如钻石，大师分等
         * @type {Array}
         */
        private baseItems: ItemModel[] = [];

        //服务器发的原始物品模板
        private originTemplates: msg.ItemTemplate[] = [];

        constructor(net: NetworkMgr) {
            super(net);
            this.bindResponse();
        }

        /**
         * 监听socket
         */
        protected bindResponse() {

            //道具模板下发
            this.net.registerNotifyMsg('ItemTemplateNotify', this, (result: msg.ItemTemplateNotify) => {
                if (!CommonHelper.isEmptyObject(result.itemTemplates)) {
                    this.originTemplates = result.itemTemplates;
                    /**
                     * ItemTemplateNotify和PlayerItemNotify的先后顺序不能保证
                     * 如果先收到道具PlayerItemNotify，需要同步ItemModel没有的数据
                     */
                    // if (this._items.length) {
                    //     this._items.map(item => {
                    //         let templateData: msg.ItemTemplate = this.findItemTemplateById(item.templateId);
                    //         if (templateData) {
                    //             item.name = templateData.name;
                    //             item.type = templateData.type;
                    //             item.image = templateData.icon;
                    //             item.description = templateData.desc;
                    //             item.canGift = templateData.canGift;
                    //             item.imageSml = templateData.smallIcon;
                    //             item.engName = templateData.engName;
                    //             item.engDesc = templateData.engDesc;
                    //         }
                    //         return item;
                    //     });
                    // }
                }
            });

            //玩家道具下发
            this.net.registerNotifyMsg('PlayerItemNotify', this, (result) => {
                if (result.playerItems) {
                    this._items = result.playerItems.map(item => {
                        return this.newModel(item);
                    });
                }

            });

            //增加道具通知
            this.net.registerNotifyMsg('AddPlayerItemNotify', this, (result) => {
                if (result.addItems && Array.isArray(result.addItems)) {
                    for (let addItem of result.addItems) {
                        let item = this.newModel(addItem);
                        this.updateItemAmount(item);
                    }
                    this.event(EVENT_ITEM_LIST_CHANGE, [this.getItems()]);
                }
            });

            //删除道具通知
            this.net.registerNotifyMsg('DeletePlayerItemNotify', this, (result) => {
                if (result.itemCount && Array.isArray(result.itemCount)) {
                    let items = [];
                    for (let item of result.itemCount) {
                        items.push(this.deleteByIdAndAmount(item.itemId, item.count));
                    }
                    // let deletedItem = this.deleteByIdAndAmount(result.itemId, result.count);
                    this.event(EVENT_ITEM_LIST_CHANGE, [this.getItems()]);
                    this.event(EVENT_ITEM_DELETE, [items]);
                }

            });

            //使用道具响应
            // this.net.registerNotifyMsg('UseItemResponse', this, (result) => {
            //
            // });

        }

        /**
         * 取消监听socket
         */
        protected unbindResponse() {

            this.net.unRegisterNotifyMsg('ItemTemplateNotify');
            this.net.unRegisterNotifyMsg('PlayerItemNotify');
            this.net.unRegisterNotifyMsg('AddPlayerItemNotify');
            this.net.unRegisterNotifyMsg('DeletePlayerItemNotify');
            // this.net.unRegisterNotifyMsg('UseItemResponse');

        }

        /**
         * dispose
         */
        public dispose() {
            this.unbindResponse();
        }

        /**
         * 创建itemModel
         * @param originItem
         * @returns {ItemModel}
         */
        protected newModel(originItem: msg.PlayerItem) {
            let itemModel: ItemModel = new ItemModelBase();
            let templateData: msg.ItemTemplate = this.findItemTemplateById(originItem.itemTempId);
            if (templateData) {
                itemModel.name = templateData.name;
                itemModel.type = templateData.type;
                itemModel.image = templateData.icon;
                itemModel.description = templateData.desc;
                itemModel.canGift = templateData.canGift;
                itemModel.imageSml = templateData.smallIcon;
                itemModel.engName = templateData.engName;
                itemModel.engDesc = templateData.engDesc;
            }
            itemModel.id = originItem.itemId;
            itemModel.amount = originItem.count;
            itemModel.expireTime = originItem.expireTime;
            itemModel.templateId = originItem.itemTempId;
            return itemModel;
        }

        /**
         * 是否存在
         * @param itemModel
         * @returns {number}
         */
        protected getExistIndex(itemModel: ItemModel) {
            let existIndex = -1;
            let flag = this._items.some((item, index) => {
                existIndex = index;
                return itemModel.id === item.id;
            });
            if (!flag) {
                return -1;
            }
            return existIndex;
        }

        /**
         *
         * @param itemId
         * @returns {number}
         */
        protected getExistIndexById(itemId: string) {
            let existIndex = -1;
            let flag = this._items.some((item, index) => {
                existIndex = index;
                return item.id === itemId;
            });
            if (!flag) {
                return -1;
            }
            return existIndex;
        }

        /**
         * create
         * @param item
         */
        public create(item: ItemModel) {
            this._items.push(item);
        }

        /**
         * update
         * @param item
         */
        public update(item: ItemModel) {
            const hasIndex = this.getExistIndex(item);
            if (hasIndex !== -1) {
                this._items.splice(hasIndex, 1, item);
            } else {
                this.create(item);
            }
        }

        /**
         * 删除
         * @param item
         */
        public delete(item: ItemModel) {
            const hasIndex = this.getExistIndex(item);
            if (hasIndex !== -1) {
                this._items.splice(hasIndex, 1);
            }
        }

        /**
         *
         * @param type
         * @param page
         * @param pageSize
         * @returns {ItemModel[]}
         */
        public getItems(type: ItemType = this.lastItemType, page: number = this.page, pageSize = this.pageSize) {
            let items: ItemModel[];
            if (type) {

                /**
                 * 分类筛选
                 * 幸运物和幸运物券作为一个整体
                 * 除了票和实物都为其它
                 */
                if (type === ItemType.LuckyItem || type === ItemType.LuckyTicket) {
                    items = this._items.filter(item => {
                        return ((item.type === ItemType.LuckyItem) || (item.type === ItemType.LuckyTicket)) && (item.amount > 0);
                    });
                } else if (type === ItemType.Other) {
                    items = this._items.filter(item => {
                        let otherType: boolean = (<ItemType>item.type !== ItemType.VirtualCurrency) &&
                            (<ItemType>item.type !== ItemType.Ticket) &&
                            (<ItemType>item.type !== ItemType.LuckyItem) &&
                            (<ItemType>item.type !== ItemType.LuckyTicket);
                        return otherType && (item.amount > 0);
                    });
                } else {
                    items = this._items.filter(item => {
                        return (item.type === type) && (item.amount > 0);
                    });
                }
                //分页
                // items = items.slice((page * pageSize) - pageSize, page * pageSize);
                items = items.slice(0, page * pageSize);

                //幸运物排在幸运物券前面
                if (type === ItemType.LuckyItem || type === ItemType.LuckyTicket) {
                    items.sort((a, b) => {
                        return a.type - b.type;
                    }).sort((a, b) => {
                        return a.templateId - b.templateId;
                    });
                }
            } else {
                items = this._items;
            }
            //记录下最后拉取的类型，用于列表界面自动更新
            this.lastItemType = <ItemType>type;
            return items;
        }

        /**
         * 删除数量
         * @param itemId
         * @param amount
         */
        public deleteByIdAndAmount(itemId: string, amount: number): ItemModel {
            const hasIndex = this.getExistIndexById(itemId);
            if (hasIndex !== -1) {
                let item = this._items[hasIndex];
                let restAmount = item.amount - parseInt('' + amount);
                //数量为0是删除，不为0为更新
                if (restAmount <= 0) {
                    this._items.splice(hasIndex, 1);
                } else {
                    item.amount = restAmount;
                    this.update(item);
                }
                return item;
            } else {
                return null;
            }
        }

        /**
         * 添加或更新数量
         * @param itemModel
         */
        public updateItemAmount(itemModel: ItemModel): void {
            const hasIndex = this.getExistIndex(itemModel);
            //存在更新数量，不存在直接添加
            if (hasIndex !== -1) {
                let item = this._items[hasIndex];
                //后台约定是数量为0是更新item实体
                if (itemModel.amount === 0) {
                    item = {...itemModel, amount: item.amount};
                } else {
                    item.amount = item.amount + parseInt('' + itemModel.amount);
                }
                this.update(item);
            } else {
                this.create(itemModel);
            }
        }

        /**
         * 使用道具
         * @param itemId
         * @param amount
         * @param otherData
         * @returns {Promise<any>}
         */
        public async useItem(itemId: string, amount?: number, otherData?: any): Promise<any> {
            let postData: msg.UseItemRequest = {
                itemId: itemId
            };
            //有amount才发送
            if (amount) {
                amount = parseInt('' + amount);
                if (isNaN(amount)) {
                    // throw new Error('amount type error');
                    console.log('amount type error');
                    return;
                }
                postData.count = amount;
            }
            //其它信息
            if (otherData) {
                postData = {...postData, ...otherData};
            }

            try {
                let result = await this.resolveRequest('UseItemRequest', postData);
                this.event(EVENT_ITEM_USE_SUCCESS, [result]);
                return result;
            } catch (err) {
                this.event(EVENT_ITEM_USE_FAILED, [err]);
                if (err.codes === msg.Codes.ErrItemNotEnough) {
                    MessageDialog.showWithText(Utility.toMessageWithCode(err.codes));
                } else {
                    MessageDialog.showWithText(Sys.localization.get(stringtable.serverError));
                }
                return Promise.reject(err);
            }
        }

        /**
         * 获取道具模板
         * @param templateId
         * @returns {any}
         */
        public findItemTemplateById(templateId: number): msg.ItemTemplate {
            if (!templateId || isNaN(templateId)) {
                // throw new Error('没有传入正确的道具模板Id:' + templateId);
                console.log('没有传入正确的道具模板Id:' + templateId);
                return;
            }
            let templateData;
            if (this.originTemplates.length) {
                let templates = this.originTemplates.filter(template => {
                    return templateId === template.itemTempId;
                });
                templateData = templates.length ? templates[0] : null;
            }
            return templateData;
        }

        /**
         *根据模板id找到一个道具就返回
         * @param templateId
         * @returns {ItemModel}
         */
        public findOneByTemplateId(templateId: number): ItemModel {
            let items = this._items;
            items = items.sort(this.sortByExpireTime).sort(this.sortByTemplateId).filter(item => {
                return item.templateId === templateId;
            });
            return items.length ? items[0] : null;
        }

        /**
         * 报名费字符串转obj
         * @param entryStr
         * @returns {[{id: string, value: string},{id: string, value: string},{id: string, value: string},{id: string, value: string},{id: string, value: string}]}
         */
        private itemsStrToObj(entryStr: string) {
            if (!entryStr || entryStr.indexOf(':') === -1) {
                // throw new Error('道具字符串格式不正确');
                //兼容以前的
                entryStr = '1:' + entryStr;
            }
            let arr = entryStr.split(',');
            return arr.filter(item => item !== '').map(item => {
                let innerArr = item.split(':');
                return {
                    id: innerArr[0],
                    value: innerArr[1]
                };
            });
        }

        /**
         * 根据道具字符串是否是免费赛
         * @param entryStr
         * @returns {boolean}
         */
        public isFreeWithItemsStr(entryStr: string): boolean {
            let flag = false;
            let items = this.itemsStrMapToTemplate(entryStr);
            //如果花费都是0，为免费
            if (items.every(template => {
                    return template.costAmount === 0;
                })) {
                flag = true;
            } else {
                //存在货币类型中一个为0的，也是免费
                if (items.some(template => {
                        return template.costAmount === 0 && template.type === ItemType.VirtualCurrency;
                    })) {
                    flag = true;
                }
            }
            return flag;
        }

        /**
         * 报名费字符串对应模板数据
         * 用于显示报名花费道具,
         * 根据templateId ASC排序取前两个显示
         * @param entryStr
         * @returns {[msg.ItemTemplate,msg.ItemTemplate,msg.ItemTemplate,msg.ItemTemplate,msg.ItemTemplate]}
         */
        public itemsStrMapToTemplate(entryStr: string, truncate: boolean = false, sort: boolean = true): EntryFeeItemTemplate[] {
            let items = this.itemsStrToObj(entryStr);
            if (sort) {
                items.sort((a, b) => parseInt(a.id) - parseInt(b.id));
            }
            let templates = items.map(item => {
                let template = this.findItemTemplateById(parseInt(item.id));
                if (!template) {
                    // throw new Error('道具ID:' + item.id + '对应模板不存在');
                    console.log('道具ID:' + item.id + '对应模板不存在');
                    return;
                }
                //添加一个costAmount到template中用于显示数量
                return {
                    costAmount: parseInt(item.value),
                    ...template
                };
            });
            return truncate ? templates.slice(0, 2) : templates;
        }

        /**
         * 道具字符串转为显示字符
         * @param itemsStr
         * @param hasAmount
         * @param separator
         * @param number
         */
        public itemsStrToDisplayStr(itemsStr: string, hasAmount: boolean = false, separator: string = '+', count?: number): string {
            let templates = this.itemsStrMapToTemplate(itemsStr);
            let tempArr = [];
            if (count && count > 0) {
                templates = templates.slice(0, count - 1);
            }
            for (let template of templates) {
                if (template.type === ItemType.VirtualCurrency) {
                    tempArr.push(`${template.costAmount}${template.name}`);
                } else {
                    if (hasAmount) {
                        tempArr.push(`${template.name}*${template.costAmount}`);
                    } else {
                        tempArr.push(`${template.name}`);
                    }
                }
            }
            return tempArr.join(separator);
        }

        /**
         * 报名费门票字符串
         * @param entryStr
         * @param applyType
         * @param feePercent
         * @returns {string}
         */
        public entryFeeDisplayStr(entryStr: string, applyType: ApplyType, feePercent: number): string {
            let templates = this.itemsStrMapToTemplate(entryStr);
            let tempArr = [];
            for (let template of templates) {
                if (template.type === ItemType.VirtualCurrency) {
                    let costAmount = template.costAmount + Math.ceil(template.costAmount * feePercent / 100);
                    tempArr.push(`${costAmount}${template.name}`);
                } else {
                    tempArr.push(`${template.name}*${template.costAmount}`);
                }
            }
            return tempArr.join(applyTypeDisplay[applyType]);
        }

        /**
         * 可使用的报名费门票字符串
         * @param entryStr
         * @param applyType
         * @param feePercent
         * @returns {string}
         */
        public entryFeeResolveDisplayStr(entryStr: string, applyType: ApplyType, feePercent: number): string {
            let templates = this.resolveEntryFeePostItems(entryStr, applyType, feePercent);
            let tempArr = [];
            for (let template of templates) {
                if (template.type === ItemType.VirtualCurrency) {
                    let costAmount = template.costAmount + Math.ceil(template.costAmount * feePercent / 100);
                    tempArr.push(`${template.name}x${costAmount}`);
                } else {
                    tempArr.push(`${template.name}x${template.costAmount}`);
                }
            }
            return tempArr.join(applyTypeDisplay[applyType]);
        }

        /**
         * 验证报名道具
         * @param entryStr
         * @param applyType
         */
        public validateEntryFee(entryStr: string, applyType: ApplyType, feePercent: number): ApplyValidError {
            // 所有对应模板
            let templates = this.itemsStrMapToTemplate(entryStr).sort((a, b) => a.itemTempId - b.itemTempId),
                findItem,
                findTemplate,
                result: ApplyValidError = {
                    flag: true
                };
            if (!templates.length) {
                // throw new Error('报名验证参数有错');
                console.log('报名验证参数有错');
                return;
            }
            //免费
            if (this.isFreeWithItemsStr(entryStr)) {
                return result;
            }
            //一个时的处理
            if (templates.length === 1) {
                findItem = this.findOneByTemplateId(templates[0].itemTempId);
                //不是的，找不到直接返回错误的
                if (!findItem) {
                    result.flag = false;
                    result.errorTemplate = templates[0];
                    //加上服务费
                    if (result.errorTemplate.type === ItemType.VirtualCurrency) {
                        result.errorTemplate.costAmount += Math.ceil(result.errorTemplate.costAmount * feePercent / 100);
                    }
                    return result;
                } else {
                    let costAmount = templates[0].costAmount;
                    if (findItem.type === ItemType.VirtualCurrency) {
                        costAmount += Math.ceil(costAmount * feePercent / 100);
                    }
                    if (findItem.amount < costAmount) {
                        result.flag = false;
                        result.errorTemplate = templates[0];
                        //加上服务费
                        if (result.errorTemplate.type === ItemType.VirtualCurrency) {
                            result.errorTemplate.costAmount += Math.ceil(result.errorTemplate.costAmount * feePercent / 100);
                        }
                        return result;
                    }
                }

            } else {
                if (applyType === ApplyType.Or) {

                    //无可用报名道具
                    if (!templates.some(item => {
                            findItem = this.findOneByTemplateId(item.itemTempId);
                            if (findItem && findItem.type === ItemType.VirtualCurrency) {
                                let costAmount = item.costAmount + Math.ceil(item.costAmount * feePercent / 100);
                                return findItem && findItem.amount >= costAmount;
                            }
                            return findItem && findItem.amount >= item.costAmount;
                        })) {

                        result.flag = false;

                        //优先提示微赛币不足
                        if (templates.some(item => {
                                findTemplate = item;
                                return item.itemTempId === VirtualCurrencyType.WesaiCurrency;
                            })) {
                            //加上服务费
                            findTemplate.costAmount += Math.ceil(findTemplate.costAmount * feePercent / 100);
                            result.errorTemplate = findTemplate;
                            return result;
                        }

                        //提示钻石不足
                        if (templates.some(item => {
                                findTemplate = item;
                                return item.itemTempId === VirtualCurrencyType.DiamondCurrency;
                            })) {
                            result.errorTemplate = findTemplate;
                            return result;
                        }

                        //提示大师分不足
                        if (templates.some(item => {
                                findTemplate = item;
                                return item.itemTempId === VirtualCurrencyType.MasterCurrency;
                            })) {
                            result.errorTemplate = findTemplate;
                            return result;
                        }

                        //门票不足
                        if (templates.some(item => {
                                findTemplate = item;
                                return item.type === ItemType.Ticket;
                            })) {
                            result.errorTemplate = findTemplate;
                            return result;
                        }

                    }

                } else if (applyType === ApplyType.And) {
                    //所需报名道具和本地道具不匹配
                    if (!templates.every(item => {
                            findItem = this.findOneByTemplateId(item.itemTempId);
                            findTemplate = item;
                            if (findItem && findItem.type === ItemType.VirtualCurrency) {
                                let costAmount = item.costAmount + Math.ceil(item.costAmount * feePercent / 100);
                                return findItem && findItem.amount >= costAmount;
                            }
                            return findItem && findItem.amount >= item.costAmount;
                        })) {
                        result.flag = false;
                        //加上服务费
                        if (findTemplate.type === ItemType.VirtualCurrency) {
                            findTemplate.costAmount += Math.ceil(findTemplate.costAmount * feePercent / 100);
                        }
                        result.errorTemplate = findTemplate;
                        return result;
                    }
                }
            }
            return result;
        }

        /**
         * 处理报名费
         * 原始数据为=>1:100,2:10
         * 结果null表示没有，
         * 0表示后台配置的道具免费
         * @param entryStr
         * @returns {{ticketItem: null, entryFee: null, entryFeeDiamond: null, items: {id: string, value: string}[]}}
         */
        public resolveEntryFee(entryStr: string): EntryFeeObj {
            let items = this.itemsStrToObj(entryStr);
            let entryFee = null,
                entryFeeDiamond = null,
                entryFeeMaster = null,
                ticketItem = null;

            //找出报名道具，用于显示判断，门票|微赛币|钻石
            items.forEach(item => {
                if (parseInt(item.id) === VirtualCurrencyType.WesaiCurrency) {
                    entryFee = parseInt(item.value);
                } else if (parseInt(item.id) === VirtualCurrencyType.DiamondCurrency) {
                    entryFeeDiamond = parseInt(item.value);
                } else if (parseInt(item.id) === VirtualCurrencyType.MasterCurrency) {
                    entryFeeMaster = parseInt(item.value);
                }
                else {
                    let template = this.findItemTemplateById(parseInt(item.id));
                    if (template && template.type === ItemType.Ticket) {
                        ticketItem = parseInt(item.value);
                    }
                }
            });

            //返回报名需要道具
            return {
                ticketItem,
                entryFee,
                entryFeeDiamond,
                entryFeeMaster
            };

        }

        /**
         * 提交报名道具id字符串
         * @param entryStr
         * @param applyType
         * @returns {string}
         */
        public resolveEntryFeePostStr(entryStr: string, applyType: ApplyType, applyFeePercent: number): string {
            //默认返回空
            let resolveStr = '';
            let postItems = this.resolveEntryFeePostItems(entryStr, applyType, applyFeePercent);
            let idArr = postItems.map(item => {
                return item.id;
            });
            if (idArr.length) {
                resolveStr = idArr.join(',');
            }
            return resolveStr;
        }

        /**
         * 返回最终报名可使用的道具,
         * 在ItemModel上加了costAmount方便报名类型不同时验证
         * @param entryStr
         * @param applyType
         * @returns {ItemModel[]}
         */
        public resolveEntryFeePostItems(entryStr: string, applyType: ApplyType, applyFeePercent: number): ItemModel[] {
            //默认返回空
            let items: ItemModel[] = [],
                findItem: any,
                tempArr: ItemModel[] = [];
            let fees = this.itemsStrToObj(entryStr);
            //免费
            if (this.isFreeWithItemsStr(entryStr)) {
                return [];
            }
            if (!fees.length || !applyType) {
                // throw new Error('报名数据出错');
                console.log('报名数据出错');
                return;
            } else if (fees.length === 1) {
                // 只配置一种报名道具，直接去找
                findItem = this.findOneByTemplateId(parseInt(fees[0].id));
                if (findItem) {
                    let costAmount = parseInt(fees[0].value);
                    //货币时加服务费
                    if (findItem.type === ItemType.VirtualCurrency) {
                        costAmount += Math.ceil(costAmount * applyFeePercent / 100);
                    }
                    if (findItem.amount >= costAmount) {
                        findItem.costAmount = parseInt(fees[0].value);
                        items = [findItem, ...items];
                    }
                } else {
                    // throw new Error('缺少用于报名的道具或者报名道具数量不足');
                }
            } else {
                // 优先去找门票，没有门票就任意找一个
                if (applyType === ApplyType.Or) {
                    findItem = this.existItemWidthEntryFee(entryStr, ItemType.Ticket);
                    if (findItem) {
                        items = [findItem, ...items];
                    } else {
                        //任意找一个
                        for (let fee of fees) {
                            findItem = this.findOneByTemplateId(parseInt(fee.id));
                            if (findItem) {
                                let costAmount = parseInt(fee.value);
                                //货币时加服务费
                                if (findItem.type === ItemType.VirtualCurrency) {
                                    costAmount += Math.ceil(costAmount * applyFeePercent / 100);
                                }
                                if (findItem.amount >= costAmount) {
                                    findItem.costAmount = parseInt(fee.value);
                                    break;
                                }
                            }
                        }
                        if (findItem) {
                            items = [findItem, ...items];
                        } else {
                            // throw new Error('缺少用于报名的道具或者报名道具数量不足');
                        }
                    }

                } else if (applyType === ApplyType.And) {
                    //找到所有的，拼到一起
                    fees.forEach(item => {
                        findItem = this.findOneByTemplateId(parseInt(item.id));
                        if (findItem) {
                            let costAmount = parseInt(item.value);
                            //货币时加服务费
                            if (findItem.type === ItemType.VirtualCurrency) {
                                costAmount += Math.ceil(costAmount * applyFeePercent / 100);
                            }
                            if (findItem.amount >= costAmount) {
                                findItem.costAmount = parseInt(item.value);
                                tempArr = [findItem, ...tempArr];
                            }
                        }
                    });
                    if (fees.length !== tempArr.length) {
                        // throw new Error('用于报名的道具和本地道具不匹配');
                    }
                    items = [...tempArr, ...items];
                }
            }
            // console.log('报名的道具', items);
            return items;
        }

        /**
         * 报名道具字符串判断是否符合
         * @param entryStr
         * @param type
         * @returns {ItemModel}
         */
        public existItemWidthEntryFee(entryStr: string, type?: ItemType): ItemModel {
            let fees = this.itemsStrToObj(entryStr),
                items = this._items,
                findItem;
            //按有效时长排序，兼容时效道具
            items.sort(this.sortByExpireTime);
            for (let fee of fees) {
                //找到一个就停止遍历
                if (items.some(item => {
                        findItem = item;
                        findItem.costAmount = parseInt(fee.value);
                        if (type) {
                            return item.templateId === parseInt(fee.id) && item.amount >= parseInt(fee.value) && item.type === type;
                        } else {
                            return item.templateId === parseInt(fee.id) && item.amount >= parseInt(fee.value);
                        }
                    })) {
                    break;
                } else {
                    //没有找到设为null
                    findItem = null;
                }
            }
            return findItem;
        }

        /**
         * 按过期时间排序
         * @param a
         * @param b
         * @returns {number}
         */
        private sortByExpireTime(a, b): number {
            return parseInt(a.expireTime) - parseInt(b.expireTime);
        }

        /**
         * 按模板ID ASC排序
         * @param a
         * @param b
         * @returns {number}
         */
        private sortByTemplateId(a, b): number {
            return parseInt(a.templateId) - parseInt(b.templateId);
        }

        /**
         * 验证货币是否足够
         * @param amount
         * @param type
         * @returns {boolean}
         */
        public compareEnoughCurrency(amount: number
            | string, type: VirtualCurrencyType = VirtualCurrencyType.WesaiCurrency): boolean {
            if (typeof amount === 'string') {
                amount = parseInt(amount);
            }
            let total: number = 0,
                item: ItemModel;
            item = this.findOneByTemplateId(type);
            if (item) {
                total = item.amount;
            }
            return total >= amount;
        }

        /**
         * 取货币
         * @param type
         * @returns {number}
         */
        public getCurrency(type: VirtualCurrencyType = VirtualCurrencyType.WesaiCurrency): number {
            let item = this.findOneByTemplateId(type);
            if (!item) {
                return 0;
            }
            return item.amount;
        }

        /**
         * 道具对应的icon
         * @param itemId
         * @returns {any}
         */
        public getItemIcon(itemId: number): string {
            let icon = virtualCurrencyIcon[VirtualCurrencyType.DiamondCurrency];
            let itemTemplate = this.findItemTemplateById(itemId);
            if (!itemTemplate) {
                return '';
            }
            if (itemTemplate.type === ItemType.VirtualCurrency) {
                icon = virtualCurrencyIcon[itemTemplate.itemTempId];
            } else {
                icon = itemTypeImageDefault[itemTemplate.type];
            }
            return icon;
        }

        /**
         * 装配道具
         * @param itemTemplateId
         * @returns {Promise<any>}
         */
        public async dressUpItem(itemTemplateId: number) {
            let postData: msg.TakeMascotRequest = {
                itemTempId: itemTemplateId
            };
            try {
                let result: msg.TakeMascotResponse = await this.resolveRequest('TakeMascotRequest', postData);
                if (result.curMascotItemTempId || result.curMascotItemTempId === 0) {
                    this.playerInfo.equippedMascot = result.curMascotItemTempId;
                    this.event(EVENT_ITEM_LIST_CHANGE, [this.getItems()]);
                    // let dressFlag = (result.curMascotItemTempId && result.curMascotItemTempId !== 0) ? true : false;
                    let flagObj = {
                        flag: false,
                        item: null
                    };
                    if (result.curMascotItemTempId !== 0) {
                        flagObj.item = Sys.itemMgr.itemRepository.findOneByTemplateId(result.curMascotItemTempId);
                        flagObj.flag = true;
                    }
                    this.event(EVENT_LUCKY_ITEM__DRESS, [flagObj]);
                    return flagObj;
                } else {
                    MessageDialog.showWithText(Sys.localization.get(stringtable.setUpFailure));
                    return null;
                }
            } catch (e) {
                MessageDialog.showWithText(Sys.localization.get(stringtable.setUpFailure));
                return null;
            }
        }

        /**
         * 赠送道具确认玩家
         * @param itemTemplateId
         * @returns {Promise<any>}
         */
        public async donateEnsurePlayer(playerId: number) {
            let postData: msg.HandselItemPlayerInfoRequest = {
                targetPlayerId: playerId
            };
            return this.resolveRequest('HandselItemPlayerInfoRequest', postData);
        }

        /**
         * 赠送道具
         * @param itemId
         * @param amount
         * @param playerId
         * @returns {Promise<any>}
         */
        public async donateItemToPlayer(itemId: string, amount: number, playerId: number) {
            let postData: msg.HandselItemRequest = {
                itemId: itemId,
                count: amount,
                targetPlayerId: playerId
            };
            return this.resolveRequest('HandselItemRequest', postData);
        }


        /**
         * 是否已装备吉祥物
         * @param item
         * @returns {boolean}
         */
        public isEquippedMascot(item: ItemModel): boolean {
            return this.playerInfo.equippedMascot && (this.playerInfo.equippedMascot === item.templateId);
        }


        /**
         * 手动触发更新
         */
        public triggerListChange() {
            this.event(EVENT_ITEM_LIST_CHANGE, [this.getItems()]);
        }

        /**
         * 微赛币|钻石转换
         * @param {number} amount
         * @param {boolean} reverse
         * @returns {number}
         */
        public goldConvertToDiamond(amount: number, reverse: boolean = false): number {
            //逆转
            if (reverse) {
                return amount * this.getGoldToDiamondRatio(amount);
            }
            return Math.ceil(amount / this.getGoldToDiamondRatio(amount));
        }


        public getGoldToDiamondRatio(amount: number): number {
            let ratio: number;
            // let diamondToMoneyMap: msg.Product[] = ItemConfg.goldToDiamondMap.filter(item => item.itemTempId === 1).sort((a, b) => a.diamondCost - b.diamondCost);
            // let last = diamondToMoneyMap[diamondToMoneyMap.length - 1];
            // for (let item of diamondToMoneyMap) {
            //     if (amount <= item.count) {
            //         ratio = item.count / item.diamondCost;
            //         break;
            //     }
            // }
            // if (!ratio) {
            //     ratio = last.count / last.diamondCost;
            // }
            // //如果是除不尽的，丢掉一位，保证要比算出来的小
            // let ratioStr: string = ratio.toFixed(3);
            // ratioStr = ratioStr.substring(0, ratioStr.length - 1);
            // return Number(ratioStr);
            let diamondToMoneyMap: msg.Product[] = ItemConfg.goldToDiamondMap.filter(item => item.itemTempId === 1).sort((a, b) => a.diamondCost - b.diamondCost);
            let ratios: number[] = diamondToMoneyMap.map(item => item.count / item.diamondCost);
            let index: number = 0;
            for (let i = 0; i < diamondToMoneyMap.length; i++) {
                console.log(diamondToMoneyMap[i]);
                if (amount < diamondToMoneyMap[i].count) {
                    index = i;
                    break;
                }
            }
            ratio = index === 0 ? ratios[0] : ratios[index - 1];
            return ratio;
        }

        /**
         * 微赛币|钻石转换的实体
         * @param goldAmount
         * @returns {any}
         */
        public goldConvertToDiamondProduct(goldAmount: number): msg.Product {
            //真实需要的钻石
            // let costDiamond: number = Math.ceil(goldAmount / this.getGoldToDiamondRatio(goldAmount));
            //我的钻石
            let myDiamond: number = Sys.itemMgr.itemRepository.getCurrency(VirtualCurrencyType.DiamondCurrency);
            //我的钻石够,返回对应的区间值
            // if (myDiamond >= costDiamond) {
            let diamondToMoneyMap: msg.Product[] = ItemConfg.goldToDiamondMap.filter(item => item.itemTempId === 1).sort((a, b) => a.diamondCost - b.diamondCost);
            for (let item of diamondToMoneyMap) {
                // if (costDiamond <= item.diamondCost && item.diamondCost <= myDiamond) {
                if (goldAmount <= item.count && item.diamondCost <= myDiamond) {
                    return item;
                }
            }
            // }
            return null;
        }

        /**
         * 金币数量返回金币对应的钻石区间实体
         * @param goldAmount
         * @returns {msg.Product}
         */
        public goldToDiamondProduct(goldAmount: number): msg.Product {
            let product: msg.Product;
            let diamondToMoneyMap: msg.Product[] = ItemConfg.goldToDiamondMap.filter(item => item.itemTempId === 1).sort((a, b) => a.diamondCost - b.diamondCost);
            for (let item of diamondToMoneyMap) {
                if (goldAmount <= item.count) {
                    product = item;
                    break;
                }
            }
            //没符合的就返回最后一个
            if (!product) {
                product = diamondToMoneyMap[diamondToMoneyMap.length - 1];
            }
            return product;
        }

        /**
         * 差钻石对应的购买实体
         * @param diamondAmount
         * @returns {any}
         */
        public diamondConvertPayment(diamondAmount: number): msg.Payment {
            //返回对应的区间值
            let diamondToMoneyMap: msg.Payment[] = ItemConfg.diamondToMoneyMap.sort((a, b) => a.diamond - b.diamond);
            for (let item of diamondToMoneyMap) {
                //找到满足的就返回
                if (diamondAmount <= item.diamond) {
                    return item;
                }
            }
            //没找到就取最大一个了
            return diamondToMoneyMap[diamondToMoneyMap.length - 1];
        }

        /**
         * 支付处理
         * @param {wesai.HoldemPoker.ApplyValidError} applyValidError
         * @param {(quickPayResult: wesai.HoldemPoker.QuickPayResult) => void} successHandler
         * @param {(quickPayResult?: wesai.HoldemPoker.QuickPayResult) => void} cancelHandler
         * @param {number} timeout
         * @param caller
         */
        public resolveQuickPay(applyValidError: ApplyValidError, successHandler: (quickPayResult: QuickPayResult) => void, cancelHandler: (quickPayResult?: QuickPayResult) => void = () => {
        }, timeout?: number, caller?: any): void {
            if (applyValidError.flag === true) {
                caller ? cancelHandler.bind(caller)() : cancelHandler();
                return;
            }
            //清楚计时器
            let clearTimer = () => {
                if (intervalTimer) {
                    clearInterval(intervalTimer);
                }
                MessagePrompt.cancel(false);
            };
            //开始倒计时
            let intervalTimer: any;
            if (timeout && typeof timeout === 'number') {
                timeout = Math.ceil(timeout / 1000);
                intervalTimer = setInterval(() => {
                    MessagePrompt.setCannelText(Sys.localization.get(stringtable.cancel) + "(" + timeout + ")");
                    timeout--;
                    if (timeout < 0) {
                        caller ? cancelHandler.bind(caller)() : cancelHandler();
                        clearTimer();
                    }
                }, 1000);
            }
            let errorTemplate = applyValidError.errorTemplate;
            if (errorTemplate) {
                //微赛币不足
                if (errorTemplate.itemTempId === VirtualCurrencyType.WesaiCurrency) {
                    //差多少
                    let lackGold = Math.abs(Sys.itemMgr.itemRepository.getCurrency() - errorTemplate.costAmount);
                    //转化的钻石
                    let convertProduct: msg.Product = Sys.itemMgr.itemRepository.goldConvertToDiamondProduct(lackGold);
                    //钻石够，请求转换
                    if (convertProduct !== null) {
                        //支付结果
                        let payResult: QuickPayResult = {
                            payType: QuickPayType.Gold,
                            amount: convertProduct.diamondCost * goldToDiamondRatio
                        };
                        let content = `微赛币不足，确定要转化${convertProduct.diamondCost}钻石为微赛币吗？`;
                        MessagePrompt.openPrompt(content,
                            Laya.Handler.create(this, () => {
                                //钻石转换微赛币
                                Sys.ui.startLoading("", 1);
                                this.resolveRequest('MallBuyRequest', {productId: convertProduct.id}).then((data: msg.MallBuyResponse) => {
                                    console.log('msg.MallBuyResponse', data);
                                    caller ? successHandler.bind(caller)(payResult) : successHandler(payResult);
                                    clearTimer();
                                }).catch((data: msg.ErrorMsg) => {
                                    console.log('error msg.MallBuyResponse', data);
                                    if (data && data.codes) {
                                        MessageDialog.showWithText(Utility.toMessageWithCode(data.codes));
                                    }
                                    caller ? cancelHandler.bind(caller)(payResult) : cancelHandler(payResult);
                                    clearTimer();
                                });
                            }), Laya.Handler.create(this, () => {
                                caller ? cancelHandler.bind(caller)(payResult) : cancelHandler(payResult);
                                clearTimer();
                            }));
                    } else {//钻石不足去买钻石
                        //还差多少钻石
                        let myDiamond: number = Sys.itemMgr.itemRepository.getCurrency(VirtualCurrencyType.DiamondCurrency);
                        // let needDiamond: number = Sys.itemMgr.itemRepository.goldConvertToDiamond(lackGold);
                        let needDiamond: number = 0;
                        let diamondItem = Sys.itemMgr.itemRepository.goldToDiamondProduct(lackGold);
                        if (diamondItem) {
                            needDiamond = Math.abs(diamondItem.diamondCost - myDiamond);
                            let convertPayment: msg.Payment = Sys.itemMgr.itemRepository.diamondConvertPayment(Math.abs(needDiamond));
                            if (convertPayment) {
                                //支付结果
                                let payResult: QuickPayResult = {
                                    payType: QuickPayType.DiamondToGold,
                                    amount: convertPayment.diamond * goldToDiamondRatio
                                };
                                let content = `您还需要${lackGold}微赛币,确定要购买${convertPayment.diamond}钻石吗？`;
                                MessagePrompt.openPrompt(content,
                                    Laya.Handler.create(this, () => {
                                        //购买钻石
                                        let data: msg.MallOrderRequest = {
                                            type: msg.PayType.Wechat,
                                            paymentId: convertPayment.id,
                                            amount: 1,
                                            gold: 0
                                        };
                                        //创建订单并请求微信支付
                                        Sys.ui.startLoading("", 1);
                                        this.resolveRequest('MallOrderRequest', data).then((data: msg.MallOrderResponse) => {
                                            console.log('msg.MallOrderResponse', data);
                                            if (data.order.wechatOrder) {
                                                let orderObj: any = {
                                                    partnerid: data.order.wechatOrder.partnerId,
                                                    prepayid: data.order.wechatOrder.prePayId,
                                                    package: data.order.wechatOrder.package,
                                                    noncestr: data.order.wechatOrder.nonceStr,
                                                    timestamp: data.order.wechatOrder.timeStamp,
                                                    sign: data.order.wechatOrder.sign
                                                };
                                                //发起支付
                                                this.wechatPay(orderObj).then(() => {
                                                    //微信支付收到通知，实际上购买的东西还没返回，延迟500s，看返回了没有
                                                    // Laya.timer.once(500, this, () => {
                                                    caller ? successHandler.bind(caller)(payResult) : successHandler(payResult);
                                                    // });
                                                    clearTimer();
                                                }).catch(() => {
                                                    caller ? cancelHandler.bind(caller)(payResult) : cancelHandler(payResult);
                                                    clearTimer();
                                                });
                                            }
                                        }).catch((data: msg.ErrorMsg) => {
                                            if (data && data.codes) {
                                                MessageDialog.showWithText(Utility.toMessageWithCode(data.codes));
                                            }
                                            caller ? successHandler.bind(caller)(payResult) : successHandler(payResult);
                                            clearTimer();
                                        });
                                    }), Laya.Handler.create(this, () => {
                                        caller ? cancelHandler.bind(caller)() : cancelHandler();
                                        clearTimer();
                                    }));
                                // MessagePrompt.setConfText(Sys.localization.get(stringtable.recharge));
                            }
                        }
                    }
                }
                else if (errorTemplate.itemTempId === VirtualCurrencyType.DiamondCurrency) {  // 钻石不足
                    //还差多少钻石
                    let lackDiamond: number = Math.abs(Sys.itemMgr.itemRepository.getCurrency(VirtualCurrencyType.DiamondCurrency) - errorTemplate.costAmount);
                    let convertPayment: msg.Payment = Sys.itemMgr.itemRepository.diamondConvertPayment(Math.abs(lackDiamond));
                    if (convertPayment) {
                        //支付结果
                        let payResult: QuickPayResult = {
                            payType: QuickPayType.Diamond,
                            amount: convertPayment.diamond
                        };
                        let content = `钻石不足，确定要购买${convertPayment.diamond}钻石吗？`;
                        MessagePrompt.openPrompt(content,
                            Laya.Handler.create(this, () => {
                                //购买钻石
                                let data: msg.MallOrderRequest = {
                                    type: msg.PayType.Wechat,
                                    paymentId: convertPayment.id,
                                    amount: 1,
                                    gold: 0
                                };
                                //创建订单并请求微信支付
                                Sys.ui.startLoading("", 1);
                                this.resolveRequest('MallOrderRequest', data).then((data: msg.MallOrderResponse) => {
                                    console.log('msg.MallOrderResponse', data);
                                    if (data.order.wechatOrder) {
                                        let orderObj: any = {
                                            partnerid: data.order.wechatOrder.partnerId,
                                            prepayid: data.order.wechatOrder.prePayId,
                                            package: data.order.wechatOrder.package,
                                            noncestr: data.order.wechatOrder.nonceStr,
                                            timestamp: data.order.wechatOrder.timeStamp,
                                            sign: data.order.wechatOrder.sign
                                        };
                                        //发起支付
                                        this.wechatPay(orderObj).then(() => {
                                            //微信支付收到通知，实际上购买的东西还没返回，延迟500s，看返回了没有
                                            // Laya.timer.once(500, this, () => {
                                            caller ? successHandler.bind(caller)(payResult) : successHandler(payResult);
                                            // });
                                            clearTimer();
                                        }).catch(() => {
                                            caller ? cancelHandler.bind(caller)(payResult) : cancelHandler(payResult);
                                            clearTimer();
                                        });
                                    }
                                }).catch((data: msg.ErrorMsg) => {
                                    if (data && data.codes) {
                                        MessageDialog.showWithText(Utility.toMessageWithCode(data.codes));
                                    }
                                    caller ? cancelHandler.bind(caller)(payResult) : cancelHandler(payResult);
                                    clearTimer();
                                });
                            }), Laya.Handler.create(this, () => {
                                caller ? cancelHandler.bind(caller)(payResult) : cancelHandler(payResult);
                                clearTimer();
                            }));
                        // MessagePrompt.setConfText(Sys.localization.get(stringtable.recharge));
                    }
                }
            }
        }

        /**
         * 微信支付
         * @param {wesai.HoldemPoker.msg.WechatOrder} orderObj
         * @returns {Promise<Promise<any> | Promise>}
         */
        public async wechatPay(orderObj: {
            partnerid: string;
            prepayid: string;
            package: string;
            noncestr: string;
            timestamp: string;
            sign: string;

        }) {
            if (!Sys.platformRunning) {
                return Promise.resolve();
            }
            return new Promise((resolve, reject) => {
                //等待微信支付结果
                Sys.event.once(GEvent.WX_PAY_SUCCESS, this, () => {
                    console.log('wechatPay success');
                    Sys.ui.stopLoading();
                    // Sys.inWechatPayProgress = false;
                    resolve();
                });
                Sys.event.once(GEvent.WX_PAY_CANCEL, this, () => {
                    console.log('wechatPay failed');
                    Sys.ui.stopLoading();
                    // Sys.inWechatPayProgress = false;
                    reject();
                });
                //发起支付
                Sys.inWechatPayProgress = true;
                Sys.ui.startLoading("", 1);
                console.log('wechatPay start');
                NativeModule.payWithWeixin(JSON.stringify(orderObj));
            });
        }

    }

}